/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ card_history
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô logCardHistory ‡πÅ‡∏•‡∏∞ assignRfidCard
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables
dotenv.config();

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á card_history
 */
async function testCardHistoryTableConnection() {
  console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á card_history ===');
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏ï‡∏≤‡∏£‡∏≤‡∏á card_history
    const { data, error } = await supabase
      .from('card_history')
      .select('*')
      .limit(5);

    if (error) {
      console.error('‚ùå Error connecting to card_history table:', error);
      return false;
    }

    console.log('‚úÖ Successfully connected to card_history table');
    console.log(`üìä Found ${data.length} existing records`);
    
    if (data.length > 0) {
      console.log('üìã Sample record:', data[0]);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Exception while testing table connection:', error);
    return false;
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
 */
async function testDirectCardHistoryLogging() {
  console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ===');
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testEntry = {
      student_id: 100001, // ‡πÉ‡∏ä‡πâ student_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      action_type: 'issue',
      old_status: null,
      new_status: 'assigned',
      reason: 'Test card history logging',
      performed_by: null,
      metadata: {
        test: true,
        timestamp: new Date().toISOString(),
        test_type: 'direct_logging'
      }
    };

    console.log('üìù Inserting test record:', testEntry);

    const { data, error } = await supabase
      .from('card_history')
      .insert(testEntry)
      .select();

    if (error) {
      console.error('‚ùå Error inserting test record:', error);
      return false;
    }

    console.log('‚úÖ Successfully inserted test record');
    console.log('üìã Inserted record:', data[0]);
    
    return data[0];
  } catch (error) {
    console.error('‚ùå Exception while testing direct logging:', error);
    return false;
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 */
async function testGetStudentHistory(studentId) {
  console.log(`\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${studentId} ===`);
  
  try {
    const { data, error } = await supabase
      .from('card_history')
      .select('*')
      .eq('student_id', studentId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Error fetching student history:', error);
      return false;
    }

    console.log(`‚úÖ Found ${data.length} history records for student ${studentId}`);
    
    if (data.length > 0) {
      console.log('üìã Latest records:');
      data.slice(0, 3).forEach((record, index) => {
        console.log(`  ${index + 1}. ${record.action_type} - ${record.new_status} (${record.created_at})`);
      });
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå Exception while fetching student history:', error);
    return false;
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
async function cleanupTestData(recordId) {
  console.log('\n=== ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===');
  
  try {
    const { error } = await supabase
      .from('card_history')
      .delete()
      .eq('history_id', recordId);

    if (error) {
      console.error('‚ùå Error cleaning up test data:', error);
      return false;
    }

    console.log('‚úÖ Successfully cleaned up test data');
    return true;
  } catch (error) {
    console.error('‚ùå Exception while cleaning up:', error);
    return false;
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_student_card_history (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 */
async function testGetStudentCardHistoryFunction(studentId) {
  console.log(`\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_student_card_history ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${studentId} ===`);
  
  try {
    const { data, error } = await supabase
      .rpc('get_student_card_history', { p_student_id: studentId });

    if (error) {
      console.error('‚ùå Error calling get_student_card_history function:', error);
      return false;
    }

    console.log(`‚úÖ Function returned ${data.length} records`);
    
    if (data.length > 0) {
      console.log('üìã Function results:');
      data.slice(0, 3).forEach((record, index) => {
        console.log(`  ${index + 1}. ${record.action_type} - ${record.new_status} (${record.created_at})`);
      });
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå Exception while testing function:', error);
    return false;
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ authenticate ‡∏î‡πâ‡∏ß‡∏¢ service role key
 */
async function testWithServiceRole() {
  console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Service Role Key ===');
  
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  if (!serviceRoleKey) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_SERVICE_ROLE_KEY, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ');
    return false;
  }

  const serviceSupabase = createClient(supabaseUrl, serviceRoleKey);
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ service role
    const testEntry = {
      student_id: 100001,
      action_type: 'issue',
      old_status: null,
      new_status: 'assigned',
      reason: 'Test with service role',
      performed_by: 'system_test',
      metadata: {
        test: true,
        timestamp: new Date().toISOString(),
        test_type: 'service_role_test'
      }
    };

    const { data, error } = await serviceSupabase
      .from('card_history')
      .insert(testEntry)
      .select();

    if (error) {
      console.error('‚ùå Error with service role:', error);
      return false;
    }

    console.log('‚úÖ Successfully inserted with service role');
    console.log('üìã Record:', data[0]);
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    await serviceSupabase
      .from('card_history')
      .delete()
      .eq('history_id', data[0].history_id);
    
    console.log('‚úÖ Test data cleaned up');
    return true;
  } catch (error) {
    console.error('‚ùå Exception with service role:', error);
    return false;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function runAllTests() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ card_history');
  
  let testRecord = null;
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    const connectionOk = await testCardHistoryTableConnection();
    if (!connectionOk) {
      console.log('‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á card_history');
      return;
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ service role key
    const serviceRoleOk = await testWithServiceRole();
    if (serviceRoleOk) {
      console.log('‚úÖ Service role test passed');
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    testRecord = await testDirectCardHistoryLogging();
    if (!testRecord) {
      console.log('‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
      return;
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    await testGetStudentHistory(100001);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    await testGetStudentCardHistoryFunction(100001);

    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏£‡∏∞‡∏ö‡∏ö card_history ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
  } finally {
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    if (testRecord && testRecord.history_id) {
      await cleanupTestData(testRecord.history_id);
    }
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
runAllTests().catch(console.error);