import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import path from 'path';

// ‡πÇ‡∏´‡∏•‡∏î environment variables
dotenv.config({ path: path.join(process.cwd(), '../safety-bus-bot/vercel-deploy/.env.local') });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;
const lineToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

if (!lineToken) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE_CHANNEL_ACCESS_TOKEN');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function updateLineNotificationFunction() {
    console.log('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô send_line_notification ‡∏î‡πâ‡∏ß‡∏¢ LINE token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...');
    
    const functionSQL = `
-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á LINE notification (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
CREATE OR REPLACE FUNCTION send_line_notification(
    p_line_user_id TEXT,
    p_message TEXT
) RETURNS JSON AS $$
DECLARE
    line_token TEXT := '${lineToken}';
    response_data JSON;
    http_response RECORD;
    log_id BIGINT;
BEGIN
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ line_user_id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    IF p_line_user_id IS NULL OR p_line_user_id = '' THEN
        RETURN json_build_object(
            'success', false,
            'error', 'LINE User ID is required'
        );
    END IF;

    -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    INSERT INTO notification_logs (
        notification_type,
        recipient_id,
        message,
        status,
        created_at
    ) VALUES (
        'line',
        p_line_user_id,
        p_message,
        'sending',
        NOW()
    ) RETURNING log_id INTO log_id;

    BEGIN
        -- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE Messaging API
        SELECT * INTO http_response FROM http((
            'POST',
            'https://api.line.me/v2/bot/message/push',
            ARRAY[
                http_header('Content-Type', 'application/json'),
                http_header('Authorization', 'Bearer ' || line_token)
            ],
            'application/json',
            json_build_object(
                'to', p_line_user_id,
                'messages', json_build_array(
                    json_build_object(
                        'type', 'text',
                        'text', p_message
                    )
                )
            )::text
        ));

        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        IF http_response.status = 200 THEN
            -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï log ‡πÄ‡∏õ‡πá‡∏ô success
            UPDATE notification_logs 
            SET status = 'sent', 
                sent_at = NOW(),
                response_data = json_build_object(
                    'http_status', http_response.status,
                    'response', http_response.content
                )
            WHERE log_id = log_id;
            
            RETURN json_build_object(
                'success', true,
                'message', 'LINE notification sent successfully',
                'http_status', http_response.status
            );
        ELSE
            -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï log ‡πÄ‡∏õ‡πá‡∏ô failed
            UPDATE notification_logs 
            SET status = 'failed', 
                error_message = json_build_object(
                    'http_status', http_response.status,
                    'response', http_response.content
                )::text
            WHERE log_id = log_id;
            
            RETURN json_build_object(
                'success', false,
                'error', 'Failed to send LINE notification',
                'http_status', http_response.status,
                'response', http_response.content
            );
        END IF;
        
    EXCEPTION WHEN OTHERS THEN
        -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï log ‡πÄ‡∏õ‡πá‡∏ô error
        UPDATE notification_logs 
        SET status = 'error', 
            error_message = SQLERRM
        WHERE log_id = log_id;
        
        RETURN json_build_object(
            'success', false,
            'error', 'Exception occurred: ' || SQLERRM
        );
    END;
END;
$$ LANGUAGE plpgsql;
`;

    try {
        const { data, error } = await supabase.rpc('exec_sql', {
            sql_query: functionSQL
        });

        if (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô:', error);
            return false;
        }

        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô send_line_notification ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        console.log('üîë ‡πÉ‡∏ä‡πâ LINE token:', lineToken.substring(0, 20) + '...');
        return true;

    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
        return false;
    }
}

// ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
updateLineNotificationFunction().then(success => {
    if (success) {
        console.log('üéâ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE token ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE token ‡πÑ‡∏î‡πâ');
    }
    process.exit(success ? 0 : 1);
});