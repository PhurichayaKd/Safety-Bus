// lib/menu.js
import { lineClient } from './line.js';
import { createCanvas } from 'canvas';
import { getStudentByLineId } from './student-data.js';

// Rich Menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
const mainRichMenu = {
  size: {
    width: 2500,
    height: 1686
  },
  selected: false,
  name: "Safety Bus Main Menu",
  chatBarText: "Menu",
  areas: [
    {
      bounds: {
        x: 0,
        y: 0,
        width: 1250,
        height: 843
      },
      action: {
        type: "postback",
        data: "action=history",
        displayText: "üìä Travel History"
      }
    },
    {
      bounds: {
        x: 1250,
        y: 0,
        width: 1250,
        height: 843
      },
      action: {
        type: "postback",
        data: "action=leave",
        displayText: "üìù Leave Request"
      }
    },
    {
      bounds: {
        x: 0,
        y: 843,
        width: 1250,
        height: 843
      },
      action: {
        type: "postback",
        data: "action=location",
        displayText: "üöå Bus Location"
      }
    },
    {
      bounds: {
        x: 1250,
        y: 843,
        width: 1250,
        height: 843
      },
      action: {
        type: "postback",
        data: "action=contact",
        displayText: "üìû Contact Driver"
      }
    }
  ]
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Rich Menu
async function createRichMenuImage() {
  const canvas = createCanvas(2500, 1686);
  const ctx = canvas.getContext('2d');
  
  // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà‡∏™‡∏µ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
  const gradient = ctx.createLinearGradient(0, 0, 0, 1686);
  gradient.addColorStop(0, '#E3F2FD');
  gradient.addColorStop(0.5, '#F8FBFF');
  gradient.addColorStop(1, '#E8F5E8');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, 2500, 1686);
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô
  function drawRoundedRect(x, y, width, height, radius, fillColor, strokeColor) {
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    
    if (fillColor) {
      ctx.fillStyle = fillColor;
      ctx.fill();
    }
    
    if (strokeColor) {
      ctx.strokeStyle = strokeColor;
      ctx.lineWidth = 2;
      ctx.stroke();
    }
  }
  
  // ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
  const margin = 30;
  const cornerRadius = 40;
  
  // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô - Travel History
  drawRoundedRect(margin, margin, 1250 - margin * 2, 843 - margin * 2, cornerRadius, 
    'rgba(255, 255, 255, 0.9)', '#B3E5FC');
  
  // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô - Leave Request  
  drawRoundedRect(1250 + margin, margin, 1250 - margin * 2, 843 - margin * 2, cornerRadius,
    'rgba(255, 255, 255, 0.9)', '#C8E6C9');
  
  // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á - Bus Location
  drawRoundedRect(margin, 843 + margin, 1250 - margin * 2, 843 - margin * 2, cornerRadius,
    'rgba(255, 255, 255, 0.9)', '#FFE0B2');
  
  // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á - Contact Driver
  drawRoundedRect(1250 + margin, 843 + margin, 1250 - margin * 2, 843 - margin * 2, cornerRadius,
    'rgba(255, 255, 255, 0.9)', '#F8BBD9');
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  function drawThaiText(text, x, y, fontSize, color = '#1565C0', weight = 'normal') {
    ctx.fillStyle = color;
    ctx.font = `${weight} ${fontSize}px "Noto Sans Thai", "Sarabun", "Tahoma", "Arial Unicode MS", sans-serif`;
    
    // ‡πÉ‡∏ä‡πâ fillText ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    try {
      ctx.fillText(text, x, y);
    } catch (error) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå fallback
      ctx.font = `${weight} ${fontSize}px Arial, sans-serif`;
      ctx.fillText(text, x, y);
    }
  }
  
  // ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á - ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
  ctx.fillStyle = '#0277BD';
  ctx.font = 'bold 140px Arial';
  ctx.fillText('üìä', 625, 320);
  drawThaiText('Travel History', 625, 420, 52, '#0277BD', 'bold');
  drawThaiText('View travel records', 625, 470, 28, '#555');
  
  // ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
  ctx.fillStyle = '#2E7D32';
  ctx.font = 'bold 140px Arial';
  ctx.fillText('üìù', 1875, 320);
  drawThaiText('Leave Request', 1875, 420, 52, '#2E7D32', 'bold');
  drawThaiText('Report absence', 1875, 470, 28, '#555');
  
  // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™ - ‡∏™‡∏µ‡∏™‡πâ‡∏°
  ctx.fillStyle = '#F57C00';
  ctx.font = 'bold 140px Arial';
  ctx.fillText('üöå', 625, 1200);
  drawThaiText('Bus Location', 625, 1300, 52, '#F57C00', 'bold');
  drawThaiText('Real-time tracking', 625, 1350, 28, '#555');
  
  // ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö - ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
  ctx.fillStyle = '#C2185B';
  ctx.font = 'bold 140px Arial';
  ctx.fillText('üìû', 1875, 1200);
  drawThaiText('Contact Driver', 1875, 1300, 52, '#C2185B', 'bold');
  drawThaiText('Call bus driver', 1875, 1350, 28, '#555');
  
  return canvas.toBuffer('image/png');
}

// Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
const mainQuickReply = {
  items: [
    {
      type: "action",
      action: {
        type: "postback",
        label: "üìä Travel History",
        data: "action=history",
        displayText: "üìä Travel History"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üìù Leave Request",
        data: "action=leave",
        displayText: "üìù Leave Request"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üöå Bus Location",
        data: "action=location",
        displayText: "üöå Bus Location"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üìû Contact Driver",
        data: "action=contact",
        displayText: "üìû Contact Driver"
      }
    }
  ]
};

// Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
const driverQuickReply = {
  items: [
    {
      type: "action",
      action: {
        type: "postback",
        label: "üìä ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
        data: "action=driver_student_info",
        displayText: "üìä ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™",
        data: "action=location",
        displayText: "üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
        data: "action=contact",
        displayText: "üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
        data: "action=change_student",
        displayText: "üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
      }
    }
  ]
};

// Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
const leaveQuickReply = {
  items: [
    {
      type: "action",
      action: {
        type: "postback",
        label: "ü§í Sick Leave",
        data: "leave_type=sick",
        displayText: "ü§í Sick Leave"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üìö Personal Leave",
        data: "leave_type=personal",
        displayText: "üìö Personal Leave"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üè† Absent",
        data: "leave_type=absent",
        displayText: "üè† Absent"
      }
    },
    {
      type: "action",
      action: {
        type: "postback",
        label: "üîô Back to Main Menu",
        data: "action=main_menu",
        displayText: "üîô Back to Main Menu"
      }
    }
  ]
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu
async function createRichMenu() {
  try {
    const richMenuId = await lineClient.createRichMenu(mainRichMenu);
    console.log('‚úÖ Rich Menu created with ID:', richMenuId);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Rich Menu ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ (‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
    const imageBuffer = await createRichMenuImage();
    
    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Rich Menu
    await lineClient.setRichMenuImage(richMenuId, imageBuffer, 'image/png');
    console.log('‚úÖ Rich Menu image uploaded');
    
    return richMenuId;
  } catch (error) {
    console.error('‚ùå Error creating Rich Menu:', error);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Rich Menu ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
async function setDefaultRichMenu(richMenuId) {
  try {
    await lineClient.setDefaultRichMenu(richMenuId);
    console.log('‚úÖ Default Rich Menu set');
  } catch (error) {
    console.error('‚ùå Error setting default Rich Menu:', error);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° Quick Reply
async function sendMessageWithQuickReply(userId, message, quickReply) {
  try {
    await lineClient.pushMessage(userId, {
      type: 'text',
      text: message,
      quickReply: quickReply
    });
  } catch (error) {
    console.error('‚ùå Error sending message with quick reply:', error);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
async function sendMainMenu(userId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userData = await getStudentByLineId(userId);
    
    let message = 'üöç ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus\n\n';
    let quickReply = mainQuickReply;
    
    if (userData && userData.success) {
      if (userData.type === 'driver') {
        message += `üöå ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${userData.driver_name}\nüë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${userData.student_name}\n\nüì± ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:`;
        quickReply = driverQuickReply;
      } else if (userData.type === 'parent') {
        message += `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á\nüë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${userData.student_name}\n\nüì± ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:`;
      } else if (userData.type === 'student') {
        message += `üë¶üëß ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${userData.student_name}\n\nüì± ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:`;
      }
    } else {
      message += '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\nüí° ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ';
    }
    
    await sendMessageWithQuickReply(userId, message, quickReply);
  } catch (error) {
    console.error('‚ùå Error sending main menu:', error);
    const fallbackMessage = 'üöç ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\nüí° ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ';
    await lineClient.pushMessage(userId, {
      type: 'text',
      text: fallbackMessage
    });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
async function sendLeaveMenu(userId) {
  const message = 'üìù Leave Request\n\nPlease select leave type:';
  await sendMessageWithQuickReply(userId, message, leaveQuickReply);
}

export {
  mainRichMenu,
  mainQuickReply,
  driverQuickReply,
  leaveQuickReply,
  createRichMenu,
  setDefaultRichMenu,
  sendMessageWithQuickReply,
  sendMainMenu,
  sendLeaveMenu
};