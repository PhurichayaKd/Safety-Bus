// lib/handlers.js
import { lineClient } from './line.js';
import { supabase } from './db.js';
import { sendMainMenu, sendLeaveMenu } from './menu.js';
import { consumeToken, markTokenUsed } from './tokens.js';
import { linkByStudentId, linkDriverByStudentId, linkLineAccount, checkLinkStatus, unlinkAccount } from './account-linking.js';
import { sendTravelHistory, sendTravelStatistics } from './student-history.js';
import { sendBusLocation } from './bus-tracking.js';
import { sendAbsenceList, createAbsenceFromLine, createAbsenceQuickReply } from './absence-management.js';
import { sendLeaveForm, createReasonForm, saveLeaveRequest } from './leave-form.js';
import { getStudentByLineId } from './student-data.js';

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
const userFormStates = new Map();

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ text message
async function handleTextMessage(event) {
  const userId = event.source.userId;
  const text = event.message.text.trim();
  
  console.log(`üìù Text message from ${userId}: ${text}`);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (userFormStates.has(userId)) {
    await handleLeaveReasonInput(event, text);
    return;
  }
  
  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
  if (text === '‡πÄ‡∏°‡∏ô‡∏π' || text === 'menu') {
    await sendMainMenu(userId, event.replyToken);
    return;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (text.startsWith('LINK:')) {
    const token = text.replace('LINK:', '').trim();
    await handleAccountLinking(event, token);
    return;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  if (text.includes('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥') || text.includes('history')) {
    await handleTravelHistory(event);
    return;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
  if (text.includes('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ') || text.includes('‡∏£‡∏ñ') || text.includes('location')) {
    await handleBusLocation(event);
    return;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
  if (text.includes('‡∏•‡∏≤') || text.includes('absence') || text.includes('‡∏Ç‡∏≤‡∏î')) {
    await handleAbsenceCommand(event);
    return;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
  if (text.includes('‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö') || text.includes('driver')) {
    await handleDriverCommand(event);
    return;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (6 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ)
  if (/^[a-zA-Z0-9]{6,20}$/.test(text)) {
    await handleStudentIdInput(event, text);
    return;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isAbsenceData = await processAbsenceData(event);
  if (isAbsenceData) {
    return;
  }
  
  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
  await lineClient.replyMessage(event.replyToken, {
    type: 'text',
    text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n\n‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n‚Ä¢ "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n‚Ä¢ "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ" - ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™\n‚Ä¢ "‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î" - ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î\n‚Ä¢ "‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ`
  });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback event
async function handlePostback(event) {
  const userId = event.source.userId;
  const data = event.postback.data;
  
  console.log(`üîÑ Postback from ${userId}: ${data}`);
  
  // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó action
  if (data.startsWith('action=')) {
    const action = data.split('=')[1];
    await handleMainAction(event, action);
  } else if (data.startsWith('leave_type=')) {
    const leaveType = data.split('=')[1];
    await handleLeaveRequest(event, leaveType);
  } else if (data.startsWith('confirm_leave=')) {
    const leaveId = data.split('=')[1];
    await handleLeaveConfirmation(event, leaveId);
  } else if (data.startsWith('leave_form_')) {
    await handleLeaveFormPostback(event, data);
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
async function handleTravelHistory(event) {
  const text = event.message.text.toLowerCase();
  let options = { format: 'flex', days: 7 };
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  if (text.includes('‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå')) {
    options.days = 7;
  } else if (text.includes('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')) {
    options.days = 30;
  } else if (text.includes('‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥')) {
    await sendTravelStatistics(event.source.userId, 30);
    return;
  }
  
  await sendTravelHistory(event.source.userId, options);
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
async function handleBusLocation(event) {
  await sendBusLocation(event.source.userId, { format: 'flex' });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
async function handleAbsenceCommand(event) {
  const text = event.message.text.toLowerCase();
  
  if (text.includes('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£') || text.includes('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≤')) {
    await sendAbsenceList(event.source.userId, { format: 'flex' });
  } else if (text.includes('‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢') || text.includes('‡∏õ‡πà‡∏ß‡∏¢')) {
    await handleAbsenceRequest(event, 'sick');
  } else if (text.includes('‡∏•‡∏≤‡∏Å‡∏¥‡∏à') || text.includes('‡∏Å‡∏¥‡∏à')) {
    await handleAbsenceRequest(event, 'personal');
  } else if (text.includes('‡∏•‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô') || text.includes('‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô')) {
    await handleAbsenceRequest(event, 'emergency');
  } else {
    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà
    await sendLeaveForm(event.source.userId, event.replyToken);
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
async function handleAbsenceRequest(event, absenceType) {
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const typeText = {
    'sick': 'ü§í ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢',
    'personal': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏•‡∏≤‡∏Å‡∏¥‡∏à',
    'emergency': 'üö® ‡∏•‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô'
  };
  
  const replyMessage = {
    type: 'text',
    text: `${typeText[absenceType]}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:\n\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: DD/MM/YYYY\nüìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: [‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤]\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 25/12/2024\nüìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î`
  };
  
  await lineClient.replyMessage(event.replyToken, replyMessage);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤
async function processAbsenceData(event) {
  const text = event.message.text;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤
  const dateMatch = text.match(/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà[:\s]*([0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4})/i);
  const reasonMatch = text.match(/‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•[:\s]*(.+)/i);
  
  if (dateMatch && reasonMatch) {
    const dateStr = dateMatch[1];
    const reason = reasonMatch[1].trim();
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const [day, month, year] = dateStr.split('/');
    const startDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    let absenceType = 'other';
    if (text.includes('‡∏õ‡πà‡∏ß‡∏¢') || text.includes('‡πÑ‡∏Ç‡πâ') || text.includes('‡πÄ‡∏à‡πá‡∏ö')) {
      absenceType = 'sick';
    } else if (text.includes('‡∏Å‡∏¥‡∏à') || text.includes('‡∏ò‡∏∏‡∏£‡∏∞')) {
      absenceType = 'personal';
    } else if (text.includes('‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô') || text.includes('‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô')) {
      absenceType = 'emergency';
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤
    await createAbsenceFromLine(event.source.userId, {
      absence_type: absenceType,
      start_date: startDate,
      reason: reason
    });
    
    return true;
  }
  
  return false;
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ follow event (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô)
async function handleFollow(event) {
  const userId = event.source.userId;
  
  console.log(`üë• New follower: ${userId}`);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const linkStatus = await checkLinkStatus(userId);
  
  if (linkStatus.isLinked) {
    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤!\n\nüë§ ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${linkStatus.parent_name}\nüë∂ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${linkStatus.student_name}\nüÜî ‡∏£‡∏´‡∏±‡∏™: ${linkStatus.student_id}\n\n‚úÖ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
    });
    
    // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ push message ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å reply)
    setTimeout(() => {
      sendMainMenu(userId);
    }, 1500);
  } else {
    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `üöç ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus!\n\nüì± ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:\n\n1Ô∏è‚É£ ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (8-20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)\n2Ô∏è‚É£ ‡πÉ‡∏ä‡πâ‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå (LINK:xxxxx)\n\nüí° ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå \"‡πÄ‡∏°‡∏ô‡∏π\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ`
    });
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ action ‡∏´‡∏•‡∏±‡∏Å
async function handleMainAction(event, action) {
  const userId = event.source.userId;
  
  switch (action) {
    case 'history':
      await handleHistoryRequest(event);
      break;
    case 'leave':
      await handleLeaveRequest(event);
      break;
    case 'location':
      await handleLocationRequest(event);
      break;
    case 'contact':
      await handleContactRequest(event);
      break;
    case 'main_menu':
      await sendMainMenu(userId, event.replyToken);
      break;
    case 'driver_student_info':
      await handleDriverStudentInfo(event);
      break;
    case 'change_student':
      await handleChangeStudent(event);
      break;
    default:
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
async function handleHistoryRequest(event) {
  const userId = event.source.userId;
  
  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    await sendTravelHistory(userId, event.replyToken);
    
  } catch (error) {
    console.error('‚ùå Error fetching student data:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ (‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏° interactive)
async function handleLeaveRequest(event) {
  const userId = event.source.userId;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô
  const linkStatus = await checkLinkStatus(userId);
  
  if (!linkStatus.isLinked) {
    const message = {
      type: 'text',
      text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ\n\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤\n\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:\n1. ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "link"\n2. ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n3. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
    };
    
    // ‡πÉ‡∏ä‡πâ replyMessage ‡∏´‡∏≤‡∏Å‡∏°‡∏µ replyToken ‡∏´‡∏£‡∏∑‡∏≠ pushMessage ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (event.replyToken) {
      await lineClient.replyMessage(event.replyToken, message);
    } else {
      await lineClient.pushMessage(userId, message);
    }
    return;
  }
  
  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ LIFF ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤
  const liffMessage = {
    type: 'flex',
    altText: '‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î',
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üìù ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î',
            weight: 'bold',
            size: 'xl',
            color: '#FFFFFF',
            align: 'center'
          }
        ],
        backgroundColor: '#1DB446',
        paddingAll: '20px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î',
            size: 'md',
            color: '#333333',
            align: 'center',
            wrap: true
          },
          {
            type: 'separator',
            margin: 'lg'
          },
          {
            type: 'text',
            text: '‚Ä¢ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤\n‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤\n‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•\n‚Ä¢ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠',
            size: 'sm',
            color: '#666666',
            margin: 'lg'
          }
        ],
        spacing: 'md',
        paddingAll: '20px'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: 'üìù ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤',
              uri: `${process.env.BASE_URL}/link/leave-form?userId=${userId}`
            },
            style: 'primary',
            color: '#1DB446'
          }
        ],
        paddingAll: '20px'
      }
    }
  };
  
  if (event.replyToken) {
    await lineClient.replyMessage(event.replyToken, liffMessage);
  } else {
    await lineClient.pushMessage(userId, liffMessage);
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)
async function handleOldLeaveRequest(event, leaveType) {
  const userId = event.source.userId;
  
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const { data: parentLink } = await supabase
      .from('parent_line_links')
      .select('parent_id, students(name, student_id)')
      .eq('line_user_id', userId)
      .single();
    
    if (!parentLink) {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô'
      });
      return;
    }
    
    const leaveTypeText = {
      'sick': '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢',
      'personal': '‡∏•‡∏≤‡∏Å‡∏¥‡∏à',
      'absent': '‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
    };
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤
    const { data: leave, error } = await supabase
      .from('student_leaves')
      .insert({
        student_id: parentLink.students.student_id,
        leave_type: leaveType,
        leave_date: new Date().toISOString().split('T')[0],
        reason: leaveTypeText[leaveType],
        status: 'approved',
        created_by: parentLink.parent_id
      })
      .select()
      .single();
    
    if (error) throw error;
    
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£${leaveTypeText[leaveType]}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\nüë§ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${parentLink.students.name}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleDateString('th-TH')}\nüìù ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${leaveTypeText[leaveType]}\n\n‚ú® ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ`
    });
    
  } catch (error) {
    console.error('‚ùå Error processing leave request:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
async function handleLocationRequest(event) {
  await lineClient.replyMessage(event.replyToken, {
    type: 'text',
    text: 'üìç ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ\n\nüöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤\n‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ\n\nüîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï'
  });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
async function handleContactRequest(event) {
  await lineClient.replyMessage(event.replyToken, {
    type: 'text',
    text: 'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ\n\nüöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤\n‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ\n\nüì± ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏ó‡∏£ 191'
  });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô
async function handleAccountLinking(event, token) {
  const userId = event.source.userId;
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô
    const tokenData = await consumeToken(token);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: existingLink } = await supabase
      .from('parent_line_links')
      .select('*')
      .eq('line_user_id', userId)
      .single();
    
    if (existingLink) {
      await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ö†Ô∏è ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n\nüîÑ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\nüìû ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    });
      return;
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    const { error: linkError } = await supabase
      .from('parent_line_links')
      .insert({
        parent_id: tokenData.parent_id,
        line_user_id: userId,
        linked_at: new Date().toISOString()
      });
    
    if (linkError) throw linkError;
    
    // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
    await markTokenUsed(token, userId);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const { data: parentData } = await supabase
      .from('parents')
      .select('name, students(name)')
      .eq('parent_id', tokenData.parent_id)
      .single();
    
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `üéâ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!\n\nüë§ ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${parentData.name}\nüë∂ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${parentData.students.name}\n\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\nüîî ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\nüì± ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
    });
    
  } catch (error) {
    console.error('‚ùå Error linking account:', error);
    
    let errorMessage = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n\nüîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
    
    if (error.message === 'TOKEN_NOT_FOUND') {
      errorMessage = '‚ùå ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüìù ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå';
    } else if (error.message === 'TOKEN_USED') {
      errorMessage = '‚ùå ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\nüÜï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå\nüìû ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà';
    } else if (error.message === 'TOKEN_EXPIRED') {
      errorMessage = '‚ùå ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß\n\n‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå\nüìû ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
    }
    
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: errorMessage
    });
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
async function handleStudentIdInput(event, studentId) {
  const userId = event.source.userId;
  console.log('üîç handleStudentIdInput - START:', { studentId, userId });
  console.log(`üîç handleStudentIdInput called with studentId: ${studentId}, userId: ${userId}`);
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const userState = userFormStates.get(userId);
    console.log('üîç handleStudentIdInput - userState:', userState);
    
    if (userState && userState.type === 'driver_linking') {
      console.log('üîç handleStudentIdInput - calling handleDriverStudentIdInput');
      await handleDriverStudentIdInput(event, studentId);
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (userState && userState.type === 'driver_change_student') {
      console.log('üîç handleStudentIdInput - calling handleDriverChangeStudentId');
      await handleDriverChangeStudentId(event, studentId);
      return;
    }
    
    console.log('üîç handleStudentIdInput - calling linkByStudentId for parent');
    const result = await linkByStudentId(userId, studentId, null, null, event.replyToken);
    
    if (result.success) {
      // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      setTimeout(() => {
        sendMainMenu(userId); // ‡πÉ‡∏ä‡πâ pushMessage ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ replyToken ‡πÅ‡∏•‡πâ‡∏ß
      }, 2000);
    } else {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: `‚ùå ${result.error}`
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error processing student ID:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n\nüîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüìû ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
    });
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
async function handleDriverCommand(event) {
  const userId = event.source.userId;
  
  await lineClient.replyMessage(event.replyToken, {
    type: 'text',
    text: `üöå ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ\n\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n\n1Ô∏è‚É£ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö (‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•)\n2Ô∏è‚É£ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö\n\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ\n12345678\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ`
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  userFormStates.set(userId, {
    type: 'driver_linking',
    step: 'waiting_name',
    timestamp: Date.now()
  });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
async function handleDriverStudentIdInput(event, studentId) {
  const userId = event.source.userId;
  const userState = userFormStates.get(userId);
  
  if (!userState || !userState.driverName) {
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô\n\nüí° ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà'
    });
    return;
  }
  
  try {
    const result = await linkDriverByStudentId(userId, studentId, userState.driverName);
    
    if (result.success) {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: `üéâ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüöå ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${userState.driverName}\nüë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${result.student_name}\nüÜî ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${studentId}\n\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\nüîî ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ\n\nüì± ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
      });
      
      // ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      userFormStates.delete(userId);
      
      // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      setTimeout(() => {
        sendMainMenu(userId);
      }, 2000);
    } else {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: `‚ùå ${result.error}\n\nüí° ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà`
      });
      userFormStates.delete(userId);
    }
    
  } catch (error) {
    console.error('‚ùå Error processing driver student ID:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n\nüîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüìû ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
    });
    userFormStates.delete(userId);
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤
async function handleLeaveFormPostback(event, data) {
  const userId = event.source.userId;
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
  if (data === 'leave_form_sick' || data === 'leave_form_personal' || data === 'leave_form_emergency') {
    const leaveType = data.replace('leave_form_', '');
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    userFormStates.set(userId, {
      type: leaveType,
      step: 'reason'
    });
    
    const typeText = {
      'sick': 'ü§í ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢',
      'personal': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏•‡∏≤‡∏Å‡∏¥‡∏à',
      'emergency': 'üö® ‡∏•‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô'
    };
    
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `${typeText[leaveType]}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤:`
    });
  }
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ studentId ‡πÅ‡∏•‡∏∞ date
  else if (data.startsWith('leave_form_')) {
    const parts = data.split('_');
    if (parts.length >= 5) {
      const leaveType = parts[2]; // sick, personal, absent
      const studentId = parts[3];
      const leaveDate = parts[4];
      
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
      userFormStates.set(userId, {
        type: leaveType,
        studentId: studentId,
        leaveDate: leaveDate,
        step: 'reason'
      });
      
      const typeText = {
        'sick': 'ü§í ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢',
        'personal': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏•‡∏≤‡∏Å‡∏¥‡∏à',
        'absent': '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      };
      
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: `${typeText[leaveType]}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤:`
      });
    }
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
async function handleDriverStudentInfo(event) {
  const userId = event.source.userId;
  
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
    const { data: driverLink } = await supabase
      .from('driver_line_links')
      .select('driver_name, students(student_name, student_id, link_code)')
      .eq('line_user_id', userId)
      .single();
    
    if (!driverLink) {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô'
      });
      return;
    }
    
    // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const { data: recentTrips } = await supabase
      .from('trips')
      .select('*')
      .eq('student_id', driverLink.students.student_id)
      .order('created_at', { ascending: false })
      .limit(5);
    
    let message = `üë®‚Äçüöó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö\n\n`;
    message += `üöå ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${driverLink.driver_name}\n`;
    message += `üë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${driverLink.students.student_name}\n`;
    message += `üÜî ‡∏£‡∏´‡∏±‡∏™: ${driverLink.students.link_code}\n\n`;
    
    if (recentTrips && recentTrips.length > 0) {
      message += `üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n`;
      recentTrips.forEach(trip => {
        const date = new Date(trip.created_at).toLocaleDateString('th-TH');
        const time = new Date(trip.created_at).toLocaleTimeString('th-TH', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        message += `‚Ä¢ ${date} ${time} - ${trip.type === 'pickup' ? 'üöå ‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ' : 'üè† ‡∏•‡∏á‡∏£‡∏ñ'}\n`;
      });
    } else {
      message += `üìä ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á`;
    }
    
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: message
    });
    
  } catch (error) {
    console.error('‚ùå Error fetching driver student info:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
async function handleChangeStudent(event) {
  const userId = event.source.userId;
  
  await lineClient.replyMessage(event.replyToken, {
    type: 'text',
    text: `üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö\n\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö\n\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 12345678\n\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  userFormStates.set(userId, {
    type: 'driver_change_student',
    step: 'waiting_student_id',
    timestamp: Date.now()
  });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
async function handleDriverChangeStudentId(event, studentId) {
  const userId = event.source.userId;
  
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà
    const { data: student } = await supabase
      .from('students')
      .select('student_name, student_id')
      .eq('link_code', studentId)
      .single();
    
    if (!student) {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏\n\nüîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
      return;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
    const { error } = await supabase
      .from('driver_line_links')
      .update({ student_id: student.student_id })
      .eq('line_user_id', userId);
    
    if (error) throw error;
    
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà: ${student.student_name}\nüÜî ‡∏£‡∏´‡∏±‡∏™: ${studentId}\n\nüîî ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ`
    });
    
    // ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    userFormStates.delete(userId);
    
    // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    setTimeout(() => {
      sendMainMenu(userId);
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Error changing student:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\nüîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
    userFormStates.delete(userId);
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤
async function handleLeaveReasonInput(event, reason) {
  const userId = event.source.userId;
  const formState = userFormStates.get(userId);
  
  if (!formState) {
    userFormStates.delete(userId);
    return;
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
  if (userState.type === 'driver_linking' && userState.step === 'waiting_name') {
    const driverName = reason.trim();
    
    if (driverName.length < 2) {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ'
      });
      return;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    userFormStates.set(userId, {
      ...userState,
      driverName: driverName,
      step: 'waiting_student_id'
    });
    
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${driverName}\n\nüìù ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö\n\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 12345678`
    });
    return;
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
  if (userState.type === 'driver_change_student' && userState.step === 'waiting_student_id') {
    await handleDriverChangeStudentId(event, reason.trim());
    return;
  }
  
  try {
    let studentId, parentId, studentName;
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ studentId ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô
    if (formState.studentId) {
      studentId = formState.studentId;
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
      const { data: student } = await supabase
        .from('students')
        .select('student_name, student_guardians(parent_id)')
        .eq('student_id', studentId)
        .single();
      
      if (!student) {
        await lineClient.replyMessage(event.replyToken, {
          type: 'text',
          text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
        });
        userFormStates.delete(userId);
        return;
      }
      
      studentName = student.student_name;
      parentId = student.student_guardians?.parent_id;
    } else {
      // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Å‡πà‡∏≤ - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å parent_line_links
      const { data: parentLink } = await supabase
        .from('parent_line_links')
        .select('parent_id, students(student_name, student_id)')
        .eq('line_user_id', userId)
        .single();
      
      if (!parentLink) {
        await lineClient.replyMessage(event.replyToken, {
          type: 'text',
          text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô'
        });
        userFormStates.delete(userId);
        return;
      }
      
      studentId = parentLink.students.student_id;
      studentName = parentLink.students.student_name;
      parentId = parentLink.parent_id;
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤
    const leaveData = {
      student_id: studentId,
      absence_type: formState.type,
      reason: reason,
      parent_id: parentId
    };
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (formState.leaveDate) {
      leaveData.start_date = formState.leaveDate;
      leaveData.end_date = formState.leaveDate;
    }
    
    const result = await saveLeaveRequest(leaveData);
    
    if (result.success) {
      const typeText = {
        'sick': '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢',
        'personal': '‡∏•‡∏≤‡∏Å‡∏¥‡∏à',
        'emergency': '‡∏•‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
        'absent': '‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      };
      
      const displayDate = formState.leaveDate || new Date().toLocaleDateString('th-TH');
      
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£${typeText[formState.type]}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\nüë§ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${studentName}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${displayDate}\nüìù ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${typeText[formState.type]}\nüí¨ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}\n\n‚ú® ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ`
      });
    } else {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error saving leave request:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
  
  // ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
  userFormStates.delete(userId);
}

export {
  handleTextMessage,
  handlePostback,
  handleFollow,
  handleMainAction,
  handleHistoryRequest,
  handleLeaveRequest,
  handleLocationRequest,
  handleContactRequest,
  handleAccountLinking,
  handleStudentIdInput,
  handleDriverCommand,
  handleDriverStudentIdInput,
  handleDriverStudentInfo,
  handleChangeStudent,
  handleDriverChangeStudentId,
  handleTravelHistory,
  handleBusLocation,
  handleAbsenceCommand,
  handleAbsenceRequest,
  processAbsenceData,
  handleLeaveFormPostback,
  handleLeaveReasonInput,
  userFormStates
};