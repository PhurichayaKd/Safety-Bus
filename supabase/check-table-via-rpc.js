require('dotenv').config({ path: '../safety-bus-bot/vercel-deploy/.env.local' });

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTableStructure() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á pickup_dropoff...\n');

  try {
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    console.log('üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á pickup_dropoff:');
    const { data: sampleData, error: sampleError } = await supabase
      .from('pickup_dropoff')
      .select('*')
      .limit(1);

    if (sampleError) {
      console.log('‚ö†Ô∏è Error getting sample data:', sampleError.message);
    } else if (sampleData && sampleData.length > 0) {
      console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:');
      const record = sampleData[0];
      console.log('\nüìã Columns ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á:');
      Object.keys(record).forEach((key, index) => {
        const value = record[key];
        const type = typeof value;
        console.log(`${index + 1}. ${key}: ${value} (${type})`);
      });
    } else {
      console.log('üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á - ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    }

    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ SQL query ‡∏ú‡πà‡∏≤‡∏ô RPC
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô SQL query:');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á function ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    const checkStructureSQL = `
      SELECT 
        column_name, 
        data_type, 
        is_nullable, 
        column_default,
        generation_expression
      FROM information_schema.columns 
      WHERE table_name = 'pickup_dropoff' 
        AND table_schema = 'public'
      ORDER BY ordinal_position;
    `;

    console.log('üìù SQL Query:', checkStructureSQL);

    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ raw SQL
    const { data: structureData, error: structureError } = await supabase
      .rpc('exec_sql', { sql_query: checkStructureSQL });

    if (structureError) {
      console.log('‚ö†Ô∏è Error with RPC:', structureError.message);
      
      // ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô - ‡πÉ‡∏ä‡πâ INSERT ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö INSERT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:');
      const testInsert = await supabase
        .from('pickup_dropoff')
        .insert({
          student_id: 999999,
          driver_id: 1,
          event_time: new Date().toISOString(),
          event_type: 'test',
          location_type: 'test',
          pickup_source: 'test'
        });

      if (testInsert.error) {
        console.log('‚ùå Test INSERT Error:', testInsert.error.message);
        
        if (testInsert.error.message.includes('event_local_date')) {
          console.log('\nüí° ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏∑‡∏≠ column event_local_date!');
          console.log('   - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô GENERATED column ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ constraint ‡∏û‡∏¥‡πÄ‡∏®‡∏©');
          console.log('   - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ event_local_date');
        }
      } else {
        console.log('‚úÖ Test INSERT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        await supabase
          .from('pickup_dropoff')
          .delete()
          .eq('student_id', 999999);
      }
      
    } else {
      console.log('‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á:', structureData);
    }

  } catch (error) {
    console.error('‚ùå Unexpected error:', error.message);
  }
}

checkTableStructure();