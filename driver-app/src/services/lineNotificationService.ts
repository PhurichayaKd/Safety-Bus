import { supabase } from './supabaseClient';
import { EmergencyLog } from './emergencyService';

const API_BASE_URL = 'https://safety-bus-bot-vercel-deploy.vercel.app/api';

interface LineUser {
  line_user_id: string;
  user_name?: string;
  user_type?: string;
}

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ LINE User ID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
export const getAllLineUsers = async (): Promise<LineUser[]> => {
  try {
    const { data, error } = await supabase
      .from('line_users')
      .select('line_user_id, user_name, user_type')
      .eq('is_active', true);

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('Error fetching LINE users:', error);
    return [];
  }
};

// ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const sendEmergencyLineNotification = async (
  emergency: EmergencyLog,
  responseType: 'EMERGENCY' | 'CONFIRMED_NORMAL',
  driverName?: string
): Promise<{ success: boolean; error?: any }> => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ LINE users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const lineUsers = await getAllLineUsers();
    
    if (lineUsers.length === 0) {
      console.warn('No LINE users found in system');
      return { success: false, error: 'No LINE users found' };
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    const message = createEmergencyMessage(emergency, responseType, driverName);
    
    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å LINE user
    const notificationPromises = lineUsers.map(user => 
      sendLineMessage(user.line_user_id, message)
    );

    const results = await Promise.allSettled(notificationPromises);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const successCount = results.filter(result => result.status === 'fulfilled').length;
    const failureCount = results.filter(result => result.status === 'rejected').length;

    console.log(`LINE notifications sent: ${successCount} success, ${failureCount} failed`);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    await logNotificationResults(emergency.event_id, responseType, successCount, failureCount);

    return { 
      success: successCount > 0,
      error: failureCount > 0 ? `${failureCount} notifications failed` : null
    };

  } catch (error) {
    console.error('Error sending emergency LINE notifications:', error);
    return { success: false, error };
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
const createEmergencyMessage = (
  emergency: EmergencyLog,
  responseType: 'EMERGENCY' | 'CONFIRMED_NORMAL',
  driverName?: string
): string => {
  const eventTypeText = getEventTypeText(emergency.event_type);
  const sourceText = getSourceText(emergency);
  const timeText = formatDateTime(emergency.event_time);
  const driver = driverName || '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö';

  if (responseType === 'EMERGENCY') {
    return `üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô üö®

‚ö†Ô∏è ${driver}‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô

üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${eventTypeText}
‚Ä¢ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: ${sourceText}
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${timeText}
${emergency.details ? `‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${emergency.details}` : ''}

üöå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠

‚è∞ ${new Date().toLocaleString('th-TH')}`;

  } else if (responseType === 'CONFIRMED_NORMAL') {
    return `‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå

üîÑ ${driver}‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥

üìã ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß:
‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${eventTypeText}
‚Ä¢ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: ${sourceText}
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏: ${timeText}

üöå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ

‚è∞ ${new Date().toLocaleString('th-TH')}`;
  }

  return '';
};

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ‡πÑ‡∏õ‡∏¢‡∏±‡∏á user ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const sendLineMessage = async (lineUserId: string, message: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/send-line-message`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: lineUserId,
        message: message,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to send LINE message: ${response.status} - ${errorText}`);
    }

    console.log(`LINE message sent successfully to user: ${lineUserId}`);
  } catch (error) {
    console.error(`Error sending LINE message to ${lineUserId}:`, error);
    throw error;
  }
};

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
const logNotificationResults = async (
  eventId: number,
  responseType: string,
  successCount: number,
  failureCount: number
): Promise<void> => {
  try {
    await supabase
      .from('notification_logs')
      .insert({
        notification_type: 'EMERGENCY_LINE',
        recipient_id: 'ALL_USERS',
        message: `Emergency ${responseType}: ${successCount} sent, ${failureCount} failed`,
        status: failureCount === 0 ? 'SUCCESS' : 'PARTIAL_FAILURE',
        error_details: failureCount > 0 ? { failureCount, successCount } : null,
      });
  } catch (error) {
    console.error('Error logging notification results:', error);
  }
};

// Helper functions (‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å emergencyService ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
const getEventTypeText = (eventType: string): string => {
  switch (eventType) {
    case 'PANIC_BUTTON': return '‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    case 'SENSOR_ALERT': return '‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô';
    case 'DRIVER_INCAPACITATED': return '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ';
    case 'SMOKE_DETECTED': return '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏±‡∏ô';
    case 'HIGH_TEMPERATURE': return '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á';
    case 'MOVEMENT_DETECTED': return '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß';
    default: return eventType;
  }
};

const getSourceText = (emergency: EmergencyLog): string => {
  if (emergency.triggered_by === 'student') {
    return '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°';
  } else if (emergency.triggered_by === 'sensor') {
    if (emergency.details) {
      try {
        const details = typeof emergency.details === 'string' 
          ? JSON.parse(emergency.details) 
          : emergency.details;
        return details.sensor_name || details.location || '‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå';
      } catch {
        return typeof emergency.details === 'string' ? emergency.details : '‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå';
      }
    }
    return '‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå';
  } else if (emergency.triggered_by === 'driver') {
    return '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö';
  }
  return emergency.triggered_by;
};

const formatDateTime = (dateString: string): string => {
  try {
    const date = new Date(dateString);
    return date.toLocaleString('th-TH', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });
  } catch {
    return dateString;
  }
};

export default {
  sendEmergencyLineNotification,
  getAllLineUsers,
};