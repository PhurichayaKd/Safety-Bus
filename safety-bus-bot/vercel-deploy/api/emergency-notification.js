// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
import { Client } from '@line/bot-sdk';
import { createClient } from '@supabase/supabase-js';

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE client
let lineClient = null;
try {
  if (config.channelAccessToken && config.channelSecret) {
    lineClient = new Client(config);
    console.log('‚úÖ LINE client initialized successfully');
  } else {
    console.warn('‚ö†Ô∏è LINE credentials not found');
  }
} catch (error) {
  console.error('‚ùå Failed to initialize LINE client:', error.message);
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

let supabase = null;
try {
  if (supabaseUrl && supabaseKey) {
    supabase = createClient(supabaseUrl, supabaseKey);
    console.log('‚úÖ Supabase client initialized successfully');
  } else {
    console.warn('‚ö†Ô∏è Supabase credentials not found');
  }
} catch (error) {
  console.error('‚ùå Failed to initialize Supabase client:', error.message);
}

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
const EMERGENCY_MESSAGES = {
  DRIVER_PANIC: {
    emoji: 'üö®',
    title: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‚ÄºÔ∏è',
    message: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏',
    priority: 'CRITICAL',
    sendToLine: true
  },
  MOVEMENT_DETECTED: {
    emoji: 'üö®',
    title: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏î‡∏£‡∏ñ üó£‚ÄºÔ∏è',
    message: 'üîª‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î : ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß',
    priority: 'HIGH',
    sendToLine: true
  },
  HIGH_TEMPERATURE: {
    emoji: 'üö®',
    title: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á üå°‚ÄºÔ∏è',
    message: 'üîª‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î : ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á {temperature}¬∞C',
    priority: 'HIGH',
    sendToLine: true
  },
  SMOKE_AND_HEAT: {
    emoji: 'üö®',
    title: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏±‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å üßØ‚ÄºÔ∏è',
    message: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î : ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á {temperature}¬∞C ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏±‡∏ô {smokeLevel}%',
    priority: 'CRITICAL',
    sendToLine: true
  },
  STUDENT_SWITCH: {
    emoji: 'üë∂',
    title: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå',
    message: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏ö‡∏ô‡∏£‡∏ñ (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE)',
    priority: 'LOW',
    sendToLine: false
  }
};

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
const DRIVER_RESPONSE_MESSAGES = {
  CHECKED: {
    emoji: '‚úÖ',
    title: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
    message: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥',
    sendToLine: true
  },
  EMERGENCY: {
    emoji: 'üö®',
    title: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‚ÄºÔ∏è',
    message: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏',
    sendToLine: true
  },
  CONFIRMED_NORMAL: {
    emoji: '‚úÖÔ∏è',
    title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‚úÖÔ∏è',
    message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥\n               ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    sendToLine: true
  }
};

// CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

export default async function handler(req, res) {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS headers
  Object.entries(corsHeaders).forEach(([key, value]) => {
    res.setHeader(key, value);
  });

  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { 
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö emergency notification
      eventType, 
      eventId, 
      description, 
      location,
      sensorType,
      temperature,
      smokeLevel,
      humidity,
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö driver response
      responseType,
      emergencyLogId,
      driverId,
      busId,
      isStudentEmergency = false,
      // ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      notes,
      timestamp
    } = req.body;

    console.log('üì• Emergency notification request:', {
      eventType,
      responseType,
      eventId,
      emergencyLogId,
      driverId,
      busId,
      isStudentEmergency
    });

    // Validate required fields
    if (!eventType && !responseType) {
      return res.status(400).json({ 
        error: 'Either eventType or responseType is required' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE ‡πÅ‡∏•‡∏∞ Supabase
    if (!lineClient) {
      console.error('LINE client not initialized');
      return res.status(500).json({ 
        error: 'LINE messaging service not available' 
      });
    }

    if (!supabase) {
      console.error('Supabase client not initialized');
      return res.status(500).json({ 
        error: 'Database service not available' 
      });
    }

    let messageInfo;
    let shouldSendToLine = true;
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    if (eventType) {
      // ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
      if (sensorType) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î eventType ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        if (sensorType === 'motion_detected_after_trip' || sensorType === 'motion_detected_at_school') {
          messageInfo = EMERGENCY_MESSAGES['MOVEMENT_DETECTED'];
        } else if (sensorType === 'smoke_heat' && temperature && smokeLevel) {
          messageInfo = EMERGENCY_MESSAGES['SMOKE_AND_HEAT'];
        } else if (sensorType === 'temp_only' && temperature) {
          messageInfo = EMERGENCY_MESSAGES['HIGH_TEMPERATURE'];
        } else {
          messageInfo = EMERGENCY_MESSAGES[eventType];
        }
      } else {
        messageInfo = EMERGENCY_MESSAGES[eventType];
      }
      
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö STUDENT_SWITCH
      if (eventType === 'STUDENT_SWITCH') {
        shouldSendToLine = false;
      }
    } else if (responseType) {
      // ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
      messageInfo = DRIVER_RESPONSE_MESSAGES[responseType];
    }

    if (!messageInfo) {
      return res.status(400).json({ 
        error: 'Invalid event type or response type' 
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï shouldSendToLine ‡∏ï‡∏≤‡∏° messageInfo
    if (messageInfo.sendToLine !== undefined) {
      shouldSendToLine = messageInfo.sendToLine;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const currentTime = new Date(timestamp || Date.now()).toLocaleString('th-TH', {
      timeZone: 'Asia/Bangkok',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    let messageText = `${messageInfo.emoji} ${messageInfo.title}\n\n${messageInfo.message}`;
    
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (temperature) {
      messageText = messageText.replace('{temperature}', temperature);
    }
    if (smokeLevel) {
      messageText = messageText.replace('{smokeLevel}', smokeLevel);
    }
    
    if (description) {
      messageText += `\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${description}`;
    }
    
    if (location) {
      messageText += `\nüìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${location}`;
    }
    
    if (notes) {
      messageText += `\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${notes}`;
    }
    
    messageText += `\n\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${currentTime}`;
    
    if (eventId) {
      messageText += `\nüÜî ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${eventId}`;
    } else if (emergencyLogId) {
      messageText += `\nüÜî ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${emergencyLogId}`;
    }

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const cleanMessageText = messageText
      .replace(/[^\u0000-\u007F\u0E00-\u0E7F]/g, '')
      .replace(/\s+/g, ' ')
      .trim();

    const lineMessage = {
      type: 'text',
      text: cleanMessageText
    };

    let notificationResults = [];

    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ shouldSendToLine ‡πÄ‡∏õ‡πá‡∏ô true
    if (shouldSendToLine) {
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å student_line_links
        const { data: studentLinks, error: studentError } = await supabase
          .from('student_line_links')
          .select('line_user_id, student_id, line_display_id')
          .not('line_user_id', 'is', null)
          .neq('line_user_id', '')
          .eq('active', true);

        if (studentError) {
          console.error('Error fetching student links:', studentError);
        } else if (studentLinks && studentLinks.length > 0) {
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
          for (const student of studentLinks) {
            try {
              await lineClient.pushMessage(student.line_user_id, lineMessage);
              notificationResults.push({
                lineUserId: student.line_user_id,
                studentId: student.student_id,
                lineDisplayId: student.line_display_id,
                type: 'student',
                status: 'success'
              });
              console.log(`‚úÖ Emergency notification sent to student ${student.student_id} (${student.line_user_id})`);
            } catch (error) {
              console.error(`‚ùå Failed to send to student ${student.student_id}:`, error.message);
              notificationResults.push({
                lineUserId: student.line_user_id,
                studentId: student.student_id,
                lineDisplayId: student.line_display_id,
                type: 'student',
                status: 'failed',
                error: error.message
              });
            }
          }
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å parent_line_links
        const { data: parentLinks, error: parentError } = await supabase
          .from('parent_line_links')
          .select('line_user_id, parent_id, line_display_id')
          .not('line_user_id', 'is', null)
          .neq('line_user_id', '')
          .eq('active', true);

        if (parentError) {
          console.error('Error fetching parent links:', parentError);
        } else if (parentLinks && parentLinks.length > 0) {
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
          for (const parent of parentLinks) {
            try {
              await lineClient.pushMessage(parent.line_user_id, lineMessage);
              notificationResults.push({
                lineUserId: parent.line_user_id,
                parentId: parent.parent_id,
                lineDisplayId: parent.line_display_id,
                type: 'parent',
                status: 'success'
              });
              console.log(`‚úÖ Emergency notification sent to parent ${parent.parent_id} (${parent.line_user_id})`);
            } catch (error) {
              console.error(`‚ùå Failed to send to parent ${parent.parent_id}:`, error.message);
              notificationResults.push({
                lineUserId: parent.line_user_id,
                parentId: parent.parent_id,
                lineDisplayId: parent.line_display_id,
                type: 'parent',
                status: 'failed',
                error: error.message
              });
            }
          }
        }
      } catch (error) {
        console.error('Database query error:', error);
      }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ driver response)
    if (responseType && emergencyLogId) {
      try {
        const { data: responseData, error: responseError } = await supabase
          .from('emergency_responses')
          .insert({
            event_id: emergencyLogId,
            driver_id: driverId,
            response_type: responseType,
            notes: notes,
            created_at: new Date(timestamp || Date.now()).toISOString()
          })
          .select();

        if (responseError) {
          console.error('Error saving emergency response:', responseError);
        } else {
          console.log('‚úÖ Emergency response saved to database:', responseData);
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô emergency_logs
        const { error: updateError } = await supabase
          .from('emergency_logs')
          .update({
            driver_response_type: responseType,
            driver_response_time: new Date(timestamp || Date.now()).toISOString(),
            driver_response_notes: notes,
            status: responseType === 'EMERGENCY' ? 'emergency_confirmed' : 
                   responseType === 'CONFIRMED_NORMAL' ? 'resolved' : 'checked'
          })
          .eq('event_id', emergencyLogId);

        if (updateError) {
          console.error('Error updating emergency log:', updateError);
        } else {
          console.log('‚úÖ Emergency log updated successfully');
        }
      } catch (error) {
        console.error('Database operation error:', error);
      }
    }

    // Log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    console.log(`üì§ Emergency notification/response processed:`, {
      eventType,
      responseType,
      eventId,
      emergencyLogId,
      driverId,
      busId,
      isStudentEmergency,
      shouldSendToLine,
      recipientCount: notificationResults.length,
      timestamp: currentTime
    });

    return res.status(200).json({
      success: true,
      message: shouldSendToLine ? 
        (eventType ? 'Emergency notification sent successfully' : 'Driver response sent successfully') : 
        (eventType ? 'Event logged (no LINE notification sent)' : 'Driver response logged (no LINE notification sent)'),
      eventType,
      responseType,
      eventId,
      emergencyLogId,
      driverId,
      busId,
      isStudentEmergency,
      shouldSendToLine,
      notificationResults,
      timestamp: currentTime
    });

  } catch (error) {
    console.error('‚ùå Emergency notification/response error:', error);
    return res.status(500).json({
      success: false,
      error: 'Failed to process emergency notification/response',
      details: error.message
    });
  }
}