import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTables() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á parent_line_links
    console.log('üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á parent_line_links:');
    const { data: parentData, error: parentError, count: parentCount } = await supabase
      .from('parent_line_links')
      .select('*', { count: 'exact' })
      .limit(5);
    
    if (parentError) {
      console.log(`   ‚ùå Error: ${parentError.message}`);
    } else {
      console.log(`   ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${parentCount} ‡πÅ‡∏ñ‡∏ß`);
      if (parentData && parentData.length > 0) {
        console.log('   üìÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
        console.log(JSON.stringify(parentData[0], null, 2));
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_line_links
    console.log('\nüìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_line_links:');
    const { data: studentData, error: studentError, count: studentCount } = await supabase
      .from('student_line_links')
      .select('*', { count: 'exact' })
      .limit(5);
    
    if (studentError) {
      console.log(`   ‚ùå Error: ${studentError.message}`);
    } else {
      console.log(`   ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${studentCount} ‡πÅ‡∏ñ‡∏ß`);
      if (studentData && studentData.length > 0) {
        console.log('   üìÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
        console.log(JSON.stringify(studentData[0], null, 2));
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á parents
    console.log('\nüìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á parents:');
    const { data: parentsData, error: parentsError, count: parentsCount } = await supabase
      .from('parents')
      .select('*', { count: 'exact' })
      .limit(3);
    
    if (parentsError) {
      console.log(`   ‚ùå Error: ${parentsError.message}`);
    } else {
      console.log(`   ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${parentsCount} ‡πÅ‡∏ñ‡∏ß`);
      if (parentsData && parentsData.length > 0) {
        console.log('   üìÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
        console.log(JSON.stringify(parentsData[0], null, 2));
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á students
    console.log('\nüìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á students:');
    const { data: studentsData, error: studentsError, count: studentsCount } = await supabase
      .from('students')
      .select('*', { count: 'exact' })
      .limit(3);
    
    if (studentsError) {
      console.log(`   ‚ùå Error: ${studentsError.message}`);
    } else {
      console.log(`   ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${studentsCount} ‡πÅ‡∏ñ‡∏ß`);
      if (studentsData && studentsData.length > 0) {
        console.log('   üìÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
        console.log(JSON.stringify(studentsData[0], null, 2));
      }
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

checkTables();