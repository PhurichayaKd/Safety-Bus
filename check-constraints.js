import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables
dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

console.log('üîç Checking student_boarding_status table constraints...');
console.log('='.repeat(60));

async function checkConstraints() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö constraint ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_boarding_status
    const { data, error } = await supabase.rpc('get_table_constraints', {
      table_name: 'student_boarding_status'
    });

    if (error) {
      console.log('‚ùå Error getting constraints:', error.message);
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö constraint
      console.log('\nüîÑ Trying alternative method...');
      
      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      const { data: sampleData, error: sampleError } = await supabase
        .from('student_boarding_status')
        .select('*')
        .limit(1);

      if (sampleError) {
        console.log('‚ùå Error getting sample data:', sampleError.message);
      } else {
        console.log('‚úÖ Table exists, sample structure:');
        if (sampleData && sampleData.length > 0) {
          console.log('üìä Available columns:', Object.keys(sampleData[0]));
        } else {
          console.log('üìÑ No data found in table');
        }
      }

      // ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ INSERT ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞ duplicate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π error message
      console.log('\nüß™ Testing duplicate insert to see constraint error...');
      
      const testData = {
        student_id: 'TEST_STUDENT',
        driver_id: 1,
        trip_date: new Date().toISOString().split('T')[0],
        trip_phase: 'go',
        boarding_status: 'waiting'
      };

      // Insert ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      const { error: firstInsertError } = await supabase
        .from('student_boarding_status')
        .insert(testData);

      if (firstInsertError) {
        console.log('‚ùå First insert error:', firstInsertError.message);
      } else {
        console.log('‚úÖ First insert successful');
        
        // Insert ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞ error)
        const { error: secondInsertError } = await supabase
          .from('student_boarding_status')
          .insert(testData);

        if (secondInsertError) {
          console.log('üéØ Duplicate insert error (this shows the constraint):');
          console.log('   Error message:', secondInsertError.message);
          console.log('   Error code:', secondInsertError.code);
          console.log('   Error details:', secondInsertError.details);
        } else {
          console.log('‚ö†Ô∏è  Unexpected: Second insert also successful (no unique constraint?)');
        }

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        const { error: deleteError } = await supabase
          .from('student_boarding_status')
          .delete()
          .eq('student_id', 'TEST_STUDENT');

        if (deleteError) {
          console.log('‚ö†Ô∏è  Warning: Could not delete test data:', deleteError.message);
        } else {
          console.log('üßπ Test data cleaned up');
        }
      }

    } else {
      console.log('‚úÖ Constraints found:', data);
    }

  } catch (error) {
    console.log('‚ùå Unexpected error:', error.message);
  }
}

checkConstraints();