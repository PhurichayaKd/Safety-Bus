import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// ‡πÇ‡∏´‡∏•‡∏î environment variables
dotenv.config({ path: '../safety-bus-bot/vercel-deploy/.env.local' });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function testStudentLineNotifications() {
  console.log('üöå Testing Student LINE Notifications System...\n');

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variables
    console.log('üîß Checking environment variables...');
    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
      console.error('‚ùå Missing Supabase environment variables');
      return;
    }
    console.log('‚úÖ Environment variables loaded\n');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
    console.log('üë®‚Äçüíº Checking driver data...');
    const { data: driverData, error: driverError } = await supabase
      .from('driver_bus')
      .select('*')
      .eq('driver_id', 1)
      .single();

    if (driverError || !driverData) {
      console.error('‚ùå Driver ID = 1 not found:', driverError);
      return;
    }

    console.log(`‚úÖ Driver: ${driverData.driver_name} (${driverData.license_plate})`);
    console.log(`   Status: ${driverData.current_status}`);
    console.log(`   Trip Phase: ${driverData.trip_phase}\n`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å LINE ‡πÅ‡∏•‡πâ‡∏ß
    console.log('üì± Checking linked students...');
    const { data: linkedStudents, error: studentError } = await supabase
      .from('student_line_links')
      .select(`
        line_user_id,
        line_display_id,
        students!inner(student_id, student_name, grade, is_active)
      `)
      .eq('active', true)
      .eq('students.is_active', true)
      .not('line_user_id', 'is', null)
      .neq('line_user_id', '');

    if (studentError) {
      console.error('‚ùå Error fetching linked students:', studentError);
      return;
    }

    console.log(`üìä Found ${linkedStudents?.length || 0} linked students:`);
    if (linkedStudents && linkedStudents.length > 0) {
      linkedStudents.forEach((student, index) => {
        console.log(`   ${index + 1}. ${student.students.student_name} (${student.students.grade})`);
        console.log(`      Student ID: ${student.students.student_id}`);
        console.log(`      LINE ID: ${student.line_user_id}`);
      });
    } else {
      console.log('‚ö†Ô∏è  No linked students found. Cannot test notifications.');
      return;
    }
    console.log('');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å LINE ‡πÅ‡∏•‡πâ‡∏ß
    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Checking linked parents...');
    const { data: linkedParents, error: parentError } = await supabase
      .from('parent_line_links')
      .select(`
        link_id,
        parent_id,
        line_user_id,
        line_display_id,
        active
      `)
      .eq('active', true)
      .not('line_user_id', 'is', null)
      .neq('line_user_id', '');

    if (parentError) {
      console.error('‚ùå Error fetching linked parents:', parentError);
    } else {
      console.log(`üìä Found ${linkedParents?.length || 0} linked parents:`);
      if (linkedParents && linkedParents.length > 0) {
        linkedParents.forEach((parent, index) => {
          console.log(`   ${index + 1}. Parent ID: ${parent.parent_id}`);
          console.log(`      LINE ID: ${parent.line_user_id}`);
          console.log(`      Display ID: ${parent.line_display_id || 'N/A'}`);
        });
      }
    }
    console.log('');

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testStudent = linkedStudents[0];
    const studentId = testStudent.students.student_id;
    const studentName = testStudent.students.student_name;

    console.log(`üéØ Testing with student: ${studentName} (ID: ${studentId})\n`);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const testScenarios = [
      {
        name: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ (‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πâ‡∏≤)',
        data: {
          student_id: studentId,
          status: 'onboard',
          driver_id: 1,
          location: '‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ',
          phase: 'pickup'
        }
      },
      {
        name: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
        data: {
          student_id: studentId,
          status: 'offboard',
          driver_id: 1,
          location: '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
          phase: 'pickup'
        }
      },
      {
        name: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ (‡∏£‡∏≠‡∏ö‡∏ö‡πà‡∏≤‡∏¢)',
        data: {
          student_id: studentId,
          status: 'onboard',
          driver_id: 1,
          location: '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡∏£‡∏≠‡∏ö‡∏ö‡πà‡∏≤‡∏¢',
          phase: 'dropoff'
        }
      },
      {
        name: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô',
        data: {
          student_id: studentId,
          status: 'offboard',
          driver_id: 1,
          location: '‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô',
          phase: 'dropoff'
        }
      }
    ];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log('üåê Checking server status...');
    try {
      const healthCheck = await fetch('http://localhost:3000/api/health');
      if (healthCheck.ok) {
        console.log('‚úÖ Server is running on http://localhost:3000\n');
      } else {
        console.log('‚ö†Ô∏è  Server responded but may have issues\n');
      }
    } catch (error) {
      console.error('‚ùå Server is not running on http://localhost:3000');
      console.log('üí° Please start the server with: node server-with-webhook.js\n');
      return;
    }

    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    for (let i = 0; i < testScenarios.length; i++) {
      const scenario = testScenarios[i];
      console.log(`üß™ Test ${i + 1}/${testScenarios.length}: ${scenario.name}`);
      console.log('üìã Request Data:');
      console.log(JSON.stringify(scenario.data, null, 2));
      console.log('');

      try {
        const response = await fetch('http://localhost:3000/api/student-status-notification', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(scenario.data)
        });

        console.log(`üì° Response Status: ${response.status}`);
        
        const responseData = await response.json();
        console.log('üìã Response Data:');
        console.log(JSON.stringify(responseData, null, 2));

        if (response.ok && responseData.success) {
          console.log(`\n‚úÖ ${scenario.name} - SUCCESS!`);
          
          if (responseData.summary) {
            console.log('\nüìä Notification Summary:');
            console.log(`   üì± Student notified: ${responseData.summary.student_notified ? 'Yes' : 'No'}`);
            console.log(`   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Parents notified: ${responseData.summary.parents_notified || 0}`);
            console.log(`   ‚úÖ Total sent: ${responseData.summary.total_sent || 0}`);
            console.log(`   ‚ùå Total failed: ${responseData.summary.total_failed || 0}`);
          }

          if (responseData.notification_results && responseData.notification_results.length > 0) {
            console.log('\nüìã Detailed Results:');
            responseData.notification_results.forEach((result, index) => {
              const status = result.status === 'success' ? '‚úÖ' : '‚ùå';
              const type = result.type === 'student' ? 'üë®‚Äçüéì' : 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶';
              console.log(`   ${index + 1}. ${status} ${type} ${result.type.toUpperCase()}: ${result.status}`);
              
              if (result.studentName) {
                console.log(`      Name: ${result.studentName}`);
              }
              if (result.parentName) {
                console.log(`      Parent: ${result.parentName}`);
              }
              if (result.lineUserId) {
                console.log(`      LINE ID: ${result.lineUserId}`);
              }
              if (result.error) {
                console.log(`      Error: ${result.error}`);
              }
            });
          }
        } else {
          console.log(`\n‚ùå ${scenario.name} - FAILED!`);
          console.log('Error:', responseData.error || 'Unknown error');
        }

      } catch (fetchError) {
        console.error(`\n‚ùå ${scenario.name} - Request failed:`, fetchError.message);
      }

      console.log('\n' + '='.repeat(80) + '\n');

      // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      if (i < testScenarios.length - 1) {
        console.log('‚è≥ Waiting 2 seconds before next test...\n');
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    console.log('üéØ Student LINE Notification Testing Complete!');
    console.log(`üìä Total scenarios tested: ${testScenarios.length}`);
    console.log(`üë®‚Äçüéì Test student: ${studentName} (${studentId})`);
    console.log('üí° Check your LINE app to see if notifications were received!');

  } catch (error) {
    console.error('\n‚ùå Test failed with error:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testStudentLineNotifications().catch(console.error);