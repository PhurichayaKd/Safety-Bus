import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å safety-bus-bot/vercel-deploy/.env.local
dotenv.config({ path: '../safety-bus-bot/vercel-deploy/.env.local' });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

console.log('üîç Checking pickup_dropoff table constraints...');
console.log('='.repeat(60));

async function checkPickupDropoffConstraints() {
  try {
    // ‡∏î‡∏∂‡∏á student_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('üìã Getting real student_id from database...');
    const { data: students, error: studentsError } = await supabase
      .from('students')
      .select('student_id')
      .limit(1);

    if (studentsError || !students || students.length === 0) {
      console.log('‚ùå Cannot get student data:', studentsError?.message || 'No students found');
      return;
    }

    const realStudentId = students[0].student_id;
    console.log('‚úÖ Using real student_id:', realStudentId);

    console.log('üìä Testing duplicate insert to identify constraint...');
    
    const testData = {
      student_id: realStudentId,
      driver_id: 1,
      event_type: 'dropoff',
      event_time: new Date().toISOString(),
      location_type: 'go'
    };

    console.log('üß™ Test data:', testData);

    // Insert ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    const { data: firstData, error: firstInsertError } = await supabase
      .from('pickup_dropoff')
      .insert(testData)
      .select();

    if (firstInsertError) {
      console.log('‚ùå First insert error:', firstInsertError.message);
      console.log('   Error code:', firstInsertError.code);
      console.log('   Error details:', firstInsertError.details);
      return;
    } else {
      console.log('‚úÖ First insert successful');
    }

    // Insert ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞ error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ duplicate)
    const { data: secondData, error: secondInsertError } = await supabase
      .from('pickup_dropoff')
      .insert(testData)
      .select();

    if (secondInsertError) {
      console.log('üéØ Duplicate insert error (this shows the constraint):');
      console.log('   Error message:', secondInsertError.message);
      console.log('   Error code:', secondInsertError.code);
      console.log('   Error details:', secondInsertError.details);
      
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå error message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ constraint name
      if (secondInsertError.message.includes('unique')) {
        console.log('‚úÖ Found unique constraint in error message');
      } else if (secondInsertError.message.includes('duplicate key')) {
        console.log('üîç Constraint involves duplicate key, analyzing...');
        console.log('   Full error:', secondInsertError);
      }
    } else {
      console.log('‚ö†Ô∏è  Unexpected: Second insert also successful (no unique constraint?)');
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const { error: deleteError } = await supabase
      .from('pickup_dropoff')
      .delete()
      .eq('student_id', testData.student_id);

    if (deleteError) {
      console.log('‚ö†Ô∏è  Warning: Could not delete test data:', deleteError.message);
    } else {
      console.log('üßπ Test data cleaned up');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    console.log('\nüìã Checking table structure...');
    const { data: sampleData, error: sampleError } = await supabase
      .from('pickup_dropoff')
      .select('*')
      .limit(1);

    if (sampleError) {
      console.log('‚ùå Error getting sample data:', sampleError.message);
    } else {
      console.log('‚úÖ Table structure (columns):');
      if (sampleData && sampleData.length > 0) {
        Object.keys(sampleData[0]).forEach(col => {
          console.log(`   - ${col}: ${typeof sampleData[0][col]}`);
        });
      } else {
        console.log('   No data in table to show structure');
      }
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö upsert ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ
    console.log('\nüîÑ Testing upsert operation...');
    const upsertData = {
      student_id: realStudentId,
      driver_id: 1,
      event_type: 'pickup', // ‡πÉ‡∏ä‡πâ event_type ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
      event_time: new Date().toISOString(),
      location_type: 'go'
    };

    const { data: upsertResult, error: upsertError } = await supabase
      .from('pickup_dropoff')
      .upsert(upsertData, {
        onConflict: 'student_id,event_type,location_type,event_time'
      });

    if (upsertError) {
      console.log('‚ùå Upsert error:', upsertError.message);
      console.log('   Error code:', upsertError.code);
      console.log('   Error details:', upsertError.details);
    } else {
      console.log('‚úÖ Upsert successful');
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö upsert
    await supabase
      .from('pickup_dropoff')
      .delete()
      .eq('student_id', upsertData.student_id);

  } catch (error) {
    console.log('‚ùå Unexpected error:', error.message);
    console.log('   Stack:', error.stack);
  }
}

checkPickupDropoffConstraints();