// lib/bus-tracking.js
import { supabase } from './db.js';
import { lineClient } from './line.js';
import moment from 'moment';
import { checkLinkStatus } from './account-linking.js';

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timezone ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
moment.locale('th');

/**
 * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™
 * @param {string} busId - ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏ñ‡∏ö‡∏±‡∏™
 * @param {Object} locationData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
 */
async function updateBusLocation(busId, locationData) {
  const {
    latitude,
    longitude,
    speed = 0,
    heading = 0,
    accuracy = null,
    timestamp = new Date().toISOString()
  } = locationData;

  try {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á buses
    const { error: busError } = await supabase
      .from('buses')
      .update({
        current_latitude: latitude,
        current_longitude: longitude,
        last_location_update: timestamp,
        speed: speed,
        heading: heading
      })
      .eq('id', busId);

    if (busError) {
      console.error('Error updating bus location:', busError);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ'
      };
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á bus_locations
    const { error: locationError } = await supabase
      .from('bus_locations')
      .insert({
        bus_id: busId,
        latitude: latitude,
        longitude: longitude,
        speed: speed,
        heading: heading,
        accuracy: accuracy,
        recorded_at: timestamp
      });

    if (locationError) {
      console.error('Error saving location history:', locationError);
      // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }

    return {
      success: true,
      message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    };

  } catch (error) {
    console.error('Error in updateBusLocation:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™
 * @param {string} busId - ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏ñ‡∏ö‡∏±‡∏™
 * @returns {Promise<Object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
 */
async function getCurrentBusLocation(busId) {
  try {
    const { data: bus, error } = await supabase
      .from('buses')
      .select(`
        id, bus_name, license_plate, driver_name, driver_phone,
        current_latitude, current_longitude, last_location_update,
        speed, heading, status
      `)
      .eq('id', busId)
      .single();

    if (error) {
      console.error('Error fetching bus location:', error);
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ö‡∏±‡∏™'
      };
    }

    if (!bus.current_latitude || !bus.current_longitude) {
      return {
        success: false,
        error: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ'
      };
    }

    return {
      success: true,
      bus: bus,
      location: {
        latitude: bus.current_latitude,
        longitude: bus.current_longitude,
        lastUpdate: bus.last_location_update,
        speed: bus.speed,
        heading: bus.heading
      }
    };

  } catch (error) {
    console.error('Error in getCurrentBusLocation:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };
  }
}

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @param {string} studentId - ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @returns {Promise<Object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 */
async function getStudentBus(studentId) {
  try {
    const { data: student, error } = await supabase
      .from('students')
      .select(`
        id, student_name, bus_id,
        buses(
          id, bus_name, license_plate, driver_name, driver_phone,
          current_latitude, current_longitude, last_location_update,
          speed, heading, status
        )
      `)
      .eq('id', studentId)
      .single();

    if (error) {
      console.error('Error fetching student bus:', error);
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      };
    }

    if (!student.bus_id || !student.buses) {
      return {
        success: false,
        error: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏ñ‡∏ö‡∏±‡∏™'
      };
    }

    return {
      success: true,
      student: {
        id: student.id,
        name: student.student_name
      },
      bus: student.buses
    };

  } catch (error) {
    console.error('Error in getStudentBus:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };
  }
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (Haversine formula)
 * @param {number} lat1 - ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1
 * @param {number} lon1 - ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1
 * @param {number} lat2 - ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2
 * @param {number} lon2 - ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2
 * @returns {number} ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
 */
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Google Maps
 * @param {number} latitude - ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î
 * @param {number} longitude - ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î
 * @param {string} label - ‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
 * @returns {string} ‡∏•‡∏¥‡∏á‡∏Å‡πå Google Maps
 */
function createMapLink(latitude, longitude, label = '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™') {
  return `https://www.google.com/maps?q=${latitude},${longitude}&z=15&t=m&hl=th&gl=th&mapclient=embed&cid=${encodeURIComponent(label)}`;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
 * @param {Object} busData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ö‡∏±‡∏™
 * @param {Object} studentData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @returns {string} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
 */
function formatBusLocationMessage(busData, studentData = null) {
  const lastUpdate = moment(busData.last_location_update);
  const timeAgo = lastUpdate.fromNow();
  const updateTime = lastUpdate.format('HH:mm');
  
  const mapLink = createMapLink(
    busData.current_latitude,
    busData.current_longitude,
    `‡∏£‡∏ñ‡∏ö‡∏±‡∏™ ${busData.license_plate}`
  );

  let message = `üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™\n\n`;
  
  if (studentData) {
    message += `üë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${studentData.name}\n`;
  }
  
  message += `üöê ‡∏£‡∏ñ: ${busData.license_plate}\n`;
  message += `üë®‚Äç‚úàÔ∏è ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${busData.driver_name}\n`;
  message += `üìû ‡πÇ‡∏ó‡∏£: ${busData.driver_phone}\n\n`;
  
  message += `üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n`;
  message += `‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï: ${updateTime} (${timeAgo})\n`;
  
  if (busData.speed !== null && busData.speed > 0) {
    message += `üèÉ‚Äç‚ôÇÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: ${Math.round(busData.speed)} ‡∏Å‡∏°./‡∏ä‡∏°.\n`;
  }
  
  const statusText = {
    'active': 'üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
    'inactive': 'üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å',
    'maintenance': 'üü° ‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á'
  };
  
  message += `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${statusText[busData.status] || '‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}\n\n`;
  message += `üó∫Ô∏è ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: ${mapLink}`;
  
  return message;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
 * @param {Object} busData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ö‡∏±‡∏™
 * @param {Object} studentData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @returns {Object} Flex Message
 */
function createBusLocationFlexMessage(busData, studentData = null) {
  const lastUpdate = moment(busData.last_location_update);
  const timeAgo = lastUpdate.fromNow();
  const updateTime = lastUpdate.format('HH:mm');
  
  const mapLink = createMapLink(
    busData.current_latitude,
    busData.current_longitude,
    `‡∏£‡∏ñ‡∏ö‡∏±‡∏™ ${busData.license_plate}`
  );

  const statusColor = {
    'active': '#00C851',
    'inactive': '#FF4444',
    'maintenance': '#FF8800'
  };
  
  const statusText = {
    'active': 'üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
    'inactive': 'üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å',
    'maintenance': 'üü° ‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á'
  };

  const bodyContents = [];
  
  if (studentData) {
    bodyContents.push({
      type: 'box',
      layout: 'horizontal',
      contents: [
        {
          type: 'text',
          text: 'üë¶üëß',
          size: 'sm',
          flex: 1
        },
        {
          type: 'text',
          text: studentData.name,
          size: 'sm',
          flex: 4,
          weight: 'bold'
        }
      ]
    });
    
    bodyContents.push({
      type: 'separator',
      margin: 'md'
    });
  }
  
  bodyContents.push(
    {
      type: 'box',
      layout: 'horizontal',
      contents: [
        {
          type: 'text',
          text: 'üöê',
          size: 'sm',
          flex: 1
        },
        {
          type: 'text',
          text: busData.license_plate,
          size: 'sm',
          flex: 4,
          weight: 'bold'
        }
      ]
    },
    {
      type: 'box',
      layout: 'horizontal',
      contents: [
        {
          type: 'text',
          text: 'üë®‚Äç‚úàÔ∏è',
          size: 'sm',
          flex: 1
        },
        {
          type: 'text',
          text: busData.driver_name,
          size: 'sm',
          flex: 4
        }
      ],
      margin: 'sm'
    },
    {
      type: 'box',
      layout: 'horizontal',
      contents: [
        {
          type: 'text',
          text: 'üìû',
          size: 'sm',
          flex: 1
        },
        {
          type: 'text',
          text: busData.driver_phone,
          size: 'sm',
          flex: 4,
          action: {
            type: 'uri',
            uri: `tel:${busData.driver_phone}`
          }
        }
      ],
      margin: 'sm'
    },
    {
      type: 'separator',
      margin: 'md'
    },
    {
      type: 'box',
      layout: 'horizontal',
      contents: [
        {
          type: 'text',
          text: '‚è∞',
          size: 'sm',
          flex: 1
        },
        {
          type: 'text',
          text: `${updateTime} (${timeAgo})`,
          size: 'sm',
          flex: 4
        }
      ],
      margin: 'sm'
    }
  );
  
  if (busData.speed !== null && busData.speed > 0) {
    bodyContents.push({
      type: 'box',
      layout: 'horizontal',
      contents: [
        {
          type: 'text',
          text: 'üèÉ‚Äç‚ôÇÔ∏è',
          size: 'sm',
          flex: 1
        },
        {
          type: 'text',
          text: `${Math.round(busData.speed)} ‡∏Å‡∏°./‡∏ä‡∏°.`,
          size: 'sm',
          flex: 4
        }
      ],
      margin: 'sm'
    });
  }
  
  bodyContents.push({
    type: 'box',
    layout: 'horizontal',
    contents: [
      {
        type: 'text',
        text: 'üìä',
        size: 'sm',
        flex: 1
      },
      {
        type: 'text',
        text: statusText[busData.status] || '‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
        size: 'sm',
        flex: 4,
        color: statusColor[busData.status] || '#666666'
      }
    ],
    margin: 'sm'
  });

  return {
    type: 'flex',
    altText: `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™ ${busData.license_plate}`,
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™',
            weight: 'bold',
            size: 'lg',
            color: '#1DB446'
          }
        ]
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: bodyContents
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: 'üó∫Ô∏è ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
              uri: mapLink
            },
            style: 'primary',
            color: '#1DB446'
          }
        ]
      }
    }
  };
}

/**
 * ‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
 * @param {string} lineUserId - LINE User ID
 * @param {Object} options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
 */
async function sendBusLocation(lineUserId, options = {}) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    const linkStatus = await checkLinkStatus(lineUserId);
    
    if (!linkStatus.isLinked) {
      await client.pushMessage(lineUserId, {
        type: 'text',
        text: '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
      });
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
      };
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const busResult = await getStudentBus(linkStatus.student_id);
    
    if (!busResult.success) {
      await client.pushMessage(lineUserId, {
        type: 'text',
        text: `‚ùå ${busResult.error}`
      });
      return busResult;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!busResult.bus.current_latitude || !busResult.bus.current_longitude) {
      await client.pushMessage(lineUserId, {
        type: 'text',
        text: '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'
      });
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'
      };
    }

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    const { format = 'flex' } = options;
    
    if (format === 'text') {
      // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      const message = formatBusLocationMessage(busResult.bus, busResult.student);
      
      await lineClient.pushMessage(lineUserId, {
        type: 'text',
        text: message
      });
    } else {
      // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Flex Message
      const flexMessage = createBusLocationFlexMessage(busResult.bus, busResult.student);
      
      await lineClient.pushMessage(lineUserId, flexMessage);
    }

    return {
      success: true,
      bus_id: busResult.bus.id
    };

  } catch (error) {
    console.error('Error sending bus location:', error);
    
    await client.pushMessage(lineUserId, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
    
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Geofence ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 * @param {string} busId - ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏ñ‡∏ö‡∏±‡∏™
 * @param {number} latitude - ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î
 * @param {number} longitude - ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 */
async function checkGeofenceAndNotify(busId, latitude, longitude) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { data: locations, error: locError } = await supabase
      .from('pickup_locations')
      .select('*');
    
    if (locError) {
      console.error('Error fetching pickup locations:', locError);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á'
      };
    }

    const notifications = [];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á
    for (const location of locations) {
      const distance = calculateDistance(
        latitude, longitude,
        location.latitude, location.longitude
      );
      
      // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ geofence (‡πÄ‡∏ä‡πà‡∏ô 500 ‡πÄ‡∏°‡∏ï‡∏£)
      const geofenceRadius = location.geofence_radius || 0.5; // ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
      
      if (distance <= geofenceRadius) {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏ô‡∏µ‡πâ
        const { data: students, error: studError } = await supabase
          .from('students')
          .select(`
            id, student_name, pickup_location_id, dropoff_location_id,
            parents!inner(line_user_id)
          `)
          .eq('bus_id', busId)
          .or(`pickup_location_id.eq.${location.id},dropoff_location_id.eq.${location.id}`);
        
        if (studError) {
          console.error('Error fetching students for location:', studError);
          continue;
        }
        
        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
        for (const student of students) {
          if (student.parents && student.parents.line_user_id) {
            const estimatedTime = Math.round((distance / 30) * 60); // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 30 ‡∏Å‡∏°./‡∏ä‡∏°.
            const message = `üöå ‡∏£‡∏ñ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß!\n\nüë¶üëß ${student.student_name}\nüìç ${location.location_name}\n‚è∞ ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${estimatedTime} ‡∏ô‡∏≤‡∏ó‡∏µ\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏£‡∏≠‡∏£‡∏±‡∏ö`;
            
            try {
              await client.pushMessage(student.parents.line_user_id, {
                type: 'text',
                text: message
              });
              
              notifications.push({
                student_id: student.id,
                location_id: location.id,
                distance: distance,
                estimated_time: estimatedTime
              });
            } catch (pushError) {
              console.error('Error sending geofence notification:', pushError);
            }
          }
        }
      }
    }

    return {
      success: true,
      notifications_sent: notifications.length,
      notifications: notifications
    };

  } catch (error) {
    console.error('Error in checkGeofenceAndNotify:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
 * @param {string} busId - ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏ñ‡∏ö‡∏±‡∏™
 * @param {Object} options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 * @returns {Promise<Object>} ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
 */
async function getBusLocationHistory(busId, options = {}) {
  const {
    limit = 50,
    hours = 24,
    startDate = null,
    endDate = null
  } = options;

  try {
    let query = supabase
      .from('bus_locations')
      .select('*')
      .eq('bus_id', busId)
      .order('recorded_at', { ascending: false });

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    if (startDate && endDate) {
      query = query.gte('recorded_at', startDate).lte('recorded_at', endDate);
    } else if (hours) {
      const hoursAgo = moment().subtract(hours, 'hours').toISOString();
      query = query.gte('recorded_at', hoursAgo);
    }

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    query = query.limit(limit);

    const { data: locations, error } = await query;

    if (error) {
      console.error('Error fetching bus location history:', error);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'
      };
    }

    return {
      success: true,
      locations: locations || [],
      total: locations ? locations.length : 0
    };

  } catch (error) {
    console.error('Error in getBusLocationHistory:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };
  }
}

export {
  updateBusLocation,
  getCurrentBusLocation,
  getStudentBus,
  sendBusLocation,
  checkGeofenceAndNotify,
  getBusLocationHistory,
  calculateDistance,
  createMapLink,
  formatBusLocationMessage,
  createBusLocationFlexMessage
};