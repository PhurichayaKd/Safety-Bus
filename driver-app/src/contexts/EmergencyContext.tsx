import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { Alert } from 'react-native';
import { useAuth } from './AuthContext';
import {
  EmergencyLog,
  subscribeToEmergencyLogs,
  getUnresolvedEmergencyLogs,
  recordEmergencyResponse,
  sendLineNotification,
  getEventTypeText,
  formatDateTime
} from '../services/emergencyService';

interface EmergencyContextType {
  emergencies: EmergencyLog[];
  unreadCount: number;
  showEmergencyModal: boolean;
  currentEmergency: EmergencyLog | null;
  markAsRead: (eventId: number) => void;
  handleEmergencyResponse: (eventId: number, responseType: 'CHECKED' | 'EMERGENCY' | 'CONFIRMED_NORMAL', notes?: string) => Promise<void>;
  dismissModal: () => void;
  refreshEmergencies: () => Promise<void>;
  createEmergency: (eventData: any) => Promise<void>;
  testConnection: () => Promise<boolean>;
}

const EmergencyContext = createContext<EmergencyContextType | undefined>(undefined);

export const useEmergency = () => {
  const context = useContext(EmergencyContext);
  if (!context) {
    throw new Error('useEmergency must be used within an EmergencyProvider');
  }
  return context;
};

interface EmergencyProviderProps {
  children: ReactNode;
}

export const EmergencyProvider: React.FC<EmergencyProviderProps> = ({ children }) => {
  const { session } = useAuth();
  const [emergencies, setEmergencies] = useState<EmergencyLog[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [showEmergencyModal, setShowEmergencyModal] = useState(false);
  const [currentEmergency, setCurrentEmergency] = useState<EmergencyLog | null>(null);
  const [readEmergencies, setReadEmergencies] = useState<Set<number>>(new Set());

  const driverId = session?.user?.user_metadata?.driver_id;

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• emergency ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const refreshEmergencies = async () => {
    if (!driverId) return;

    try {
      const { data, error } = await getUnresolvedEmergencyLogs(driverId);
      if (error) {
        console.error('Error fetching emergencies:', error);
        return;
      }

      if (data) {
        setEmergencies(data);
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
        const unread = data.filter(emergency => !readEmergencies.has(emergency.event_id));
        setUnreadCount(unread.length);
      }
    } catch (error) {
      console.error('Error refreshing emergencies:', error);
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
  const handleNewEmergency = (emergency: EmergencyLog) => {
    setEmergencies(prev => [emergency, ...prev]);
    setCurrentEmergency(emergency);
    setShowEmergencyModal(true);
    setUnreadCount(prev => prev + 1);

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ triggered_by ‡πÄ‡∏õ‡πá‡∏ô student)
    if (emergency.triggered_by !== 'student') {
      sendLineNotification(emergency).catch(error => {
        console.error('Failed to send LINE notification:', error);
      });
    }

    // ‡πÅ‡∏™‡∏î‡∏á Alert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ
    Alert.alert(
      'üö® ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô!',
      `${getEventTypeText(emergency.event_type)}\n‡πÄ‡∏ß‡∏•‡∏≤: ${formatDateTime(emergency.event_time)}`,
      [
        {
          text: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
          onPress: () => {
            setCurrentEmergency(emergency);
            setShowEmergencyModal(true);
          }
        }
      ]
    );
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
  const handleEmergencyUpdate = (emergency: EmergencyLog) => {
    setEmergencies(prev => 
      prev.map(e => e.event_id === emergency.event_id ? emergency : e)
    );

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    if (emergency.resolved) {
      setEmergencies(prev => prev.filter(e => e.event_id !== emergency.event_id));
      setUnreadCount(prev => Math.max(0, prev - 1));
      
      if (currentEmergency?.event_id === emergency.event_id) {
        setShowEmergencyModal(false);
        setCurrentEmergency(null);
      }
    }
  };

  // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  const markAsRead = (eventId: number) => {
    if (!readEmergencies.has(eventId)) {
      setReadEmergencies(prev => new Set([...prev, eventId]));
      setUnreadCount(prev => Math.max(0, prev - 1));
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
  const handleEmergencyResponse = async (
    eventId: number, 
    responseType: 'CHECKED' | 'EMERGENCY' | 'CONFIRMED_NORMAL', 
    notes?: string
  ) => {
    if (!driverId) return;

    try {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
      const { success, error } = await recordEmergencyResponse(eventId, responseType, driverId, notes);
      
      if (!success) {
        Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÑ‡∏î‡πâ');
        return;
      }

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
      const emergency = emergencies.find(e => e.event_id === eventId);
      if (emergency) {
        await sendLineNotification(emergency, responseType);
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMERGENCY ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î modal ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      if (responseType === 'EMERGENCY') {
        // ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î modal ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
        Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥');
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CHECKED ‡πÅ‡∏•‡∏∞ CONFIRMED_NORMAL ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î modal
        setEmergencies(prev => prev.filter(e => e.event_id !== eventId));
        setUnreadCount(prev => Math.max(0, prev - 1));
        setShowEmergencyModal(false);
        setCurrentEmergency(null);

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        const message = responseType === 'CHECKED' 
          ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' 
          : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢';
        
        Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', message);
      }

    } catch (error) {
      console.error('Error handling emergency response:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•');
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
  const createEmergency = async (eventData: any) => {
    try {
      // ‡πÉ‡∏ä‡πâ EmergencyService ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const { EmergencyService } = await import('../../services/EmergencyService.js');
      await EmergencyService.createEmergencyEvent(eventData);
      
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await refreshEmergencies();
    } catch (error) {
      console.error('Error creating emergency:', error);
      throw error;
    }
  };

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const testConnection = async (): Promise<boolean> => {
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Supabase
      await refreshEmergencies();
      return true;
    } catch (error) {
      console.error('Connection test failed:', error);
      return false;
    }
  };

  // ‡∏õ‡∏¥‡∏î Modal
  const dismissModal = () => {
    setShowEmergencyModal(false);
    setCurrentEmergency(null);
  };

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Real-time subscription
  useEffect(() => {
    if (!driverId) return;

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    refreshEmergencies();

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ subscription
    const channel = subscribeToEmergencyLogs(
      driverId,
      handleNewEmergency,
      handleEmergencyUpdate
    );

    return () => {
      if (channel) {
        channel.unsubscribe();
      }
    };
  }, [driverId]);

  const value: EmergencyContextType = {
    emergencies,
    unreadCount,
    showEmergencyModal,
    currentEmergency,
    markAsRead,
    handleEmergencyResponse,
    dismissModal,
    refreshEmergencies,
    createEmergency,
    testConnection
  };

  return (
    <EmergencyContext.Provider value={value}>
      {children}
    </EmergencyContext.Provider>
  );
};