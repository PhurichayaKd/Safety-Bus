require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function checkLinkedAccounts() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß...');
    console.log('üì° Supabase URL:', process.env.SUPABASE_URL);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á parent_line_links
    const { count: parentCount, error: parentCountError } = await supabase
      .from('parent_line_links')
      .select('*', { count: 'exact', head: true });

    if (parentCountError) {
      console.log('‚ùå Error counting parent links:', parentCountError);
    } else {
      console.log(`\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô parent_line_links: ${parentCount} ‡πÅ‡∏ñ‡∏ß`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_line_links
    const { count: studentCount, error: studentCountError } = await supabase
      .from('student_line_links')
      .select('*', { count: 'exact', head: true });

    if (studentCountError) {
      console.log('‚ùå Error counting student links:', studentCountError);
    } else {
      console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô student_line_links: ${studentCount} ‡πÅ‡∏ñ‡∏ß`);
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    if (parentCount > 0) {
      const { data: parentLinks, error: parentError } = await supabase
        .from('parent_line_links')
        .select(`
          line_user_id,
          parent_id,
          active,
          linked_at,
          parents(parent_name)
        `);

      if (parentError) {
        console.log('‚ùå Error fetching parent links:', parentError);
      } else {
        console.log('\nüìã Parent LINE Links (All):');
        parentLinks.forEach((link, index) => {
          console.log(`${index + 1}. LINE ID: ${link.line_user_id}`);
          console.log(`   Parent ID: ${link.parent_id}`);
          console.log(`   Parent: ${link.parents?.parent_name || 'N/A'}`);
          console.log(`   Active: ${link.active ? '‚úÖ' : '‚ùå'}`);
          console.log(`   Linked: ${new Date(link.linked_at).toLocaleString('th-TH')}`);
          console.log('---');
        });
      }
    }

    if (studentCount > 0) {
      const { data: studentLinks, error: studentError } = await supabase
        .from('student_line_links')
        .select(`
          line_user_id,
          student_id,
          active,
          linked_at,
          students(student_name, student_id)
        `);

      if (studentError) {
        console.log('‚ùå Error fetching student links:', studentError);
      } else {
        console.log('\nüìã Student LINE Links (All):');
        studentLinks.forEach((link, index) => {
          console.log(`${index + 1}. LINE ID: ${link.line_user_id}`);
          console.log(`   Student ID: ${link.student_id}`);
          console.log(`   Student: ${link.students?.student_name || 'N/A'}`);
          console.log(`   Active: ${link.active ? '‚úÖ' : '‚ùå'}`);
          console.log(`   Linked: ${new Date(link.linked_at).toLocaleString('th-TH')}`);
          console.log('---');
        });
      }
    }

    console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  }
}

checkLinkedAccounts();