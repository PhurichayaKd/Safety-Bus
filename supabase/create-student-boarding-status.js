require('dotenv').config({ path: '../safety-bus-bot/vercel-deploy/.env' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_ANON_KEY ‡πÉ‡∏ô environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function createStudentBoardingStatusTable() {
  console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_boarding_status...');
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log('üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_boarding_status...');
    const { data: existingTable, error: checkError } = await supabase
      .from('student_boarding_status')
      .select('*')
      .limit(1);

    if (!checkError) {
      console.log('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_boarding_status ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    console.log('üìù ‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_boarding_status ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');

    // ‡πÉ‡∏ä‡πâ SQL ‡∏ú‡πà‡∏≤‡∏ô REST API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const createTableSQL = `
      -- ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updated_at
      CREATE OR REPLACE FUNCTION update_student_boarding_status_updated_at()
      RETURNS TRIGGER AS $$
      BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;

      -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_boarding_status
      CREATE TABLE IF NOT EXISTS public.student_boarding_status (
        status_id bigserial NOT NULL,
        student_id text NOT NULL,
        driver_id integer NOT NULL,
        trip_date date NOT NULL,
        trip_phase character varying(10) NOT NULL DEFAULT 'go'::character varying,
        boarding_status character varying(20) NOT NULL,
        pickup_time timestamp with time zone NULL,
        dropoff_time timestamp with time zone NULL,
        last_scan_id bigint NULL,
        created_at timestamp with time zone NULL DEFAULT now(),
        updated_at timestamp with time zone NULL DEFAULT now(),
        route_id integer NULL,
        CONSTRAINT student_boarding_status_pkey PRIMARY KEY (status_id),
        CONSTRAINT student_boarding_unique_daily_phase UNIQUE (student_id, driver_id, trip_date, trip_phase),
        CONSTRAINT student_boarding_status_boarding_status_check CHECK (
          (boarding_status)::text = ANY (
            ARRAY[
              ('waiting'::character varying)::text,
              ('boarded'::character varying)::text,
              ('dropped'::character varying)::text,
              ('absent'::character varying)::text,
              ('picked_up'::character varying)::text,
              ('dropped_off'::character varying)::text
            ]
          )
        ),
        CONSTRAINT student_boarding_status_trip_phase_check CHECK (
          (trip_phase)::text = ANY (
            ARRAY['go'::text, 'return'::text, 'unknown'::text]
          )
        )
      ) TABLESPACE pg_default;

      -- ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes
      CREATE INDEX IF NOT EXISTS idx_sbs_student_id ON public.student_boarding_status USING btree (student_id) TABLESPACE pg_default;
      CREATE INDEX IF NOT EXISTS idx_sbs_driver_id ON public.student_boarding_status USING btree (driver_id) TABLESPACE pg_default;
      CREATE INDEX IF NOT EXISTS idx_sbs_trip_date ON public.student_boarding_status USING btree (trip_date) TABLESPACE pg_default;
      CREATE INDEX IF NOT EXISTS idx_sbs_trip_phase ON public.student_boarding_status USING btree (trip_phase) TABLESPACE pg_default;
      CREATE INDEX IF NOT EXISTS idx_sbs_boarding_status ON public.student_boarding_status USING btree (boarding_status) TABLESPACE pg_default;

      -- ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger
      CREATE TRIGGER trigger_update_student_boarding_status_updated_at
      BEFORE UPDATE ON student_boarding_status
      FOR EACH ROW
      EXECUTE FUNCTION update_student_boarding_status_updated_at();
    `;

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô SQL ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ psql ‡∏´‡∏£‡∏∑‡∏≠ Supabase CLI
    const fs = require('fs');
    fs.writeFileSync('student_boarding_status.sql', createTableSQL);
    
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå SQL: student_boarding_status.sql');
    console.log('üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á:');
    console.log('   npx supabase db push --file student_boarding_status.sql');
    console.log('   ‡∏´‡∏£‡∏∑‡∏≠ copy SQL ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå student_boarding_status.sql ‡πÑ‡∏õ‡∏£‡∏±‡∏ô‡πÉ‡∏ô Supabase Dashboard');

  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:', error);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
createStudentBoardingStatusTable();