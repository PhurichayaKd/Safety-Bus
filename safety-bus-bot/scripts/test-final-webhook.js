import axios from 'axios';
import dotenv from 'dotenv';
import crypto from 'crypto';

dotenv.config();

async function getNgrokUrl() {
  try {
    const response = await axios.get('http://localhost:4040/api/tunnels');
    const tunnels = response.data.tunnels;
    const httpsTunnel = tunnels.find(tunnel => tunnel.proto === 'https');
    return httpsTunnel ? httpsTunnel.public_url : null;
  } catch (error) {
    return null;
  }
}

console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rich Menu Postback ‡∏ú‡πà‡∏≤‡∏ô ngrok');
console.log('==================================================');

async function testFinalWebhook() {
  // ‡∏î‡∏∂‡∏á ngrok URL
  const ngrokUrl = await getNgrokUrl();
  if (!ngrokUrl) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ngrok tunnel');
    console.log('üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ngrok http 3000');
    return;
  }
  
  console.log(`üåê ‡πÉ‡∏ä‡πâ ngrok URL: ${ngrokUrl}`);
  
  const testEvents = [
    {
      name: 'Travel History',
      data: 'action=history'
    },
    {
      name: 'Leave Request', 
      data: 'action=leave'
    },
    {
      name: 'Bus Location',
      data: 'action=location'
    },
    {
      name: 'Contact Driver',
      data: 'action=contact'
    }
  ];
  
  console.log('\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö postback events...');
  console.log('üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏î‡∏π logs ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å terminal ‡∏´‡∏ô‡∏∂‡πà‡∏á\n');
  
  for (const test of testEvents) {
    console.log(`üì§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${test.name}`);
    console.log(`üìä ‡∏™‡πà‡∏á postback: ${test.data}`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á mock LINE webhook payload
    const postbackPayload = {
      events: [
        {
          type: 'postback',
          postback: {
            data: test.data
          },
          source: {
            userId: 'test-user-' + Date.now()
          },
          replyToken: 'test-reply-' + Date.now(),
          timestamp: Date.now()
        }
      ]
    };
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏õ‡∏•‡∏≠‡∏°
    const body = JSON.stringify(postbackPayload);
    const signature = crypto
      .createHmac('SHA256', process.env.LINE_CHANNEL_SECRET || 'test-secret')
      .update(body)
      .digest('base64');
    
    try {
      const response = await axios.post(`${ngrokUrl}/webhook`, postbackPayload, {
        headers: {
          'Content-Type': 'application/json',
          'X-Line-Signature': signature
        },
        validateStatus: function (status) {
          return status < 600;
        }
      });
      
      if (response.status === 200) {
        console.log(`‚úÖ ${test.name} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Status: ${response.status})`);
      } else {
        console.log(`‚ö†Ô∏è ${test.name} - ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á (Status: ${response.status})`);
      }
    } catch (error) {
      console.log(`‚ùå ${test.name} - ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    }
    
    console.log('---');
    
    // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testFinalWebhook()
  .then(() => {
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:');
    console.log('- ‚úÖ ngrok tunnel ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà');
    console.log('- ‚úÖ Webhook URL ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß');
    console.log('- ‚úÖ Rich Menu ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
    console.log('- ‚úÖ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö events ‡πÑ‡∏î‡πâ');
    
    console.log('\nüì± ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ Rich Menu ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß:');
    console.log('   1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ LINE ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠');
    console.log('   2. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö Bot');
    console.log('   3. ‡∏•‡∏≠‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô Rich Menu');
    console.log('   4. ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°');
    
    console.log('\nüîç ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô Rich Menu:');
    console.log('   - ‡∏•‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ LINE ‡πÉ‡∏´‡∏°‡πà');
    console.log('   - ‡∏•‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà');
    console.log('   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ follow Bot ‡πÅ‡∏•‡πâ‡∏ß');
  })
  .catch(error => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
  });