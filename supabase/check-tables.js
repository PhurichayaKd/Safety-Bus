require('dotenv').config({ path: './driver-app/.env' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTables() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡πÉ‡∏ô Supabase...\n');

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table drivers
  try {
    console.log('1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table "drivers"...');
    const { data, error } = await supabase
      .from('drivers')
      .select('count')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Table "drivers" ‡πÑ‡∏°‡πà‡∏û‡∏ö:', error.message);
    } else {
      console.log('‚úÖ Table "drivers" ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    }
  } catch (err) {
    console.log('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table "drivers":', err.message);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ
  const tablesToCheck = ['students', 'student_boarding_status', 'v_student_today_status', 'rfid_cards', 'rfid_scans', 'notifications'];
  
  for (const table of tablesToCheck) {
    try {
      console.log(`\n${tablesToCheck.indexOf(table) + 2}Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table "${table}"...`);
      const { data, error } = await supabase
        .from(table)
        .select('count')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå Table "${table}" ‡πÑ‡∏°‡πà‡∏û‡∏ö:`, error.message);
      } else {
        console.log(`‚úÖ Table "${table}" ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß`);
      }
    } catch (err) {
      console.log(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table "${table}":`, err.message);
    }
  }
}

checkTables().catch(console.error);