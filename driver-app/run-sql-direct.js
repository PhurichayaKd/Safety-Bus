/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Supabase client
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Supabase configuration ‡πÉ‡∏ô environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function runDirectSQL() {
  try {
    console.log('üîß ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...');

    // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á emergency_logs (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
    console.log('\n1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á emergency_logs...');
    
    const { data: columns, error: columnError } = await supabase
      .from('emergency_logs')
      .select('*')
      .limit(1);

    if (columnError) {
      console.error('‚ùå Error:', columnError);
    } else {
      console.log('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á emergency_logs ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      if (columns && columns.length > 0) {
        console.log('üìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:', Object.keys(columns[0]));
      }
    }

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á emergency_responses (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
    console.log('\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á emergency_responses...');
    
    const { data: responses, error: responseError } = await supabase
      .from('emergency_responses')
      .select('*')
      .limit(1);

    if (responseError) {
      console.log('‚ö†Ô∏è  ‡∏ï‡∏≤‡∏£‡∏≤‡∏á emergency_responses ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:', responseError.message);
      console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô Supabase Dashboard');
    } else {
      console.log('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á emergency_responses ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      if (responses && responses.length > 0) {
        console.log('üìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:', Object.keys(responses[0]));
      }
    }

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô emergency_responses
    console.log('\n3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô emergency_responses...');
    
    // ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á emergency log ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const { data: testEmergency, error: emergencyError } = await supabase
      .from('emergency_logs')
      .insert({
        driver_id: 1,
        event_type: 'PANIC_BUTTON',
        triggered_by: 'student',
        details: JSON.stringify({
          test: true,
          purpose: 'RLS testing'
        })
      })
      .select()
      .single();

    if (emergencyError) {
      console.error('‚ùå Error creating test emergency:', emergencyError);
      return;
    }

    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á test emergency ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', testEmergency.event_id);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° response
    const { data: testResponse, error: responseInsertError } = await supabase
      .from('emergency_responses')
      .insert({
        event_id: testEmergency.event_id,
        driver_id: 1,
        response_type: 'CHECKED',
        response_time: new Date().toISOString(),
        notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö RLS'
      })
      .select()
      .single();

    if (responseInsertError) {
      console.error('‚ùå Error creating response (RLS issue):', responseInsertError);
      console.log('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î RLS ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç policy ‡∏ú‡πà‡∏≤‡∏ô Supabase Dashboard');
      
      // ‡∏•‡∏≠‡∏á‡∏õ‡∏¥‡∏î RLS ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ)
      console.log('\nüîß ‡∏•‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RLS...');
      console.log('üìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏ô Supabase Dashboard:');
      console.log(`
-- ‡∏õ‡∏¥‡∏î RLS ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
ALTER TABLE public.emergency_responses DISABLE ROW LEVEL SECURITY;

-- ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç policy
DROP POLICY IF EXISTS "Drivers can insert their own emergency responses" ON public.emergency_responses;

CREATE POLICY "Allow all inserts for testing" 
ON public.emergency_responses FOR INSERT 
WITH CHECK (true);

-- ‡πÄ‡∏õ‡∏¥‡∏î RLS ‡∏Å‡∏•‡∏±‡∏ö
ALTER TABLE public.emergency_responses ENABLE ROW LEVEL SECURITY;
      `);
    } else {
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', testResponse);
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    console.log('\n4. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
    
    if (testResponse) {
      await supabase
        .from('emergency_responses')
        .delete()
        .eq('response_id', testResponse.response_id);
    }
    
    await supabase
      .from('emergency_logs')
      .delete()
      .eq('event_id', testEmergency.event_id);

    console.log('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  }
}

runDirectSQL();