// scripts/test-real-webhook.js
import crypto from 'crypto';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables
dotenv.config();

const CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET;
const WEBHOOK_URL = 'http://localhost:3000/webhook';

function createSignature(body, secret) {
  return crypto
    .createHmac('SHA256', secret)
    .update(body)
    .digest('base64');
}

async function testWebhook() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö webhook ‡∏à‡∏£‡∏¥‡∏á...');
  
  const userId = 'tartar-c-v';
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤"
  const event = {
    events: [
      {
        type: 'message',
        message: {
          type: 'text',
          text: '‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤'
        },
        source: {
          userId: userId
        },
        replyToken: 'test-reply-token-webhook',
        timestamp: Date.now()
      }
    ],
    destination: 'test'
  };
  
  const body = JSON.stringify(event);
  const signature = createSignature(body, CHANNEL_SECRET);
  
  try {
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤" ‡πÑ‡∏õ‡∏¢‡∏±‡∏á webhook...');
    
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Line-Signature': signature
      },
      body: body
    });
    
    console.log('üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:', response.status);
    
    if (response.ok) {
      console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      const responseText = await response.text();
      if (responseText) {
        console.log('üìù Response:', responseText);
      }
    } else {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', response.statusText);
      const errorText = await response.text();
      console.log('üìù Error details:', errorText);
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error.message);
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testWebhook();