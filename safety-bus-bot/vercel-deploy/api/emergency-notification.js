// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
import { Client } from '@line/bot-sdk';
import { createClient } from '@supabase/supabase-js';

// LINE Bot configuration
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

// Initialize LINE Bot SDK
let lineClient = null;
try {
  if (process.env.LINE_CHANNEL_ACCESS_TOKEN) {
    lineClient = new Client(config);
  } else {
    console.warn('‚ö†Ô∏è LINE_CHANNEL_ACCESS_TOKEN not set - LINE messaging disabled');
  }
} catch (error) {
  console.error('‚ùå Failed to initialize LINE client:', error.message);
}

// Supabase configuration
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

let supabase = null;
try {
  if (supabaseUrl && supabaseKey) {
    supabase = createClient(supabaseUrl, supabaseKey);
  } else {
    console.warn('‚ö†Ô∏è Supabase configuration missing - database operations disabled');
  }
} catch (error) {
  console.error('‚ùå Failed to initialize Supabase client:', error.message);
}

// Emergency event type messages
const EMERGENCY_MESSAGES = {
  DRIVER_PANIC: {
    emoji: 'üö®',
    title: '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
    message: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ö‡∏ô‡∏£‡∏ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
    priority: 'CRITICAL'
  },
  SMOKE_DETECTED: {
    emoji: 'üí®',
    title: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏±‡∏ô',
    message: '‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    priority: 'HIGH'
  },
  HIGH_TEMPERATURE: {
    emoji: 'üå°Ô∏è',
    title: '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥',
    message: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏£‡∏ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    priority: 'HIGH'
  },
  MOVEMENT_DETECTED: {
    emoji: 'üì≥',
    title: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏î‡∏£‡∏ñ',
    message: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡∏£‡∏ñ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≠‡∏î‡∏ô‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    priority: 'MEDIUM'
  },
  STUDENT_SWITCH: {
    emoji: 'üë∂',
    title: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå',
    message: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏ö‡∏ô‡∏£‡∏ñ (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE)',
    priority: 'LOW'
  }
};

// Driver response messages
const RESPONSE_MESSAGES = {
  CHECKED: {
    emoji: '‚úÖ',
    title: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
    message: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥'
  },
  EMERGENCY: {
    emoji: 'üö®',
    title: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
    message: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
  }
};

export default async function handler(req, res) {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { 
      eventType, 
      responseType, 
      eventId, 
      description, 
      location, 
      notes,
      timestamp 
    } = req.body;

    // Validate required fields
    if (!eventType && !responseType) {
      return res.status(400).json({ 
        error: 'Either eventType or responseType is required' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE
    if (!lineClient) {
      console.error('LINE client not initialized');
      return res.status(500).json({ 
        error: 'LINE messaging service not available' 
      });
    }

    let messageInfo;
    let shouldSendToLine = true;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    if (eventType) {
      // ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      messageInfo = EMERGENCY_MESSAGES[eventType];
      
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö STUDENT_SWITCH
      if (eventType === 'STUDENT_SWITCH') {
        shouldSendToLine = false;
      }
    } else if (responseType) {
      // ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
      messageInfo = RESPONSE_MESSAGES[responseType];
    }

    if (!messageInfo) {
      return res.status(400).json({ 
        error: 'Invalid event type or response type' 
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const currentTime = new Date(timestamp || Date.now()).toLocaleString('th-TH', {
      timeZone: 'Asia/Bangkok',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    let messageText = `${messageInfo.emoji} ${messageInfo.title}\n\n${messageInfo.message}`;
    
    if (description) {
      messageText += `\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${description}`;
    }
    
    if (location) {
      messageText += `\nüìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${location}`;
    }
    
    if (notes) {
      messageText += `\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${notes}`;
    }
    
    messageText += `\n\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${currentTime}`;
    
    if (eventId) {
      messageText += `\nüÜî ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${eventId}`;
    }

    const lineMessage = {
      type: 'text',
      text: messageText
    };

    let notificationResults = [];

    if (shouldSendToLine) {
      // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á student_line_links ‡πÅ‡∏•‡∏∞ parent_line_links
      if (supabase) {
        try {
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å student_line_links
          const { data: studentLinks, error: studentError } = await supabase
            .from('student_line_links')
            .select('line_user_id, student_name')
            .not('line_user_id', 'is', null)
            .neq('line_user_id', '');

          if (studentError) {
            console.error('Error fetching student links:', studentError);
          } else if (studentLinks && studentLinks.length > 0) {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
            for (const student of studentLinks) {
              try {
                await lineClient.pushMessage(student.line_user_id, lineMessage);
                notificationResults.push({
                  lineUserId: student.line_user_id,
                  studentName: student.student_name,
                  type: 'student',
                  status: 'success'
                });
                console.log(`‚úÖ Emergency notification sent to student ${student.student_name} (${student.line_user_id})`);
              } catch (error) {
                console.error(`‚ùå Failed to send to student ${student.student_name}:`, error);
                notificationResults.push({
                  lineUserId: student.line_user_id,
                  studentName: student.student_name,
                  type: 'student',
                  status: 'failed',
                  error: error.message
                });
              }
            }
          } else {
            console.log('No student LINE links found');
          }

          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å parent_line_links
          const { data: parentLinks, error: parentError } = await supabase
            .from('parent_line_links')
            .select('line_user_id, parent_name, student_name')
            .not('line_user_id', 'is', null)
            .neq('line_user_id', '');

          if (parentError) {
            console.error('Error fetching parent links:', parentError);
          } else if (parentLinks && parentLinks.length > 0) {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
            for (const parent of parentLinks) {
              try {
                await lineClient.pushMessage(parent.line_user_id, lineMessage);
                notificationResults.push({
                  lineUserId: parent.line_user_id,
                  parentName: parent.parent_name,
                  studentName: parent.student_name,
                  type: 'parent',
                  status: 'success'
                });
                console.log(`‚úÖ Emergency notification sent to parent ${parent.parent_name} (${parent.line_user_id})`);
              } catch (error) {
                console.error(`‚ùå Failed to send to parent ${parent.parent_name}:`, error);
                notificationResults.push({
                  lineUserId: parent.line_user_id,
                  parentName: parent.parent_name,
                  studentName: parent.student_name,
                  type: 'parent',
                  status: 'failed',
                  error: error.message
                });
              }
            }
          } else {
            console.log('No parent LINE links found');
          }
        } catch (error) {
          console.error('Database query error:', error);
        }
      }


    }

    // Log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    console.log(`üì§ Emergency notification processed:`, {
      eventType,
      responseType,
      eventId,
      shouldSendToLine,
      recipientCount: notificationResults.length,
      timestamp: currentTime
    });

    return res.status(200).json({
      success: true,
      message: shouldSendToLine ? 'Emergency notification sent successfully' : 'Event logged (no LINE notification sent)',
      eventType,
      responseType,
      eventId,
      shouldSendToLine,
      notificationResults,
      timestamp: currentTime
    });

  } catch (error) {
    console.error('‚ùå Emergency notification error:', error);
    return res.status(500).json({
      success: false,
      error: 'Failed to send emergency notification',
      details: error.message
    });
  }
}