import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å safety-bus-bot/vercel-deploy/.env.local
dotenv.config({ path: '../safety-bus-bot/vercel-deploy/.env.local' });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

console.log('üîç Checking driver_bus table constraints...');
console.log('='.repeat(60));

async function checkDriverBusConstraints() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á driver_bus
    console.log('üìã Checking driver_bus table structure...');
    const { data: sampleData, error: sampleError } = await supabase
      .from('driver_bus')
      .select('*')
      .limit(1);

    if (sampleError) {
      console.log('‚ùå Error getting sample data:', sampleError.message);
      return;
    }

    if (sampleData && sampleData.length > 0) {
      console.log('‚úÖ Table structure (columns):');
      console.log('   Available columns:', Object.keys(sampleData[0]));
      console.log('   Sample data:', sampleData[0]);
    } else {
      console.log('üìÑ No data found in table');
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ insert ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤ trip_phase ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π constraint error
    console.log('\nüß™ Testing invalid trip_phase values to see constraint error...');
    
    const invalidValues = ['pickup', 'dropoff', 'invalid_value'];
    
    for (const invalidValue of invalidValues) {
      console.log(`\nüîç Testing trip_phase: "${invalidValue}"`);
      
      const testData = {
        driver_id: 999999, // ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ
        driver_name: 'TEST_DRIVER',
        phone_number: '0999999999',
        username: 'test_driver',
        trip_phase: invalidValue,
        current_status: 'active',
        is_active: true
      };

      const { error: insertError } = await supabase
        .from('driver_bus')
        .insert(testData);

      if (insertError) {
        console.log(`‚ùå Insert error for "${invalidValue}":`, insertError.message);
        if (insertError.message.includes('check constraint')) {
          console.log('üéØ Found check constraint violation!');
          console.log('   Error code:', insertError.code);
          console.log('   Error details:', insertError.details);
        }
      } else {
        console.log(`‚úÖ Insert successful for "${invalidValue}" - this value is allowed`);
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        await supabase
          .from('driver_bus')
          .delete()
          .eq('driver_id', 999999);
      }
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    console.log('\nüß™ Testing valid trip_phase values...');
    const validValues = ['go', 'return'];
    
    for (const validValue of validValues) {
      console.log(`\nüîç Testing trip_phase: "${validValue}"`);
      
      const testData = {
        driver_id: 999998, // ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ
        driver_name: 'TEST_DRIVER_VALID',
        phone_number: '0999999998',
        username: 'test_driver_valid',
        trip_phase: validValue,
        current_status: 'active',
        is_active: true
      };

      const { error: insertError } = await supabase
        .from('driver_bus')
        .insert(testData);

      if (insertError) {
        console.log(`‚ùå Insert error for "${validValue}":`, insertError.message);
      } else {
        console.log(`‚úÖ Insert successful for "${validValue}" - this value is allowed`);
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        await supabase
          .from('driver_bus')
          .delete()
          .eq('driver_id', 999998);
      }
    }

  } catch (error) {
    console.log('‚ùå Unexpected error:', error.message);
  }
}

checkDriverBusConstraints();