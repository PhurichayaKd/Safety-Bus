require('dotenv').config({ path: '../driver-app/.env' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTableSchema(tableName) {
  console.log(`\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${tableName}"...`);
  
  try {
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const { data: sampleData, error: sampleError } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);
      
    if (sampleError) {
      console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${tableName}" ‡πÑ‡∏°‡πà‡∏û‡∏ö:`, sampleError.message);
      return;
    }

    console.log(`‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${tableName}" ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß`);
    
    if (sampleData && sampleData.length > 0) {
      console.log(`üìã Columns ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${tableName}":`);
      const columns = Object.keys(sampleData[0]);
      columns.forEach(col => {
        console.log(`  - ${col}`);
      });
    } else {
      console.log(`üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${tableName}" ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ - ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á schema ‡∏≠‡∏µ‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ...`);
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ select * limit 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π columns
      const { data: emptyData, error: emptyError } = await supabase
        .from(tableName)
        .select('*')
        .limit(0);
        
      if (!emptyError) {
        console.log(`‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${tableName}" ‡πÑ‡∏î‡πâ`);
      }
    }
  } catch (err) {
    console.log(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${tableName}":`, err.message);
  }
}

async function checkProblematicTables() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤...\n');

  const problematicTables = [
    'live_driver_locations',
    'route_students', 
    'driver_bus'
  ];

  for (const table of problematicTables) {
    await checkTableSchema(table);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
  console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á...');
  const relatedTables = ['drivers', 'students', 'buses'];
  
  for (const table of relatedTables) {
    await checkTableSchema(table);
  }
}

checkProblematicTables().catch(console.error);