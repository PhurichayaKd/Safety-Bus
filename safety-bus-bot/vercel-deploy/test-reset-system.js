import { createClient } from '@supabase/supabase-js';

// Initialize Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
async function testResetSystem() {
  console.log('üîÑ Testing Reset System...\n');

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    console.log('1Ô∏è‚É£ Checking current student status...');
    const { data: currentStatus, error: statusError } = await supabase
      .from('v_student_today_status')
      .select('*')
      .eq('student_id', '100017');

    if (statusError) {
      console.error('‚ùå Error fetching current status:', statusError);
    } else {
      console.log('üìä Current status for student 100017:', currentStatus);
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô pickup_dropoff
    console.log('\n2Ô∏è‚É£ Checking pickup_dropoff records...');
    const today = new Date().toISOString().split('T')[0];
    const { data: pickupData, error: pickupError } = await supabase
      .from('pickup_dropoff')
      .select('*')
      .eq('student_id', '100017')
      .gte('event_time', `${today}T00:00:00`)
      .lt('event_time', `${today}T23:59:59`)
      .order('event_time', { ascending: false });

    if (pickupError) {
      console.error('‚ùå Error fetching pickup data:', pickupError);
    } else {
      console.log('üìã Pickup records for student 100017 today:', pickupData);
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô student_boarding_status
    console.log('\n3Ô∏è‚É£ Checking student_boarding_status records...');
    const { data: boardingStatus, error: boardingError } = await supabase
      .from('student_boarding_status')
      .select('*')
      .eq('student_id', '100017')
      .eq('trip_date', today)
      .order('updated_at', { ascending: false });

    if (boardingError) {
      console.error('‚ùå Error fetching boarding status:', boardingError);
    } else {
      console.log('üöå Boarding status for student 100017 today:', boardingStatus);
    }

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö (waiting_return)
    console.log('\n4Ô∏è‚É£ Testing reset for return phase...');
    await testReturnPhaseReset();

    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (finished)
    console.log('\n5Ô∏è‚É£ Testing reset for finished trip...');
    await testFinishedTripReset();

  } catch (error) {
    console.error('‚ùå Error in test reset system:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö
async function testReturnPhaseReset() {
  try {
    console.log('üîÑ Simulating return phase reset...');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡πÑ‡∏õ
    const today = new Date().toISOString().split('T')[0];
    const now = new Date().toISOString();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡∏Ç‡∏≤‡πÑ‡∏õ
    const { data: insertData, error: insertError } = await supabase
      .from('pickup_dropoff')
      .insert({
        student_id: '100017',
        driver_id: 1,
        event_type: 'pickup',
        location_type: 'go',
        event_time: now,
        pickup_latitude: 13.7563,
        pickup_longitude: 100.5018
      })
      .select();

    if (insertError) {
      console.error('‚ùå Error inserting test data:', insertError);
      return;
    }
    
    console.log('‚úÖ Test pickup data inserted:', insertData);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
    const { data: afterInsert, error: checkError } = await supabase
      .from('v_student_today_status')
      .select('*')
      .eq('student_id', '100017');

    if (checkError) {
      console.error('‚ùå Error checking after insert:', checkError);
    } else {
      console.log('üìä Status after insert:', afterInsert);
    }

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö
    // (‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô")
    console.log('üîÑ Simulating reset for return phase...');
    
    // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô AsyncStorage ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
    // ‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    
    console.log('‚úÖ Return phase reset simulation completed');
    
  } catch (error) {
    console.error('‚ùå Error in return phase reset test:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
async function testFinishedTripReset() {
  try {
    console.log('üîÑ Simulating finished trip reset...');
    
    const today = new Date().toISOString().split('T')[0];
    const now = new Date().toISOString();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏£‡∏ñ‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö
    const { data: insertData2, error: insertError2 } = await supabase
      .from('pickup_dropoff')
      .insert({
        student_id: '100017',
        driver_id: 1,
        event_type: 'dropoff',
        location_type: 'return',
        event_time: now,
        pickup_latitude: 13.7563,
        pickup_longitude: 100.5018
      })
      .select();

    if (insertError2) {
      console.error('‚ùå Error inserting test dropoff data:', insertError2);
      return;
    }
    
    console.log('‚úÖ Test dropoff data inserted:', insertData2);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { data: finalStatus, error: finalError } = await supabase
      .from('v_student_today_status')
      .select('*')
      .eq('student_id', '100017');

    if (finalError) {
      console.error('‚ùå Error checking final status:', finalError);
    } else {
      console.log('üìä Final status:', finalStatus);
    }

    console.log('‚úÖ Finished trip reset simulation completed');
    
  } catch (error) {
    console.error('‚ùå Error in finished trip reset test:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function cleanupTestData() {
  console.log('\nüßπ Cleaning up test data...');
  
  try {
    const today = new Date().toISOString().split('T')[0];
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô pickup_dropoff
    const { error: deleteError } = await supabase
      .from('pickup_dropoff')
      .delete()
      .eq('student_id', '100017')
      .gte('event_time', `${today}T00:00:00`)
      .lt('event_time', `${today}T23:59:59`);

    if (deleteError) {
      console.error('‚ùå Error cleaning up test data:', deleteError);
    } else {
      console.log('‚úÖ Test data cleaned up successfully');
    }
    
  } catch (error) {
    console.error('‚ùå Error in cleanup:', error);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function main() {
  console.log('üöÄ Starting Reset System Test\n');
  
  await testResetSystem();
  
  // ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  console.log('\n‚ùì Do you want to clean up test data? (Run cleanupTestData() manually if needed)');
  
  console.log('\n‚úÖ Reset System Test Completed');
}

// Export functions for manual use
export { testResetSystem, cleanupTestData };

// Run main function
main().catch(console.error);