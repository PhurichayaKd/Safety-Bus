const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDuplicateParents() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á parents...');
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    const { data: duplicates, error } = await supabase
      .rpc('get_duplicate_parent_phones');

    if (error) {
      console.error('‚ùå Error checking duplicates:', error);
      console.log('‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ query ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ó‡∏ô...');
      
      // ‡πÉ‡∏ä‡πâ query ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ó‡∏ô
      const { data: allParents, error: allError } = await supabase
        .from('parents')
        .select('parent_id, parent_name, parent_phone')
        .order('parent_phone');

      if (allError) {
        console.error('‚ùå Error getting all parents:', allError);
        return;
      }

      // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ JavaScript
      const phoneGroups = {};
      allParents.forEach(parent => {
        if (parent.parent_phone) {
          if (!phoneGroups[parent.parent_phone]) {
            phoneGroups[parent.parent_phone] = [];
          }
          phoneGroups[parent.parent_phone].push(parent);
        }
      });

      const duplicatePhones = Object.keys(phoneGroups).filter(phone => phoneGroups[phone].length > 1);
      
      if (duplicatePhones.length > 0) {
        console.log('‚ö†Ô∏è  ‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥:', duplicatePhones.length, '‡πÄ‡∏ö‡∏≠‡∏£‡πå');
        
        duplicatePhones.forEach(phone => {
          console.log(`\nüìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${phone} (${phoneGroups[phone].length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
          phoneGroups[phone].forEach((parent, index) => {
            console.log(`  ${index + 1}. ID: ${parent.parent_id}, ‡∏ä‡∏∑‡πà‡∏≠: ${parent.parent_name}`);
          });
        });
      } else {
        console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á parents');
      }
      return;
    }

    if (duplicates && duplicates.length > 0) {
      console.log('‚ö†Ô∏è  ‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥:', duplicates.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      
      for (const dup of duplicates) {
        console.log(`\nüìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${dup.parent_phone} (${dup.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
        
        // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        const { data: details, error: detailError } = await supabase
          .from('parents')
          .select('parent_id, parent_name, parent_phone')
          .eq('parent_phone', dup.parent_phone)
          .order('parent_id');

        if (detailError) {
          console.error('‚ùå Error getting details:', detailError);
          continue;
        }

        details.forEach((parent, index) => {
          console.log(`  ${index + 1}. ID: ${parent.parent_id}, ‡∏ä‡∏∑‡πà‡∏≠: ${parent.parent_name}`);
        });
      }
    } else {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á parents');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠ null
    const { data: nullPhones, error: nullError } = await supabase
      .from('parents')
      .select('parent_id, parent_name, parent_phone')
      .or('parent_phone.is.null,parent_phone.eq.')
      .order('parent_id');

    if (nullError) {
      console.error('‚ùå Error checking null phones:', nullError);
    } else if (nullPhones && nullPhones.length > 0) {
      console.log(`\n‚ö†Ô∏è  ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ß‡πà‡∏≤‡∏á/null: ${nullPhones.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      nullPhones.forEach(parent => {
        console.log(`  ID: ${parent.parent_id}, ‡∏ä‡∏∑‡πà‡∏≠: ${parent.parent_name}, ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${parent.parent_phone || 'NULL'}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Unexpected error:', error);
  }
}

checkDuplicateParents();