import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config({ path: '.env.local' });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function testRealLineNotifications() {
  console.log('üöå Testing Real LINE Notifications with Driver ID = 1...\n');

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö ID = 1
    console.log('üë®‚Äçüíº Checking Driver ID = 1...');
    const { data: driverData, error: driverError } = await supabase
      .from('driver_bus')
      .select('*')
      .eq('driver_id', 1)
      .single();

    if (driverError || !driverData) {
      console.error('‚ùå Driver ID = 1 not found:', driverError);
      return;
    }

    console.log(`‚úÖ Driver: ${driverData.driver_name} (${driverData.license_plate})`);
    console.log('');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å LINE ‡πÅ‡∏•‡πâ‡∏ß
    console.log('üì± Checking linked students...');
    const { data: linkedStudents, error: studentError } = await supabase
      .from('student_line_links')
      .select(`
        line_user_id,
        line_display_id,
        students!inner(student_id, student_name, grade, is_active)
      `)
      .eq('active', true)
      .eq('students.is_active', true)
      .not('line_user_id', 'is', null)
      .neq('line_user_id', '');

    if (studentError) {
      console.error('‚ùå Error fetching linked students:', studentError);
      return;
    }

    console.log(`üìä Found ${linkedStudents?.length || 0} linked students:`);
    if (linkedStudents && linkedStudents.length > 0) {
      linkedStudents.forEach((student, index) => {
        console.log(`   ${index + 1}. ${student.students.student_name} (${student.students.grade})`);
        console.log(`      LINE ID: ${student.line_user_id}`);
        console.log(`      Display: ${student.line_display_id || 'N/A'}`);
      });
    }
    console.log('');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    const testScenarios = [
      {
        name: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πâ‡∏≤)',
        data: {
          driver_id: 1,
          trip_phase: 'morning',
          current_status: 'start_journey',
          location: '‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á',
          notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å LINE ‡πÅ‡∏•‡πâ‡∏ß'
        }
      },
      {
        name: '‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πâ‡∏≤)',
        data: {
          driver_id: 1,
          trip_phase: 'morning',
          current_status: 'arrived_school',
          location: '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á',
          notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
        }
      }
    ];

    for (const scenario of testScenarios) {
      console.log(`üß™ Testing: ${scenario.name}`);
      console.log('üìã Test Data:');
      console.log(JSON.stringify(scenario.data, null, 2));
      console.log('');

      try {
        const response = await fetch('http://localhost:3000/api/driver-status-notification', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(scenario.data)
        });

        console.log(`üì° API Response Status: ${response.status}`);
        
        const responseData = await response.json();
        console.log('üìã API Response:');
        console.log(JSON.stringify(responseData, null, 2));

        if (response.ok) {
          console.log(`\n‚úÖ ${scenario.name} - Notification sent successfully!`);
          
          if (responseData.notification_results) {
            const results = responseData.notification_results;
            const successCount = results.filter(r => r.status === 'success').length;
            const failedCount = results.filter(r => r.status === 'failed').length;
            
            console.log('\nüìä Notification Results:');
            console.log(`   ‚úÖ Successful: ${successCount}`);
            console.log(`   ‚ùå Failed: ${failedCount}`);
            console.log(`   üì± Students notified: ${responseData.summary?.students_notified || 0}`);
            console.log(`   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Parents notified: ${responseData.summary?.parents_notified || 0}`);
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            console.log('\nüìã Detailed Results:');
            results.forEach((result, index) => {
              const status = result.status === 'success' ? '‚úÖ' : '‚ùå';
              console.log(`   ${index + 1}. ${status} ${result.type}: ${result.status}`);
              if (result.studentName) {
                console.log(`      Student: ${result.studentName}`);
              }
              if (result.parentName) {
                console.log(`      Parent: ${result.parentName}`);
              }
              if (result.error) {
                console.log(`      Error: ${result.error}`);
              }
            });
          }
        } else {
          console.log(`\n‚ùå ${scenario.name} - Notification failed!`);
          console.log('Error:', responseData.error || 'Unknown error');
        }

      } catch (fetchError) {
        console.error(`\n‚ùå ${scenario.name} - Request failed:`, fetchError.message);
      }

      console.log('\n' + '='.repeat(80) + '\n');
    }

    console.log('üéØ Real LINE Notification Testing Complete!');
    console.log(`üìä Total linked students available: ${linkedStudents?.length || 0}`);
    console.log('üí° Check your LINE app to see if notifications were received!');

  } catch (error) {
    console.error('\n‚ùå Test failed with error:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Suggestion: Make sure the server is running on http://localhost:3000');
      console.log('   Run: node server-with-webhook.js');
    }
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testRealLineNotifications().catch(console.error);