require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function createTestData() {
  try {
    console.log('üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
    console.log('üì° Supabase URL:', process.env.SUPABASE_URL);

    // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const { data: students, error: studentsError } = await supabase
      .from('students')
      .select('student_id, student_name, grade')
      .limit(5);

    if (studentsError) {
      console.log('‚ùå Error fetching students:', studentsError);
      return;
    }

    console.log('üìö ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
    students.forEach((student, index) => {
      console.log(`${index + 1}. ID: ${student.student_id}, Name: ${student.student_name}, Grade: ${student.grade}`);
    });

    if (students.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      return;
    }

    // ‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testStudent = students[0];
    console.log(`\nüéØ ‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${testStudent.student_name} (ID: ${testStudent.student_id})`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• student_line_links ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    // ‡πÉ‡∏ä‡πâ LINE User ID ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testLineUserId = 'U1234567890abcdef1234567890abcdef'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô LINE User ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    await supabase
      .from('student_line_links')
      .delete()
      .eq('line_user_id', testLineUserId);

    const { data: linkData, error: linkError } = await supabase
      .from('student_line_links')
      .insert({
        line_user_id: testLineUserId,
        student_id: testStudent.student_id,
        active: true,
        linked_at: new Date().toISOString()
      })
      .select()
      .single();

    if (linkError) {
      console.log('‚ùå Error creating student link:', linkError);
      return;
    }

    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', linkData);
    console.log('\nüéâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
    console.log(`üì± LINE User ID: ${testLineUserId}`);
    console.log(`üë§ Student ID: ${testStudent.student_id}`);
    console.log(`üìö Student Name: ${testStudent.student_name}`);
    console.log('\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô LINE User ID ‡πÉ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  }
}

createTestData();