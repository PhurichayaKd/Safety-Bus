// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á LINE notification
// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏≠‡πà‡∏≤‡∏ô SQL ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå final-fixed-function.sql ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô RPC ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
// ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fallback ‡∏ú‡πà‡∏≤‡∏ô HTTP API ‡∏´‡∏≤‡∏Å RPC ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå vercel-deploy ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
try {
  const envPath = path.join(__dirname, '..', 'safety-bus-bot', 'vercel-deploy', '.env.local');
  if (fs.existsSync(envPath)) {
    require('dotenv').config({ path: envPath });
  } else {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å .env ‡πÉ‡∏ô‡∏£‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const rootEnv = path.join(__dirname, '..', '.env.local');
    if (fs.existsSync(rootEnv)) {
      require('dotenv').config({ path: rootEnv });
    } else {
      require('dotenv').config();
    }
  }
} catch (e) {
  // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î .env ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
}

const supabaseUrl = process.env.SUPABASE_URL;
// ‡πÉ‡∏ä‡πâ Service Role ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡∏ï‡∏Å‡∏•‡∏á‡∏°‡∏≤‡πÉ‡∏ä‡πâ ANON KEY ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ñ‡πà‡∏≤ SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ KEY ‡πÉ‡∏ô environment variables');
  console.log('SUPABASE_URL:', supabaseUrl ? '‚úÖ ‡∏û‡∏ö' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö');
  console.log('SUPABASE_KEY:', supabaseKey ? '‚úÖ ‡∏û‡∏ö' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function updateRfidFunctionWithLine() {
  console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö LINE notification...\n');

  // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
  const sqlPath = path.join(__dirname, 'final-fixed-function.sql');
  if (!fs.existsSync(sqlPath)) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå:', sqlPath);
    process.exit(1);
  }

  const sqlContent = fs.readFileSync(sqlPath, 'utf8');
  console.log('üìÑ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå final-fixed-function.sql ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  console.log(`üìù ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:
- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LINE User ID ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á longitude/location
- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ send_line_notification ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å notification_logs
`);

  // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á RPC ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  // 1) exec_sql ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå sql_query
  try {
    console.log('üöÄ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡πà‡∏≤‡∏ô RPC: exec_sql (sql_query)');
    const { data, error } = await supabase.rpc('exec_sql', { sql_query: sqlContent });
    if (!error) {
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ú‡πà‡∏≤‡∏ô RPC exec_sql (sql_query)');
    } else {
      throw error;
    }
  } catch (err1) {
    console.log('‚ö†Ô∏è exec_sql (sql_query) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err1?.message || err1);

    // 2) exec_sql ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå sql
    try {
      console.log('üöÄ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡πà‡∏≤‡∏ô RPC: exec_sql (sql)');
      const { data, error } = await supabase.rpc('exec_sql', { sql: sqlContent });
      if (!error) {
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ú‡πà‡∏≤‡∏ô RPC exec_sql (sql)');
      } else {
        throw error;
      }
    } catch (err2) {
      console.log('‚ö†Ô∏è exec_sql (sql) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err2?.message || err2);

      // 3) exec ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå sql
      try {
        console.log('üöÄ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡πà‡∏≤‡∏ô RPC: exec (sql)');
        const { data, error } = await supabase.rpc('exec', { sql: sqlContent });
        if (!error) {
          console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ú‡πà‡∏≤‡∏ô RPC exec (sql)');
        } else {
          throw error;
        }
      } catch (err3) {
        console.log('‚ö†Ô∏è exec (sql) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err3?.message || err3);

        // 4) Fallback: ‡πÉ‡∏ä‡πâ HTTP PostgREST ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà /rest/v1/rpc/exec_sql
        try {
          console.log('üåê ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡πà‡∏≤‡∏ô HTTP API: /rest/v1/rpc/exec_sql');
          const payloadSqlQuery = JSON.stringify({ sql_query: sqlContent });
          const resSqlQuery = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${supabaseKey}`,
              'apikey': supabaseKey,
            },
            body: payloadSqlQuery,
          });
          if (resSqlQuery.ok) {
            const json = await resSqlQuery.json().catch(() => ({}));
            console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ú‡πà‡∏≤‡∏ô HTTP API (exec_sql)');
          } else {
            // ‡∏•‡∏≠‡∏á endpoint /rest/v1/rpc/exec ‡πÅ‡∏ó‡∏ô
            console.log('üîÑ ‡∏•‡∏≠‡∏á HTTP API: /rest/v1/rpc/exec');
            const payloadSql = JSON.stringify({ sql: sqlContent });
            const resExec = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${supabaseKey}`,
                'apikey': supabaseKey,
              },
              body: payloadSql,
            });
            if (!resExec.ok) {
              throw new Error(`HTTP ${resExec.status} ${resExec.statusText}`);
            }
            const json2 = await resExec.json().catch(() => ({}));
            console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ú‡πà‡∏≤‡∏ô HTTP API (exec)');
          }
        } catch (httpErr) {
          console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏î‡πâ:', httpErr?.message || httpErr);
          console.log('\nüìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á:');
          console.log('1) ‡πÄ‡∏õ‡∏¥‡∏î Supabase Dashboard');
          console.log('2) ‡πÑ‡∏õ‡∏ó‡∏µ‡πà SQL Editor');
          console.log('3) ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå final-fixed-function.sql');
          console.log('4) ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô');
          process.exit(1);
        }
      }
    }
  }

  console.log('\nüéâ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö LINE notification ‡πÅ‡∏•‡πâ‡∏ß!');

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤ ‡πÜ (‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ test ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å)
  try {
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan (‡∏à‡∏≥‡∏•‡∏≠‡∏á) ...');
    const { data: testData, error: testError } = await supabase.rpc('record_rfid_scan', {
      p_rfid_code: 'TEST-RFID-CODE',
      p_driver_id: 1,
      p_latitude: null,
      p_longitude: null,
      p_location_type: 'go',
    });

    if (testError) {
      console.log('‚ö†Ô∏è Test RPC error:', testError.message);
      console.log('üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤ RFID ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô error ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    } else {
      console.log('‚úÖ Test RPC result:', JSON.stringify(testData, null, 2));
    }
  } catch (e) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ:', e?.message || e);
  }
}

updateRfidFunctionWithLine();