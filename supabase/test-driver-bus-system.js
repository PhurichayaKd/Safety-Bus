const { createClient } = require('@supabase/supabase-js');

// Supabase configuration
const supabaseUrl = 'https://gqyxqxwzjqkqzqzqzqzq.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxeXhxeHd6anFrcXpxenF6cXpxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDUxNzIwMCwiZXhwIjoyMDUwMDkzMjAwfQ.example';

const supabase = createClient(supabaseUrl, supabaseKey);

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const testData = {
  driverId: 1,
  rfidCode: 'TEST001',
  latitude: 13.7563,
  longitude: 100.5018
};

async function testDriverBusSystem() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á driver_bus...');
  console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testData);
  console.log('');

  try {
    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö...');
    const { data: driverStatus, error: statusError } = await supabase
      .rpc('get_driver_current_status', { 
        p_driver_id: testData.driverId 
      });

    if (statusError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö:', statusError);
      return;
    }

    console.log('‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö:', driverStatus);
    console.log('');

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô pickup
    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô pickup...');
    const { data: updatePickup, error: pickupError } = await supabase
      .rpc('update_driver_trip_phase', {
        p_driver_id: testData.driverId,
        p_trip_phase: 'pickup',
        p_latitude: testData.latitude,
        p_longitude: testData.longitude
      });

    if (pickupError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô pickup:', pickupError);
      return;
    }

    console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô pickup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', updatePickup);
    console.log('');

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡πÉ‡∏ô‡πÄ‡∏ü‡∏™ pickup
    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡πÉ‡∏ô‡πÄ‡∏ü‡∏™ pickup...');
    const { data: scanPickup, error: scanPickupError } = await supabase
      .rpc('record_rfid_scan', {
        p_rfid_code: testData.rfidCode,
        p_driver_id: testData.driverId,
        p_latitude: testData.latitude,
        p_longitude: testData.longitude,
        p_location_type: 'pickup'
      });

    if (scanPickupError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID (pickup):', scanPickupError);
    } else {
      console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID (pickup) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', scanPickup);
    }
    console.log('');

    // 4. ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô dropoff
    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô dropoff...');
    await new Promise(resolve => setTimeout(resolve, 2000)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    const { data: updateDropoff, error: dropoffError } = await supabase
      .rpc('update_driver_trip_phase', {
        p_driver_id: testData.driverId,
        p_trip_phase: 'dropoff',
        p_latitude: testData.latitude + 0.001,
        p_longitude: testData.longitude + 0.001
      });

    if (dropoffError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô dropoff:', dropoffError);
      return;
    }

    console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô dropoff ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', updateDropoff);
    console.log('');

    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡πÉ‡∏ô‡πÄ‡∏ü‡∏™ dropoff
    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡πÉ‡∏ô‡πÄ‡∏ü‡∏™ dropoff...');
    const { data: scanDropoff, error: scanDropoffError } = await supabase
      .rpc('record_rfid_scan', {
        p_rfid_code: testData.rfidCode,
        p_driver_id: testData.driverId,
        p_latitude: testData.latitude + 0.001,
        p_longitude: testData.longitude + 0.001,
        p_location_type: 'dropoff'
      });

    if (scanDropoffError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID (dropoff):', scanDropoffError);
    } else {
      console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID (dropoff) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', scanDropoff);
    }
    console.log('');

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥
    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥...');
    const { data: duplicateScan, error: duplicateError } = await supabase
      .rpc('record_rfid_scan', {
        p_rfid_code: testData.rfidCode,
        p_driver_id: testData.driverId,
        p_latitude: testData.latitude + 0.001,
        p_longitude: testData.longitude + 0.001,
        p_location_type: 'dropoff'
      });

    if (duplicateError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥:', duplicateError);
    } else {
      if (duplicateScan.success === false && duplicateScan.already_scanned) {
        console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:', duplicateScan.error);
      } else {
        console.log('‚ö†Ô∏è  ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:', duplicateScan);
      }
    }
    console.log('');

    // 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô...');
    const { data: scanLogs, error: logsError } = await supabase
      .from('rfid_scan_logs')
      .select('*')
      .eq('rfid_code', testData.rfidCode)
      .order('scan_timestamp', { ascending: false })
      .limit(5);

    if (logsError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á log ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô:', logsError);
    } else {
      console.log('‚úÖ Log ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î):');
      scanLogs.forEach((log, index) => {
        console.log(`   ${index + 1}. ${log.scan_timestamp} - ${log.trip_phase} - ${log.scan_result}`);
      });
    }
    console.log('');

    // 8. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification logs
    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification logs...');
    const { data: notificationLogs, error: notifError } = await supabase
      .from('notification_logs')
      .select('*')
      .eq('notification_type', 'rfid_scan')
      .order('created_at', { ascending: false })
      .limit(3);

    if (notifError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á notification logs:', notifError);
    } else {
      console.log('‚úÖ Notification logs (3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î):');
      notificationLogs.forEach((log, index) => {
        console.log(`   ${index + 1}. ${log.created_at} - ${log.status} - ${log.message.substring(0, 50)}...`);
      });
    }
    console.log('');

    console.log('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
    console.log('');
    console.log('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('   ‚úì ‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á driver_bus ‡πÑ‡∏î‡πâ');
    console.log('   ‚úì ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÑ‡∏î‡πâ (pickup/dropoff)');
    console.log('   ‚úì ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô RFID ‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏ü‡∏™‡πÑ‡∏î‡πâ');
    console.log('   ‚úì ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    console.log('   ‚úì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡πÅ‡∏•‡∏∞ notification ‡πÑ‡∏î‡πâ');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function cleanupTestData() {
  console.log('üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
  
  try {
    // ‡∏•‡∏ö scan logs
    await supabase
      .from('rfid_scan_logs')
      .delete()
      .eq('rfid_code', testData.rfidCode);

    // ‡∏•‡∏ö pickup_dropoff records
    await supabase
      .from('pickup_dropoff')
      .delete()
      .eq('driver_id', testData.driverId);

    // ‡∏•‡∏ö notification logs
    await supabase
      .from('notification_logs')
      .delete()
      .eq('notification_type', 'rfid_scan');

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï driver status
    await supabase
      .from('driver_bus')
      .update({ 
        trip_phase: 'pickup',
        current_status: 'inactive'
      })
      .eq('driver_id', testData.driverId);

    console.log('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
  }
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
function showUsage() {
  console.log('üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
  console.log('');
  console.log('1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Supabase URL ‡πÅ‡∏•‡∏∞ Service Role Key ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ');
  console.log('2. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: node test-driver-bus-system.js');
  console.log('3. ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö: node test-driver-bus-system.js --cleanup');
  console.log('');
  console.log('üîß ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:');
  console.log('   ‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå apply-driver-bus-changes.js ‡∏Å‡πà‡∏≠‡∏ô');
  console.log('   ‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö ID 1 ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á driver_bus');
  console.log('   ‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞ RFID card TEST001');
  console.log('');
}

if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--cleanup')) {
    cleanupTestData();
  } else {
    showUsage();
    testDriverBusSystem();
  }
}

module.exports = { testDriverBusSystem, cleanupTestData };