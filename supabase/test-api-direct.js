import fetch from 'node-fetch';
import dotenv from 'dotenv';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const envPath = join(__dirname, '..', 'safety-bus-bot', 'vercel-deploy', '.env.local');

dotenv.config({ path: envPath });

async function testApiDirect() {
  try {
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoint ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...\n');
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const testCases = [
      { rfid_code: '63A17E34', driver_id: 1, location_type: 'go' },
      { rfid_code: 'F3C9DC34', driver_id: 1, location_type: 'go' },
      { rfid_code: 'INVALID123', driver_id: 1, location_type: 'go' } // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ
    ];
    
    const apiUrl = 'https://safety-bus-liff-v4-bi3u3anjx-phurichayakds-projects.vercel.app/api/rfid-scan';
    
    for (let i = 0; i < testCases.length; i++) {
      const testCase = testCases[i];
      console.log(`üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${i + 1}: ${testCase.rfid_code}`);
      
      try {
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(testCase)
        });
        
        const responseText = await response.text();
        console.log(`üìä HTTP Status: ${response.status}`);
        console.log(`üìã Response: ${responseText}`);
        
        if (response.ok) {
          try {
            const jsonData = JSON.parse(responseText);
            if (jsonData.access_granted) {
              console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï');
              if (jsonData.student) {
                console.log(`üë§ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${jsonData.student.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}`);
              }
            } else {
              console.log('‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á: ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï');
            }
          } catch (parseError) {
            console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÑ‡∏î‡πâ');
          }
        } else {
          console.log('‚ùå API Error');
        }
        
      } catch (fetchError) {
        console.error(`‚ùå Network Error: ${fetchError.message}`);
      }
      
      console.log(''.padEnd(50, '-'));
    }
    
    console.log('\nüí° ‡∏™‡∏£‡∏∏‡∏õ:');
    console.log('- ‡∏ñ‡πâ‡∏≤ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö 200 ‡πÅ‡∏•‡∏∞ access_granted: true ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
    console.log('- ‡∏ñ‡πâ‡∏≤ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö 404 ‡∏´‡∏£‡∏∑‡∏≠ access_granted: false ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å');
    console.log('- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Network Error ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

testApiDirect();