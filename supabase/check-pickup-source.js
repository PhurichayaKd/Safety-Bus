import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Load environment variables from the vercel-deploy directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const envPath = join(__dirname, '..', 'safety-bus-bot', 'vercel-deploy', '.env.local');

dotenv.config({ path: envPath });

// Initialize Supabase client
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkPickupSource() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ pickup_source ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n');

  try {
    // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á pickup_dropoff
    const { data, error } = await supabase
      .from('pickup_dropoff')
      .select('pickup_source, event_type, location_type, event_time')
      .not('pickup_source', 'is', null)
      .order('event_time', { ascending: false })
      .limit(10);

    if (error) {
      console.error('‚ùå Error:', error);
      return;
    }

    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á pickup_dropoff:');
    data.forEach((row, index) => {
      console.log(`   ${index + 1}. pickup_source: "${row.pickup_source}" | event_type: ${row.event_type} | location_type: ${row.location_type}`);
    });

    // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ pickup_source ‡∏ó‡∏µ‡πà unique
    const uniqueValues = [...new Set(data.map(row => row.pickup_source))];
    console.log('\n‚úÖ ‡∏Ñ‡πà‡∏≤ pickup_source ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
    uniqueValues.forEach((value, index) => {
      console.log(`   ${index + 1}. "${value}"`);
    });

    // ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ null
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà pickup_source ‡πÄ‡∏õ‡πá‡∏ô null...');
    const testData = {
      student_id: 100014,
      driver_id: 1,
      event_type: 'pickup',
      location_type: 'go',
      event_time: new Date().toISOString(),
      last_scan_time: new Date().toISOString(),
      pickup_source: null,
      gps_latitude: null,
      gps_longitude: null
    };

    const { data: testResult, error: testError } = await supabase
      .from('pickup_dropoff')
      .insert(testData)
      .select()
      .single();

    if (testError) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testError);
    } else {
      console.log('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Record ID:', testResult.record_id);
      
      // ‡∏•‡∏ö record ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await supabase
        .from('pickup_dropoff')
        .delete()
        .eq('record_id', testResult.record_id);
      console.log('üóëÔ∏è ‡∏•‡∏ö record ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    }

  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:', error);
  }
}

checkPickupSource();