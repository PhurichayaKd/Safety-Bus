import { supabase } from './supabaseClient';

export interface ExpiringStudent {
  student_id: number;
  student_name: string;
  service_end_date: string;
  days_remaining: number;
  card_id: number;
  rfid_code: string;
  parent_line_id: string | null;
}

export interface ExpiredCard {
  student_id: number;
  student_name: string;
  card_id: number;
  rfid_code: string;
  service_end_date: string;
  expired_at: string;
  parent_line_id: string | null;
  days_remaining?: number; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö ExpiringStudent
}

export interface ExpiryResult {
  expired_count: number;
  expired_cards: ExpiredCard[];
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 */
export async function expireCards(): Promise<ExpiryResult> {
  try {
    const { data, error } = await supabase.rpc('fn_expire_cards');
    
    if (error) {
      console.error('Error expiring cards:', error);
      throw error;
    }

    const result = data?.[0];
    return {
      expired_count: result?.expired_count || 0,
      expired_cards: result?.expired_cards || []
    };
  } catch (error) {
    console.error('Failed to expire cards:', error);
    throw error;
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å N ‡∏ß‡∏±‡∏ô
 */
export async function getExpiringStudents(daysAhead: number = 7): Promise<ExpiringStudent[]> {
  try {
    const { data, error } = await supabase.rpc('fn_get_expiring_students', {
      days_ahead: daysAhead
    });
    
    if (error) {
      console.error('Error getting expiring students:', error);
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('Failed to get expiring students:', error);
    throw error;
  }
}

/**
 * ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
 */
export async function sendServiceEndNotification(student: ExpiringStudent | ExpiredCard): Promise<boolean> {
  try {
    if (!student.parent_line_id) {
      console.log(`No Line ID found for student ${student.student_name} (${student.student_id})`);
      return false;
    }

    const isExpired = 'expired_at' in student;
    const message = isExpired 
      ? createServiceEndedMessage(student as ExpiredCard)
      : createServiceEndingMessage(student as ExpiringStudent);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô Line API
    const response = await fetch('/api/send-line-message', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        to: student.parent_line_id,
        message: message
      })
    });

    if (!response.ok) {
      throw new Error(`Failed to send Line message: ${response.statusText}`);
    }

    console.log(`Line notification sent to ${student.parent_line_id} for student ${student.student_name}`);
    return true;
  } catch (error) {
    console.error('Failed to send Line notification:', error);
    return false;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
 */
function createServiceEndedMessage(student: ExpiredCard): string {
  return `üöå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á

‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞

‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á ${student.student_name} ‡πÑ‡∏î‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${formatThaiDate(student.service_end_date)}
üé´ ‡∏ö‡∏±‡∏ï‡∏£ RFID: ${student.rfid_code}

‡∏ö‡∏±‡∏ï‡∏£ RFID ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô üôè

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
 */
function createServiceEndingMessage(student: ExpiringStudent): string {
  const daysText = student.days_remaining === 1 ? '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ' : `‡∏≠‡∏µ‡∏Å ${student.days_remaining} ‡∏ß‡∏±‡∏ô`;
  
  return `üöå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á

‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞

‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á ${student.student_name} ‡∏à‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î${daysText}

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${formatThaiDate(student.service_end_date)}
üé´ ‡∏ö‡∏±‡∏ï‡∏£ RFID: ${student.rfid_code}

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ üôè`;
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
 */
function formatThaiDate(dateString: string): string {
  const date = new Date(dateString);
  const thaiMonths = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  
  const day = date.getDate();
  const month = thaiMonths[date.getMonth()];
  const year = date.getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
  
  return `${day} ${month} ${year}`;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 */
export async function checkAndNotifyExpiringStudents(daysAhead: number = 1): Promise<{
  notified: number;
  failed: number;
  students: ExpiringStudent[];
}> {
  try {
    const expiringStudents = await getExpiringStudents(daysAhead);
    let notified = 0;
    let failed = 0;

    for (const student of expiringStudents) {
      const success = await sendServiceEndNotification(student);
      if (success) {
        notified++;
      } else {
        failed++;
      }
      
      // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    return {
      notified,
      failed,
      students: expiringStudents
    };
  } catch (error) {
    console.error('Failed to check and notify expiring students:', error);
    throw error;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 */
export async function expireCardsAndNotify(): Promise<{
  expired: ExpiryResult;
  notified: number;
  failed: number;
}> {
  try {
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const expiryResult = await expireCards();
    
    let notified = 0;
    let failed = 0;

    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    for (const expiredCard of expiryResult.expired_cards) {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Line ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
      const { data: parentData } = await supabase
        .from('parent_line_links')
        .select('line_display_id')
        .eq('student_id', expiredCard.student_id)
        .maybeSingle();

      if (parentData?.line_display_id) {
        const cardWithLineId = {
          ...expiredCard,
          parent_line_id: parentData.line_display_id
        };
        
        const success = await sendServiceEndNotification(cardWithLineId);
        if (success) {
          notified++;
        } else {
          failed++;
        }
      } else {
        failed++;
      }
      
      // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    return {
      expired: expiryResult,
      notified,
      failed
    };
  } catch (error) {
    console.error('Failed to expire cards and notify:', error);
    throw error;
  }
}