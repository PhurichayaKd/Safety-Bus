const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

async function fixIncompleteLineIds() {
  console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE User ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå...\n');
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö student_line_links ‡∏ó‡∏µ‡πà‡∏°‡∏µ line_display_id ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ line_user_id
    const { data: incompleteStudents, error: studentError } = await supabase
      .from('student_line_links')
      .select('*')
      .eq('active', true)
      .not('line_display_id', 'is', null)
      .is('line_user_id', null);
      
    if (studentError) {
      console.error('Error fetching incomplete student links:', studentError);
      return;
    }
    
    console.log(`üìä ‡∏û‡∏ö Students ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ${incompleteStudents.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parent_line_links ‡∏ó‡∏µ‡πà‡∏°‡∏µ line_display_id ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ line_user_id
    const { data: incompleteParents, error: parentError } = await supabase
      .from('parent_line_links')
      .select('*')
      .eq('active', true)
      .not('line_display_id', 'is', null)
      .is('line_user_id', null);
      
    if (parentError) {
      console.error('Error fetching incomplete parent links:', parentError);
      return;
    }
    
    console.log(`üìä ‡∏û‡∏ö Parents ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ${incompleteParents.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    if (incompleteStudents.length > 0) {
      console.log('\nüîç Students ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      incompleteStudents.forEach((link, index) => {
        console.log(`${index + 1}. Student ID: ${link.student_id}, Display ID: ${link.line_display_id}`);
      });
    }
    
    if (incompleteParents.length > 0) {
      console.log('\nüîç Parents ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      incompleteParents.forEach((link, index) => {
        console.log(`${index + 1}. Parent ID: ${link.parent_id}, Display ID: ${link.line_display_id}`);
      });
    }
    
    console.log('\n‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ LINE User ID ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏ó‡∏µ‡πà Bot');
    console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏î‡πÜ ‡∏°‡∏≤‡∏ó‡∏µ‡πà Bot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE User ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏ó‡∏£‡∏≤‡∏ö LINE User ID)
    console.log('\nüìù ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ:');
    console.log('fixSpecificLineId(displayId, lineUserId, userType)');
    
  } catch (error) {
    console.error('Error:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞
async function fixSpecificLineId(displayId, lineUserId, userType) {
  try {
    console.log(`üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${userType}: Display ID: ${displayId}, LINE User ID: ${lineUserId}`);
    
    const tableName = userType === 'student' ? 'student_line_links' : 'parent_line_links';
    
    const { error } = await supabase
      .from(tableName)
      .update({
        line_user_id: lineUserId,
        linked_at: new Date().toISOString()
      })
      .eq('line_display_id', displayId)
      .eq('active', true);
      
    if (error) {
      console.error(`Error updating ${userType}:`, error);
      return false;
    }
    
    console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${userType} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    return true;
    
  } catch (error) {
    console.error('Error:', error);
    return false;
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
fixIncompleteLineIds().catch(console.error);

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
module.exports = { fixSpecificLineId };