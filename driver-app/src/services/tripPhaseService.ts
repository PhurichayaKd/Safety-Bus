import AsyncStorage from '@react-native-async-storage/async-storage';

// Base URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
const API_BASE_URL = process.env.EXPO_PUBLIC_API_BASE_URL || 'https://safety-bus-liff-v4-new.vercel.app/api';

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response
interface TripPhaseUpdateResponse {
  success: boolean;
  error?: string;
  trip_phase?: string;
  current_status?: string;
  driver_id?: number;
}

interface TripPhaseStatusResponse {
  success: boolean;
  error?: string;
  trip_phase?: string;
  current_status?: string;
  driver_id?: number;
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE
 * @param driverId ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 * @param tripPhase 'go' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠ 'return' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
 * @param currentStatus ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 'active', 'pickup', 'dropoff')
 * @param location ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (optional)
 * @param notes ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (optional)
 * @returns ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export async function updateTripPhase(
  driverId: number,
  tripPhase: 'go' | 'return',
  currentStatus: string = 'active',
  location?: string,
  notes?: string
): Promise<TripPhaseUpdateResponse> {
  try {
    console.log(`üîÑ Updating trip_phase to ${tripPhase} for driver ${driverId}`);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
    const response = await fetch(`${API_BASE_URL}/get-driver-status`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        driver_id: driverId,
        trip_phase: tripPhase,
        current_status: currentStatus,
      }),
    });

    const result = await response.json();
    
    if (response.ok && result.success) {
      console.log('‚úÖ Trip phase updated successfully:', result);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AsyncStorage ‡∏î‡πâ‡∏ß‡∏¢
      await AsyncStorage.setItem('trip_phase', tripPhase);
      
      // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE
      try {
        console.log('üì§ Sending driver status notification...');
        const notificationResponse = await fetch(`${API_BASE_URL}/driver-status-notification`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            driver_id: driverId,
            trip_phase: tripPhase,
            current_status: currentStatus,
            location: location,
            notes: notes
          }),
        });

        const notificationResult = await notificationResponse.json();
        
        if (notificationResponse.ok && notificationResult.success) {
          console.log('‚úÖ Driver status notification sent successfully:', notificationResult.summary);
        } else {
          console.error('‚ùå Failed to send driver status notification:', notificationResult.error);
        }
      } catch (notificationError) {
        console.error('‚ùå Error sending driver status notification:', notificationError);
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      }
      
      return result;
    } else {
      console.error('‚ùå Failed to update trip phase:', result);
      return {
        success: false,
        error: result.error || 'Failed to update trip phase',
      };
    }
  } catch (error) {
    console.error('‚ùå Error updating trip phase:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred',
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ trip_phase ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 * @param driverId ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 * @returns ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ trip_phase ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
export async function getCurrentTripPhase(driverId: number): Promise<TripPhaseStatusResponse> {
  try {
    console.log(`üì° Getting current trip_phase for driver ${driverId}`);
    
    const response = await fetch(`${API_BASE_URL}/get-driver-status?driver_id=${driverId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    const result = await response.json();
    
    if (response.ok && result.success) {
      console.log('‚úÖ Got current trip phase:', result);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AsyncStorage ‡∏î‡πâ‡∏ß‡∏¢
      if (result.trip_phase) {
        await AsyncStorage.setItem('trip_phase', result.trip_phase);
      }
      
      return result;
    } else {
      console.error('‚ùå Failed to get current trip phase:', result);
      return {
        success: false,
        error: result.error || 'Failed to get current trip phase',
      };
    }
  } catch (error) {
    console.error('‚ùå Error getting current trip phase:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred',
    };
  }
}

/**
 * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
 * @param driverId ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 * @param currentStatus ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * @param location ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (optional)
 * @param notes ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (optional)
 * @returns ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export async function updateDriverStatus(
  driverId: number,
  currentStatus: string,
  location?: string,
  notes?: string
): Promise<TripPhaseUpdateResponse> {
  try {
    console.log(`üîÑ Updating driver status to ${currentStatus} for driver ${driverId}`);
    
    // ‡∏î‡∏∂‡∏á trip_phase ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å AsyncStorage
    const currentTripPhase = await AsyncStorage.getItem('trip_phase') || 'go';
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
    const response = await fetch(`${API_BASE_URL}/get-driver-status`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        driver_id: driverId,
        trip_phase: currentTripPhase,
        current_status: currentStatus,
      }),
    });

    const result = await response.json();
    
    if (response.ok && result.success) {
      console.log('‚úÖ Driver status updated successfully:', result);
      
      // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE
      try {
        console.log('üì§ Sending driver status notification...');
        const notificationResponse = await fetch(`${API_BASE_URL}/driver-status-notification`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            driver_id: driverId,
            trip_phase: currentTripPhase,
            current_status: currentStatus,
            location: location,
            notes: notes
          }),
        });

        const notificationResult = await notificationResponse.json();
        
        if (notificationResponse.ok && notificationResult.success) {
          console.log('‚úÖ Driver status notification sent successfully:', notificationResult.summary);
        } else {
          console.error('‚ùå Failed to send driver status notification:', notificationResult.error);
        }
      } catch (notificationError) {
        console.error('‚ùå Error sending driver status notification:', notificationError);
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      }
      
      return result;
    } else {
      console.error('‚ùå Failed to update driver status:', result);
      return {
        success: false,
        error: result.error || 'Failed to update driver status',
      };
    }
  } catch (error) {
    console.error('‚ùå Error updating driver status:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred',
    };
  }
}