import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

export default async function handler(req, res) {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { linkCode, lineUserId } = req.body;

    if (!linkCode || !lineUserId) {
      return res.status(400).json({ 
        success: false, 
        error: 'Missing linkCode or lineUserId' 
      });
    }

    console.log(`üîó Verifying link code: ${linkCode} for LINE User: ${lineUserId}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE User ID
    const lineIdPattern = /^U[a-f0-9]{32}$/i;
    if (!lineIdPattern.test(lineUserId)) {
      return res.status(400).json({
        success: false,
        error: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ link code ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_link_tokens
    const { data: studentToken, error: studentError } = await supabase
      .from('student_link_tokens')
      .select(`
        *,
        students (
          student_id,
          student_name,
          grade,
          parent_id
        )
      `)
      .eq('token', linkCode)
      .is('used_at', null)
      .single();

    if (studentToken && !studentError) {
      // ‡∏û‡∏ö token ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
      const student = studentToken.students;
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï student_line_links
      const { error: updateStudentError } = await supabase
        .from('student_line_links')
        .upsert({
          student_id: student.student_id,
          line_user_id: lineUserId,
          line_display_id: `student_${student.student_id}`,
          active: true,
          linked_at: new Date().toISOString()
        }, {
          onConflict: 'student_id'
        });

      if (updateStudentError) {
        console.error('Error updating student line link:', updateStudentError);
        return res.status(500).json({
          success: false,
          error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
        });
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï parent_line_links ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ parent_id
      if (student.parent_id) {
        const { error: updateParentError } = await supabase
          .from('parent_line_links')
          .upsert({
            parent_id: student.parent_id,
            student_id: student.student_id,
            line_user_id: lineUserId,
            line_display_id: `parent_${student.parent_id}`,
            active: true,
            linked_at: new Date().toISOString()
          }, {
            onConflict: 'parent_id,student_id'
          });

        if (updateParentError) {
          console.error('Error updating parent line link:', updateParentError);
          // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ student link ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        }
      }

      // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤ token ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
      await supabase
        .from('student_link_tokens')
        .update({ used_at: new Date().toISOString() })
        .eq('token', linkCode);

      return res.status(200).json({
        success: true,
        message: `‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student.student_name}\n‡∏ä‡∏±‡πâ‡∏ô: ${student.grade}`,
        userType: 'student',
        userData: {
          student_id: student.student_id,
          student_name: student.student_name,
          grade: student.grade
        }
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ link code ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á parent_link_tokens
    const { data: parentToken, error: parentError } = await supabase
      .from('parent_link_tokens')
      .select(`
        *,
        parents (
          parent_id,
          parent_name,
          phone_number
        ),
        students (
          student_id,
          student_name,
          grade
        )
      `)
      .eq('token', linkCode)
      .is('used_at', null)
      .single();

    if (parentToken && !parentError) {
      // ‡∏û‡∏ö token ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
      const parent = parentToken.parents;
      const student = parentToken.students;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï parent_line_links
      const { error: updateParentError } = await supabase
        .from('parent_line_links')
        .upsert({
          parent_id: parent.parent_id,
          student_id: student.student_id,
          line_user_id: lineUserId,
          line_display_id: `parent_${parent.parent_id}`,
          active: true,
          linked_at: new Date().toISOString()
        }, {
          onConflict: 'parent_id,student_id'
        });

      if (updateParentError) {
        console.error('Error updating parent line link:', updateParentError);
        return res.status(500).json({
          success: false,
          error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á'
        });
      }

      // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤ token ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
      await supabase
        .from('parent_link_tokens')
        .update({ used_at: new Date().toISOString() })
        .eq('token', linkCode);

      return res.status(200).json({
        success: true,
        message: `‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${parent.parent_name}\n‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student.student_name} ‡∏ä‡∏±‡πâ‡∏ô ${student.grade}`,
        userType: 'parent',
        userData: {
          parent_id: parent.parent_id,
          parent_name: parent.parent_name,
          student_id: student.student_id,
          student_name: student.student_name,
          grade: student.grade
        }
      });
    }

    // ‡πÑ‡∏°‡πà‡∏û‡∏ö link code ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    return res.status(404).json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
    });

  } catch (error) {
    console.error('Error in verify-link-code:', error);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    });
  }
}