import crypto from 'crypto';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const LINE_CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET;
const WEBHOOK_URL = 'http://localhost:3000/api/webhook';

// ‡πÉ‡∏ä‡πâ LINE User ID ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
// ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
const REAL_USER_ID = 'U1234567890abcdef1234567890abcdef'; // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ User ID ‡∏à‡∏£‡∏¥‡∏á

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE signature ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
function createLineSignature(body, secret) {
  return crypto
    .createHmac('SHA256', secret)
    .update(body, 'utf8')
    .digest('base64');
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 */
async function testContactDriverMenu() {
  console.log('üß™ Testing Contact Driver Menu with Real User ID...');
  console.log('üë§ User ID:', REAL_USER_ID);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á postback event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
  const postbackEvent = {
    events: [
      {
        type: 'postback',
        replyToken: 'test-reply-token-' + Date.now(),
        source: {
          userId: REAL_USER_ID,
          type: 'user'
        },
        postback: {
          data: 'action=contact_driver'
        },
        timestamp: Date.now()
      }
    ]
  };

  const body = JSON.stringify(postbackEvent);
  const signature = createLineSignature(body, LINE_CHANNEL_SECRET);

  console.log('üì¶ Request body:', body);
  console.log('üîê Signature:', signature);

  try {
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Line-Signature': signature
      },
      body: body
    });

    console.log('üìä Response status:', response.status);
    const responseText = await response.text();
    console.log('üìÑ Response body:', responseText);

    if (response.status === 200) {
      console.log('‚úÖ Contact driver menu test successful!');
    } else {
      console.log('‚ùå Contact driver menu test failed!');
    }

  } catch (error) {
    console.error('‚ùå Test error:', error);
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
 */
async function testTextMessage() {
  console.log('\nüß™ Testing Text Message with Real User ID...');
  console.log('üë§ User ID:', REAL_USER_ID);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á text message event
  const textEvent = {
    events: [
      {
        type: 'message',
        replyToken: 'test-reply-token-text-' + Date.now(),
        source: {
          userId: REAL_USER_ID,
          type: 'user'
        },
        message: {
          type: 'text',
          text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö'
        },
        timestamp: Date.now()
      }
    ]
  };

  const body = JSON.stringify(textEvent);
  const signature = createLineSignature(body, LINE_CHANNEL_SECRET);

  console.log('üì¶ Request body:', body);
  console.log('üîê Signature:', signature);

  try {
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Line-Signature': signature
      },
      body: body
    });

    console.log('üìä Response status:', response.status);
    const responseText = await response.text();
    console.log('üìÑ Response body:', responseText);

    if (response.status === 200) {
      console.log('‚úÖ Text message test successful!');
    } else {
      console.log('‚ùå Text message test failed!');
    }

  } catch (error) {
    console.error('‚ùå Test error:', error);
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function runTests() {
  console.log('üöÄ Starting Contact Driver Tests...');
  console.log('üîß Environment check:');
  console.log('- LINE_CHANNEL_SECRET:', !!LINE_CHANNEL_SECRET);
  console.log('- WEBHOOK_URL:', WEBHOOK_URL);
  
  if (!LINE_CHANNEL_SECRET) {
    console.error('‚ùå LINE_CHANNEL_SECRET not found in environment variables');
    process.exit(1);
  }

  await testContactDriverMenu();
  await new Promise(resolve => setTimeout(resolve, 2000)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  await testTextMessage();
  
  console.log('\n‚úÖ All tests completed!');
  console.log('\nüìù Note: ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà REAL_USER_ID ‡∏î‡πâ‡∏ß‡∏¢ User ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
}

runTests().catch(console.error);