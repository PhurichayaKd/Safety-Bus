require('dotenv').config({ path: '../safety-bus-bot/vercel-deploy/.env.local' });

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testFixedCasting() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç data type casting...\n');

  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ RFID code ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏
    const testData = {
      p_rfid_code: 'F3C9DC34',
      p_driver_id: 1,
      p_latitude: 13.7563,
      p_longitude: 100.5018,
      p_location_type: 'go'
    };

    console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testData);
    console.log('\nüîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan...');

    const { data, error } = await supabase.rpc('record_rfid_scan', testData);

    if (error) {
      console.log('‚ùå Error:', error.message);
      
      if (error.message.includes('operator does not exist')) {
        console.log('\n‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ data type casting!');
        console.log('\nüìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
        console.log('1. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Supabase Dashboard > SQL Editor');
        console.log('2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå fixed-pickup-dropoff-function.sql');
        console.log('3. ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ:');
        console.log('\n--- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç data type casting ---');
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
        console.log(`
CREATE OR REPLACE FUNCTION record_rfid_scan(
    p_rfid_code VARCHAR,
    p_driver_id INTEGER,
    p_latitude DECIMAL DEFAULT NULL,
    p_longitude DECIMAL DEFAULT NULL,
    p_location_type VARCHAR DEFAULT 'go'
)
RETURNS JSON
LANGUAGE plpgsql
AS $$
DECLARE
    v_student_id INTEGER;
    v_card_status VARCHAR;
    v_student_name VARCHAR;
    v_scan_time TIMESTAMPTZ;
    v_event_local_date DATE;
BEGIN
    v_scan_time := NOW();
    v_event_local_date := (v_scan_time AT TIME ZONE 'Asia/Bangkok')::DATE;
    
    SELECT 
        rca.student_id, rc.status, s.student_name
    INTO 
        v_student_id, v_card_status, v_student_name
    FROM rfid_cards rc
    LEFT JOIN rfid_card_assignments rca ON rc.card_id = rca.card_id 
        AND rca.is_active = true
        AND rca.valid_from <= v_scan_time
        AND (rca.valid_to IS NULL OR rca.valid_to >= v_scan_time)
    LEFT JOIN students s ON rca.student_id = s.student_id
    WHERE rc.rfid_code = p_rfid_code::VARCHAR
        AND rc.is_active = true;

    IF v_card_status IS NULL THEN
        RETURN json_build_object('success', false, 'error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£ RFID ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    END IF;

    IF v_card_status NOT IN ('assigned', 'available') THEN
        RETURN json_build_object('success', false, 'error', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ' || v_card_status);
    END IF;

    INSERT INTO pickup_dropoff (
        student_id, driver_id, event_time, event_type, gps_latitude, gps_longitude,
        last_scan_time, location_type, pickup_source, event_local_date
    ) VALUES (
        v_student_id, p_driver_id, v_scan_time, 'rfid_scan', p_latitude, p_longitude,
        v_scan_time, p_location_type::VARCHAR, 'rfid_device', v_event_local_date
    );

    UPDATE rfid_cards SET last_seen_at = v_scan_time WHERE rfid_code = p_rfid_code::VARCHAR;

    RETURN json_build_object(
        'success', true, 'message', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        'rfid_code', p_rfid_code, 'student_id', v_student_id, 'student_name', v_student_name
    );

EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('success', false, 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ' || SQLERRM);
END;
$$;
        `);
        console.log('--- ‡∏à‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ---\n');
        
      } else if (error.message.includes('rfid_scan_logs')) {
        console.log('\n‚ö†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï - ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_scan_logs!');
      } else {
        console.log('‚ö†Ô∏è Error ‡∏≠‡∏∑‡πà‡∏ô:', error.message);
      }
    } else {
      console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(data, null, 2));
      
      if (data && data.success) {
        console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        console.log(`üë§ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${data.student_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'} (ID: ${data.student_id})`);
        console.log(`üöå ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${data.driver_id}`);
        console.log(`üìç ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: ${data.location_type}`);
        console.log(`üîñ RFID Code: ${data.rfid_code}`);
        console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${data.scan_time}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô pickup_dropoff
        console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô pickup_dropoff...');
        const { data: pickupData, error: pickupError } = await supabase
          .from('pickup_dropoff')
          .select('*')
          .eq('event_type', 'rfid_scan')
          .eq('driver_id', testData.p_driver_id)
          .order('event_time', { ascending: false })
          .limit(3);

        if (pickupData && pickupData.length > 0) {
          console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
          pickupData.forEach((record, index) => {
            console.log(`\n--- Record ${index + 1} ---`);
            console.log(`Record ID: ${record.record_id}`);
            console.log(`Student ID: ${record.student_id}`);
            console.log(`Event Type: ${record.event_type}`);
            console.log(`Location Type: ${record.location_type}`);
            console.log(`Event Time: ${record.event_time}`);
            console.log(`GPS: ${record.gps_latitude}, ${record.gps_longitude}`);
            console.log(`Pickup Source: ${record.pickup_source}`);
          });
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification_logs
        console.log('\nüì¨ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification logs...');
        const { data: notifData, error: notifError } = await supabase
          .from('notification_logs')
          .select('*')
          .eq('notification_type', 'rfid_scan_success')
          .eq('recipient_id', testData.p_driver_id)
          .order('created_at', { ascending: false })
          .limit(1);

        if (notifData && notifData.length > 0) {
          const notif = notifData[0];
          console.log('‚úÖ Notification log:');
          console.log(`   Message: ${notif.message}`);
          console.log(`   Status: ${notif.status}`);
          console.log(`   Created: ${notif.created_at}`);
        }
        
      } else {
        console.log('\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data.error);
      }
    }

  } catch (error) {
    console.error('‚ùå Unexpected error:', error.message);
  }
}

testFixedCasting();