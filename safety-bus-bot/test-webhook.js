// test-webhook.js
// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö webhook endpoint ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ events ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤

import crypto from 'crypto';

const baseUrl = 'http://localhost:3000';
const channelSecret = '372a023fa2c1575676cfedd3f2d329b9';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE webhook
function createSignature(body, secret) {
  return crypto
    .createHmac('sha256', secret)
    .update(body)
    .digest('base64');
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö webhook endpoint
async function testWebhookFixed() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Webhook ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
  console.log('=' .repeat(60));
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: Text message "‡πÄ‡∏°‡∏ô‡∏π"
  console.log('\nüìç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: Text message "‡πÄ‡∏°‡∏ô‡∏π"');
  
  const menuEvent = {
    events: [
      {
        type: 'message',
        message: {
          type: 'text',
          text: '‡πÄ‡∏°‡∏ô‡∏π'
        },
        source: {
          userId: 'U123456789abcdef'
        },
        replyToken: 'test-reply-token-menu'
      }
    ]
  };
  
  const menuBody = JSON.stringify(menuEvent);
  const menuSignature = createSignature(menuBody, channelSecret);
  
  try {
    const menuResponse = await fetch(`${baseUrl}/webhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Line-Signature': menuSignature
      },
      body: menuBody
    });
    
    console.log(`‚úÖ Menu Status: ${menuResponse.status}`);
    const menuResult = await menuResponse.json();
    console.log(`‚úÖ Menu Response:`, menuResult);
    
  } catch (error) {
    console.log(`‚ùå Menu Error: ${error.message}`);
  }
  
  // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: Student ID input
  console.log('\nüìç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: Student ID input "246662"');
  
  const studentIdEvent = {
    events: [
      {
        type: 'message',
        message: {
          type: 'text',
          text: '246662'
        },
        source: {
          userId: 'U123456789abcdef'
        },
        replyToken: 'test-reply-token-student'
      }
    ]
  };
  
  const studentBody = JSON.stringify(studentIdEvent);
  const studentSignature = createSignature(studentBody, channelSecret);
  
  try {
    const studentResponse = await fetch(`${baseUrl}/webhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Line-Signature': studentSignature
      },
      body: studentBody
    });
    
    console.log(`‚úÖ Student ID Status: ${studentResponse.status}`);
    const studentResult = await studentResponse.json();
    console.log(`‚úÖ Student ID Response:`, studentResult);
    
  } catch (error) {
    console.log(`‚ùå Student ID Error: ${error.message}`);
  }
  
  // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 3: Postback event - main menu
  console.log('\nüìç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 3: Postback event - main menu');
  
  const postbackEvent = {
    events: [
      {
        type: 'postback',
        postback: {
          data: 'action=main_menu'
        },
        source: {
          userId: 'U123456789abcdef'
        },
        replyToken: 'test-reply-token-postback'
      }
    ]
  };
  
  const postbackBody = JSON.stringify(postbackEvent);
  const postbackSignature = createSignature(postbackBody, channelSecret);
  
  try {
    const postbackResponse = await fetch(`${baseUrl}/webhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Line-Signature': postbackSignature
      },
      body: postbackBody
    });
    
    console.log(`‚úÖ Postback Status: ${postbackResponse.status}`);
    const postbackResult = await postbackResponse.json();
    console.log(`‚úÖ Postback Response:`, postbackResult);
    
  } catch (error) {
    console.log(`‚ùå Postback Error: ${error.message}`);
  }
  
  // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 4: Postback event - history
  console.log('\nüìç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 4: Postback event - history');
  
  const historyEvent = {
    events: [
      {
        type: 'postback',
        postback: {
          data: 'action=history'
        },
        source: {
          userId: 'U123456789abcdef'
        },
        replyToken: 'test-reply-token-history'
      }
    ]
  };
  
  const historyBody = JSON.stringify(historyEvent);
  const historySignature = createSignature(historyBody, channelSecret);
  
  try {
    const historyResponse = await fetch(`${baseUrl}/webhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Line-Signature': historySignature
      },
      body: historyBody
    });
    
    console.log(`‚úÖ History Status: ${historyResponse.status}`);
    const historyResult = await historyResponse.json();
    console.log(`‚úÖ History Response:`, historyResult);
    
  } catch (error) {
    console.log(`‚ùå History Error: ${error.message}`);
  }
  
  console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
  console.log('=' .repeat(60));
  console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ pushMessage ‡πÅ‡∏ó‡∏ô replyMessage');
  console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° replyToken parameter ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sendMainMenu ‡πÅ‡∏•‡∏∞ sendLeaveMenu');
  console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sendMessageWithQuickReply ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á reply ‡πÅ‡∏•‡∏∞ push');
  console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á replyToken');
  console.log('\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:');
  console.log('1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô LINE app ‡∏à‡∏£‡∏¥‡∏á');
  console.log('2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bot ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô');
  console.log('3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö server logs ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
}

testWebhookFixed().catch(console.error);