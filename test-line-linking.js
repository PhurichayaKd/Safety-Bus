const { createClient } = require('@supabase/supabase-js');

// р╣Гр╕Кр╣Йр╕Др╣Ир╕▓ Supabase р╕Ир╕гр╕┤р╕З
const supabaseUrl = 'https://ugkxolufzlnvjsvtpxhp.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVna3hvbHVmemxudmpzdnRweGhwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwMjE0NzAsImV4cCI6MjA2ODU5NzQ3MH0.lTYy0XgabeQgrNT6jzYUaJzB1GnkuU9CiSrd0fCBEEE';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testLineLinking() {
  try {
    console.log('ЁЯзк Testing LINE linking system...\n');

    // 1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕Вр╕нр╕З LINE links
    console.log('ЁЯУК Current LINE linking status:');
    
    const { data: studentLinks, error: studentError } = await supabase
      .from('student_line_links')
      .select('*')
      .eq('active', true);

    const { data: parentLinks, error: parentError } = await supabase
      .from('parent_line_links')
      .select('*')
      .eq('active', true);

    if (studentError || parentError) {
      console.error('тЭМ Error fetching current links:', { studentError, parentError });
      return;
    }

    console.log(`ЁЯУЪ Student links: ${studentLinks.length} total`);
    const studentsWithLineId = studentLinks.filter(link => link.line_user_id && link.line_user_id !== 'null');
    console.log(`   - With LINE User ID: ${studentsWithLineId.length}`);
    console.log(`   - Without LINE User ID: ${studentLinks.length - studentsWithLineId.length}`);

    console.log(`ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Parent links: ${parentLinks.length} total`);
    const parentsWithLineId = parentLinks.filter(link => link.line_user_id && link.line_user_id !== 'null');
    console.log(`   - With LINE User ID: ${parentsWithLineId.length}`);
    console.log(`   - Without LINE User ID: ${parentLinks.length - parentsWithLineId.length}`);

    // 2. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ link tokens р╕Чр╕╡р╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ
    console.log('\nЁЯОл Available Link Tokens:');
    
    const { data: studentTokens } = await supabase
      .from('student_link_tokens')
      .select(`
        token,
        students(student_id, student_name, grade)
      `)
      .is('used_at', null)
      .order('created_at', { ascending: false });

    const { data: parentTokens } = await supabase
      .from('parent_link_tokens')
      .select(`
        token,
        parents(parent_id, parent_name)
      `)
      .is('used_at', null)
      .order('created_at', { ascending: false });

    console.log(`ЁЯУЪ Student tokens available: ${studentTokens?.length || 0}`);
    console.log(`ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Parent tokens available: ${parentTokens?.length || 0}`);

    // 3. р╕Чр╕Фр╕кр╕нр╕Ъ API verify-link-code
    console.log('\nЁЯФЧ Testing verify-link-code API...');
    
    if (studentTokens && studentTokens.length > 0) {
      const testToken = studentTokens[0].token;
      const testLineUserId = 'U' + Math.random().toString(36).substring(2, 15); // р╕кр╕гр╣Йр╕▓р╕З fake LINE User ID
      
      console.log(`Testing with student token: ${testToken}`);
      console.log(`Fake LINE User ID: ${testLineUserId}`);
      
      try {
        const response = await fetch('https://safety-bus-liff-v4-new.vercel.app/api/verify-link-code', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            linkCode: testToken,
            lineUserId: testLineUserId
          })
        });

        const result = await response.json();
        console.log('тЬЕ API Response:', result);
        
        if (result.success) {
          console.log('ЁЯОЙ Link verification successful!');
          
          // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ LINE User ID р╕Цр╕╣р╕Бр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕гр╕╖р╕нр╣Др╕бр╣И
          const { data: updatedLink } = await supabase
            .from('student_line_links')
            .select('*')
            .eq('line_user_id', testLineUserId)
            .single();
            
          if (updatedLink) {
            console.log('тЬЕ LINE User ID saved to database successfully');
          } else {
            console.log('тЭМ LINE User ID not found in database');
          }
        }
      } catch (error) {
        console.error('тЭМ API test failed:', error.message);
        console.log('ЁЯТб Make sure the Vercel app is deployed and accessible at https://safety-bus-liff-v4-new.vercel.app');
      }
    }

    // 4. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕кр╣Ир╕З notification (р╕Ир╕│р╕ер╕нр╕З)
    console.log('\nЁЯУ▒ Testing notification system...');
    
    // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╕бр╕╡ LINE User ID
    const usersWithLineId = [
      ...studentsWithLineId.map(link => ({
        type: 'student',
        line_user_id: link.line_user_id,
        student_id: link.student_id
      })),
      ...parentsWithLineId.map(link => ({
        type: 'parent',
        line_user_id: link.line_user_id,
        parent_id: link.parent_id
      }))
    ];

    console.log(`ЁЯУК Users ready for notifications: ${usersWithLineId.length}`);
    
    if (usersWithLineId.length > 0) {
      console.log('тЬЕ Notification system ready');
      console.log('ЁЯУЛ Users with LINE User IDs:');
      usersWithLineId.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.type} - LINE ID: ${user.line_user_id}`);
      });
    } else {
      console.log('тЪая╕П  No users with LINE User IDs found');
      console.log('ЁЯТб Users need to link their accounts using the tokens above');
    }

    // 5. р╣Бр╕кр╕Фр╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ
    console.log('\nЁЯУЛ Testing Instructions:');
    console.log('1. ЁЯдЦ р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Юр╕╖р╣Ир╕нр╕Щ LINE Bot');
    console.log('2. ЁЯОл р╕кр╣Ир╕Зр╕гр╕лр╕▒р╕кр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕вр╕З (token) р╣Гр╕Фр╣Ж р╕Ир╕▓р╕Бр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Вр╣Йр╕▓р╕Зр╕Хр╣Йр╕Щ');
    console.log('3. тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕гр╕░р╕Ър╕Ър╕Хр╕нр╕Ър╕Бр╕ер╕▒р╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕вр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И');
    console.log('4. ЁЯЪи р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕кр╣Ир╕З emergency notification');
    console.log('5. ЁЯУК р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ notification logs р╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е');

    console.log('\nЁЯФз Next Steps:');
    console.log('- р╕гр╕▒р╕Щр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Щр╕╡р╣Йр╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕Зр╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╕бр╕╡р╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕вр╕З LINE User ID');
    console.log('- р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕кр╣Ир╕З notification р╕Ир╕гр╕┤р╕Зр╕Ьр╣Ир╕▓р╕Щ emergency system');
    console.log('- р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ logs р╣Ар╕Юр╕╖р╣Ир╕нр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕зр╣Ир╕▓р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З');

  } catch (error) {
    console.error('тЭМ Error in testLineLinking:', error);
  }
}

testLineLinking();