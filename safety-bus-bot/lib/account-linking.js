// lib/account-linking.js
import { supabase } from './db.js';
import { lineClient } from './line.js';
import { issueToken, consumeToken } from './tokens.js';
import { validateStudentId, validatePhoneNumber } from './validation.js';
import moment from 'moment';

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 * @param {string} parentId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
 * @param {string} studentId - ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô
 */
async function createLinkToken(parentId, studentId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const { data: parent, error: parentError } = await supabase
      .from('parents')
      .select('id, parent_name, parent_phone')
      .eq('id', parentId)
      .single();
    
    if (parentError || !parent) {
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á'
      };
    }
    
    const { data: student, error: studentError } = await supabase
      .from('students')
      .select('id, student_id, student_name, parent_id')
      .eq('student_id', studentId)
      .single();
    
    if (studentError || !student) {
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (student.parent_id !== parentId) {
      return {
        success: false,
        error: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏•‡∏π‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ'
      };
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô
    const tokenResult = await issueToken(parentId, 'account_link', {
      student_id: studentId,
      student_name: student.student_name,
      parent_name: parent.parent_name
    });
    
    if (!tokenResult.success) {
      return tokenResult;
    }
    
    return {
      success: true,
      token: tokenResult.token,
      expires_at: tokenResult.expires_at,
      link_url: `${process.env.BASE_URL}/link?token=${tokenResult.token}`,
      student_name: student.student_name,
      parent_name: parent.parent_name
    };
    
  } catch (error) {
    console.error('Error creating link token:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô'
    };
  }
}

/**
 * ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
 * @param {string} lineUserId - LINE User ID
 * @param {string} token - ‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 */
async function linkLineAccount(lineUserId, token) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô
    const tokenResult = await consumeToken(token, 'account_link');
    
    if (!tokenResult.success) {
      return {
        success: false,
        error: tokenResult.error || '‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏'
      };
    }
    
    const { parent_id, payload } = tokenResult;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE User ID ‡∏ô‡∏µ‡πâ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: existingLink } = await supabase
      .from('parent_line_links')
      .select('link_id, parent_id, active')
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();
    
    if (existingLink) {
      return {
        success: false,
        error: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö LINE ‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: parentLink } = await supabase
      .from('parent_line_links')
      .select('id, line_user_id, active')
      .eq('parent_id', parent_id)
      .eq('active', true)
      .single();
    
    if (parentLink) {
      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡πÄ‡∏Å‡πà‡∏≤
      await supabase
        .from('parent_line_links')
        .update({ 
          active: false,
          unlinked_at: new Date().toISOString(),
          unlink_reason: 'replaced_by_new_link'
        })
        .eq('id', parentLink.id);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡πÉ‡∏´‡∏°‡πà
    const { data: newLink, error: linkError } = await supabase
      .from('parent_line_links')
      .insert({
        parent_id: parent_id,
        line_user_id: lineUserId,
        linked_at: new Date().toISOString(),
        active: true
         // metadata ‡πÅ‡∏•‡∏∞ link_method ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß
      })
      .select()
      .single();
    
    if (linkError) {
      console.error('Error creating link:', linkError);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
      };
    }
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const confirmMessage = {
      type: 'text',
      text: `‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${payload.parent_name}\nüë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${payload.student_name}\nüÜî ‡∏£‡∏´‡∏±‡∏™: ${payload.student_id}\n\n‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ`
    };
    
    await lineClient.pushMessage(lineUserId, confirmMessage);
    
    return {
      success: true,
      link_id: newLink.id,
      parent_name: payload.parent_name,
      student_name: payload.student_name,
      student_id: payload.student_id
    };
    
  } catch (error) {
    console.error('Error linking LINE account:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
    };
  }
}

/**
 * ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢)
 * @param {string} lineUserId - LINE User ID
 * @param {string} studentId - ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @param {string} parentName - ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
 * @param {string} phoneNumber - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 */
async function linkByStudentId(lineUserId, studentId, parentName = null, phoneNumber = null, replyToken = null) {
  try {
    console.log(`üîç linkByStudentId called with:`, { lineUserId, studentId, parentName, phoneNumber });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const studentValidation = validateStudentId(studentId);
    console.log(`üìù Student validation result:`, studentValidation);
    
    if (!studentValidation.isValid) {
      console.log(`‚ùå Student validation failed:`, studentValidation.error);
      return {
        success: false,
        error: studentValidation.error
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (phoneNumber) {
      const phoneValidation = validatePhoneNumber(phoneNumber);
      if (!phoneValidation.isValid) {
        return {
          success: false,
          error: phoneValidation.error
        };
      }
      phoneNumber = phoneValidation.cleanNumber;
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    console.log(`üîç Searching for student with link_code:`, studentId);
    const { data: student, error: studentError } = await supabase
      .from('students')
      .select('student_id, student_name, parent_id, link_code')
      .eq('link_code', studentId)
      .single();
    
    console.log(`üìä Student search result:`, { student, studentError });
    
    if (studentError || !student) {
      console.log(`‚ùå Student not found:`, { studentError, student });
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      };
    }
    
    console.log(`‚úÖ Student found:`, student.student_name);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
    console.log(`üîç Searching for parent with id:`, student.parent_id);
    const { data: parent, error: parentError } = await supabase
      .from('parents')
      .select('parent_id, parent_name, parent_phone')
      .eq('parent_id', student.parent_id)
      .single();
    
    console.log(`üìä Parent search result:`, { parent, parentError });
    
    if (parentError || !parent) {
      console.log(`‚ùå Parent not found:`, { parentError, parent });
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
      };
    }
    
    console.log(`‚úÖ Parent found:`, parent.parent_name);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏)
    if (parentName && parent.parent_name.toLowerCase() !== parentName.toLowerCase()) {
      return {
        success: false,
        error: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
      };
    }
    
    if (phoneNumber && parent.parent_phone && 
        parent.parent_phone.replace(/[^0-9]/g, '') !== phoneNumber) {
      return {
        success: false,
        error: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE User ID ‡∏ô‡∏µ‡πâ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: existingLink } = await supabase
      .from('parent_line_links')
      .select('link_id, parent_id, active')
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();
    
    if (existingLink) {
      return {
        success: false,
        error: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö LINE ‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log(`üîç Checking existing parent link for parent_id:`, parent.parent_id);
    const { data: parentLink, error: parentLinkError } = await supabase
      .from('parent_line_links')
      .select('link_id, line_user_id, active')
      .eq('parent_id', parent.parent_id)
      .eq('active', true)
      .single();
    
    console.log(`üìä Parent link search result:`, { parentLink, parentLinkError });
    
    if (parentLink) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô LINE User ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (parentLink.line_user_id === lineUserId) {
        console.log(`‚úÖ Account already linked for this parent and LINE user`);
        return {
          success: true,
          message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß',
          data: {
            student: student,
            parent: parent,
            link: parentLink
          }
        };
      }
      
      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡πÄ‡∏Å‡πà‡∏≤ (LINE User ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô)
      console.log(`üîÑ Unlinking old LINE account:`, parentLink.line_user_id);
      await supabase
        .from('parent_line_links')
        .update({ 
          active: false,
          unlinked_at: new Date().toISOString(),
          unlink_reason: 'replaced_by_student_id_link'
        })
        .eq('link_id', parentLink.link_id);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡πÉ‡∏´‡∏°‡πà
    console.log(`üîó Creating new link for parent_id:`, parent.parent_id);
    const { data: newLink, error: linkError } = await supabase
      .from('parent_line_links')
      .insert({
        parent_id: parent.parent_id,
        line_user_id: lineUserId,
        linked_at: new Date().toISOString(),
        active: true
      })
      .select()
      .single();
    
    console.log(`üìä Link creation result:`, { newLink, linkError });
    
    if (linkError) {
      console.error('‚ùå Error creating link:', linkError);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
      };
    }
    
    console.log(`‚úÖ Link created successfully:`, newLink.link_id);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const confirmMessage = {
      type: 'text',
      text: `‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${parent.parent_name}\nüë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student.student_name}\nüÜî ‡∏£‡∏´‡∏±‡∏™: ${student.student_id}\n\n‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ`
    };

    if (replyToken) {
      await lineClient.replyMessage(replyToken, confirmMessage);
    } else {
      await lineClient.pushMessage(lineUserId, confirmMessage);
    }
    
    const result = {
      success: true,
      link_id: newLink.link_id,
      parent_name: parent.parent_name,
      student_name: student.student_name,
      student_id: student.student_id
    };
    
    console.log(`‚úÖ linkByStudentId completed successfully:`, result);
    return result;
    
  } catch (error) {
    console.error('Error linking by student ID:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
    };
  }
}

/**
 * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 * @param {string} lineUserId - LINE User ID
 * @param {string} reason - ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
 */
async function unlinkAccount(lineUserId, reason = 'user_request') {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ó‡∏µ‡πà active
    const { data: link, error: linkError } = await supabase
      .from('parent_line_links')
      .select(`
        id, parent_id,
        parents(parent_name),
        metadata
      `)
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();
    
    if (linkError || !link) {
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà active'
      };
    }
    
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å
    const { error: unlinkError } = await supabase
      .from('parent_line_links')
      .update({
        active: false,
        unlinked_at: new Date().toISOString(),
        unlink_reason: reason
      })
      .eq('id', link.id);
    
    if (unlinkError) {
      console.error('Error unlinking account:', unlinkError);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
      };
    }
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const confirmMessage = {
      type: 'text',
      text: `‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß\n\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${link.parents.parent_name}\n\n‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà`
    };
    
    await lineClient.pushMessage(lineUserId, confirmMessage);
    
    return {
      success: true,
      parent_name: link.parents.parent_name
    };
    
  } catch (error) {
    console.error('Error unlinking account:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
    };
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 * @param {string} lineUserId - LINE User ID
 * @returns {Promise<Object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 */
async function checkLinkStatus(lineUserId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏à‡∏≤‡∏Å parent_line_links
    const { data: parentLink, error: parentError } = await supabase
      .from('parent_line_links')
      .select('link_id, parent_id, linked_at, active')
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();
    
    if (parentLink && !parentError) {
      // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å students table ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const { data: student, error: studentError } = await supabase
        .from('students')
        .select('student_id, student_name, grade')
        .eq('parent_id', parentLink.parent_id)
        .single();
      
      if (student && !studentError) {
        return {
          isLinked: true,
          link_id: parentLink.link_id,
          parent_id: parentLink.parent_id,
          parent_name: '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á',
          student_id: student.student_id,
          student_name: student.student_name,
          linked_at: parentLink.linked_at,
          link_type: 'parent'
        };
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏à‡∏≤‡∏Å student_line_links
    const { data: studentLink, error: studentError } = await supabase
      .from('student_line_links')
      .select(`
        link_id, student_id, linked_at, active,
        students(student_id, student_name, grade)
      `)
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();
    
    if (studentLink && !studentError && studentLink.students) {
      return {
        isLinked: true,
        link_id: studentLink.link_id,
        student_id: studentLink.students.student_id,
        student_name: studentLink.students.student_name,
        linked_at: studentLink.linked_at,
        link_type: 'student'
      };
    }
    
    return {
      isLinked: false,
      error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
    };
    
  } catch (error) {
    console.error('Error checking link status:', error);
    return {
      isLinked: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @param {string} studentId - ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @returns {Promise<Array>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ LINE User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
 */
async function getLinkedParents(studentId) {
  try {
    const { data: student, error: studentError } = await supabase
      .from('students')
      .select('parent_id')
      .eq('link_code', studentId)
      .single();
    
    if (studentError || !student) {
      return [];
    }
    
    const { data: links, error: linksError } = await supabase
      .from('parent_line_links')
      .select('line_user_id, parents(parent_name)')
      .eq('parent_id', student.parent_id)
      .eq('active', true);
    
    if (linksError) {
      console.error('Error getting linked parents:', linksError);
      return [];
    }
    
    return links || [];
    
  } catch (error) {
    console.error('Error getting linked parents:', error);
    return [];
  }
}

/**
 * ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @param {string} lineUserId - LINE User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 * @param {string} studentId - ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @param {string} driverName - ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 */
async function linkDriverByStudentId(lineUserId, studentId, driverName = null) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const studentValidation = validateStudentId(studentId);
    if (!studentValidation.isValid) {
      return {
        success: false,
        error: studentValidation.error
      };
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const { data: student, error: studentError } = await supabase
      .from('students')
      .select('id, student_id, student_name, parent_id, link_code')
      .eq('link_code', studentId)
      .single();

    if (studentError || !student) {
      return {
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE User ID ‡∏ô‡∏µ‡πâ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: existingLink } = await supabase
      .from('driver_line_links')
      .select('id, student_id, is_active')
      .eq('line_user_id', lineUserId)
      .eq('is_active', true)
      .single();

    if (existingLink) {
      return {
        success: false,
        error: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
      };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: studentLink } = await supabase
      .from('driver_line_links')
      .select('id, line_user_id, is_active')
      .eq('student_id', student.id)
      .eq('is_active', true)
      .single();

    if (studentLink) {
      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡πÄ‡∏Å‡πà‡∏≤
      await supabase
        .from('driver_line_links')
        .update({ 
          is_active: false,
          unlinked_at: new Date().toISOString()
        })
        .eq('id', studentLink.id);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡πÉ‡∏´‡∏°‡πà
    const { data: newLink, error: linkError } = await supabase
      .from('driver_line_links')
      .insert({
        student_id: student.id,
        line_user_id: lineUserId,
        driver_name: driverName,
        linked_at: new Date().toISOString(),
        is_active: true
      })
      .select()
      .single();

    if (linkError) {
      console.error('Error creating driver link:', linkError);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
      };
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const confirmMessage = {
      type: 'text',
      text: `‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüöå ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${driverName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}\nüë¶üëß ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student.student_name}\nüÜî ‡∏£‡∏´‡∏±‡∏™: ${student.link_code}\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ`
    };

    await lineClient.pushMessage(lineUserId, confirmMessage);

    return {
      success: true,
      link_id: newLink.id,
      driver_name: driverName,
      student_name: student.student_name,
      student_id: student.link_code
    };

  } catch (error) {
    console.error('Error linking driver by student ID:', error);
    return {
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
    };
  }
}

export {
  createLinkToken,
  linkLineAccount,
  linkByStudentId,
  linkDriverByStudentId,
  unlinkAccount,
  checkLinkStatus,
  getLinkedParents
};