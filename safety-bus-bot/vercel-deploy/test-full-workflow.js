import { createClient } from '@supabase/supabase-js';

// Initialize Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö workflow ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function testFullWorkflow() {
  console.log('üöå Testing Full Bus Workflow...\n');

  const testStudentId = '100017';
  const testDriverId = 1;
  const today = new Date().toISOString().split('T')[0];

  try {
    // Phase 1: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (start_trip)
    console.log('1Ô∏è‚É£ Phase 1: Start Trip');
    await testPhase1_StartTrip(testStudentId, testDriverId, today);

    // Phase 2: ‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (picking_up)
    console.log('\n2Ô∏è‚É£ Phase 2: Picking Up Students');
    await testPhase2_PickingUp(testStudentId, testDriverId, today);

    // Phase 3: ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (going_to_school)
    console.log('\n3Ô∏è‚É£ Phase 3: Going to School');
    await testPhase3_GoingToSchool(testStudentId, testDriverId, today);

    // Phase 4: ‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (arrived_school)
    console.log('\n4Ô∏è‚É£ Phase 4: Arrived at School');
    await testPhase4_ArrivedSchool(testStudentId, testDriverId, today);

    // Phase 5: ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô (waiting_return) - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
    console.log('\n5Ô∏è‚É£ Phase 5: Waiting for Return (Reset Test)');
    await testPhase5_WaitingReturn(testStudentId, testDriverId, today);

    // Phase 6: ‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö (picking_up_return)
    console.log('\n6Ô∏è‚É£ Phase 6: Picking Up for Return');
    await testPhase6_PickingUpReturn(testStudentId, testDriverId, today);

    // Phase 7: ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô (going_home)
    console.log('\n7Ô∏è‚É£ Phase 7: Going Home');
    await testPhase7_GoingHome(testStudentId, testDriverId, today);

    // Phase 8: ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (finished) - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    console.log('\n8Ô∏è‚É£ Phase 8: Finished Trip (Final Reset Test)');
    await testPhase8_FinishedTrip(testStudentId, testDriverId, today);

    console.log('\n‚úÖ Full Workflow Test Completed Successfully!');

  } catch (error) {
    console.error('‚ùå Error in full workflow test:', error);
  }
}

// Phase 1: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
async function testPhase1_StartTrip(studentId, driverId, date) {
  console.log('üöÄ Starting trip...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const { data: initialStatus } = await supabase
    .from('v_student_today_status')
    .select('*')
    .eq('student_id', studentId);
  
  console.log('üìä Initial status:', initialStatus);
  console.log('‚úÖ Trip started');
}

// Phase 2: ‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
async function testPhase2_PickingUp(studentId, driverId, date) {
  console.log('üö∂ Picking up students...');
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  const pickupTime = new Date().toISOString();
  
  const { data: pickupData, error: pickupError } = await supabase
    .from('passenger_data_daily')
    .insert({
      student_id: studentId,
      driver_id: driverId,
      event_type: 'pickup',
      location_type: 'go',
      event_date: date,
      event_time: pickupTime,
      latitude: 13.7563,
      longitude: 100.5018,
      notes: 'Test workflow - pickup go phase'
    })
    .select();

  if (pickupError) {
    console.error('‚ùå Error recording pickup:', pickupError);
  } else {
    console.log('‚úÖ Student picked up:', pickupData);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ
  const { data: statusAfterPickup } = await supabase
    .from('v_student_today_status')
    .select('*')
    .eq('student_id', studentId);
  
  console.log('üìä Status after pickup:', statusAfterPickup);
}

// Phase 3: ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
async function testPhase3_GoingToSchool(studentId, driverId, date) {
  console.log('üè´ Going to school...');
  
  // ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  // ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  
  console.log('‚úÖ En route to school');
}

// Phase 4: ‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
async function testPhase4_ArrivedSchool(studentId, driverId, date) {
  console.log('üè´ Arrived at school...');
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  const dropoffTime = new Date().toISOString();
  
  const { data: dropoffData, error: dropoffError } = await supabase
    .from('passenger_data_daily')
    .insert({
      student_id: studentId,
      driver_id: driverId,
      event_type: 'dropoff',
      location_type: 'go',
      event_date: date,
      event_time: dropoffTime,
      latitude: 13.7563,
      longitude: 100.5018,
      notes: 'Test workflow - dropoff at school'
    })
    .select();

  if (dropoffError) {
    console.error('‚ùå Error recording dropoff:', dropoffError);
  } else {
    console.log('‚úÖ Student dropped off at school:', dropoffData);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏•‡∏á‡∏£‡∏ñ
  const { data: statusAfterDropoff } = await supabase
    .from('v_student_today_status')
    .select('*')
    .eq('student_id', studentId);
  
  console.log('üìä Status after dropoff at school:', statusAfterDropoff);
}

// Phase 5: ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï)
async function testPhase5_WaitingReturn(studentId, driverId, date) {
  console.log('‚è∞ Waiting for return trip...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
  console.log('üîç Checking status before reset...');
  const { data: beforeReset } = await supabase
    .from('v_student_today_status')
    .select('*')
    .eq('student_id', studentId);
  
  console.log('üìä Status before reset:', beforeReset);
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö
  // ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô AsyncStorage
  console.log('üîÑ Simulating reset for return phase...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const { data: goPhaseData } = await supabase
    .from('passenger_data_daily')
    .select('*')
    .eq('student_id', studentId)
    .eq('event_date', date)
    .eq('location_type', 'go')
    .order('event_time', { ascending: false });
  
  console.log('üìã Go phase data (should be preserved):', goPhaseData);
  console.log('‚úÖ Reset for return phase completed');
}

// Phase 6: ‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö
async function testPhase6_PickingUpReturn(studentId, driverId, date) {
  console.log('üö∂ Picking up students for return...');
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö
  const pickupReturnTime = new Date().toISOString();
  
  const { data: pickupReturnData, error: pickupReturnError } = await supabase
    .from('passenger_data_daily')
    .insert({
      student_id: studentId,
      driver_id: driverId,
      event_type: 'pickup',
      location_type: 'return',
      event_date: date,
      event_time: pickupReturnTime,
      latitude: 13.7563,
      longitude: 100.5018,
      notes: 'Test workflow - pickup return phase'
    })
    .select();

  if (pickupReturnError) {
    console.error('‚ùå Error recording return pickup:', pickupReturnError);
  } else {
    console.log('‚úÖ Student picked up for return:', pickupReturnData);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö
  const { data: statusAfterReturnPickup } = await supabase
    .from('v_student_today_status')
    .select('*')
    .eq('student_id', studentId);
  
  console.log('üìä Status after return pickup:', statusAfterReturnPickup);
}

// Phase 7: ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô
async function testPhase7_GoingHome(studentId, driverId, date) {
  console.log('üè† Going home...');
  
  // ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  console.log('‚úÖ En route home');
}

// Phase 8: ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
async function testPhase8_FinishedTrip(studentId, driverId, date) {
  console.log('üèÅ Finishing trip...');
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô
  const dropoffHomeTime = new Date().toISOString();
  
  const { data: dropoffHomeData, error: dropoffHomeError } = await supabase
    .from('passenger_data_daily')
    .insert({
      student_id: studentId,
      driver_id: driverId,
      event_type: 'dropoff',
      location_type: 'return',
      event_date: date,
      event_time: dropoffHomeTime,
      latitude: 13.7563,
      longitude: 100.5018,
      notes: 'Test workflow - dropoff at home'
    })
    .select();

  if (dropoffHomeError) {
    console.error('‚ùå Error recording home dropoff:', dropoffHomeError);
  } else {
    console.log('‚úÖ Student dropped off at home:', dropoffHomeData);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  const { data: finalStatus } = await supabase
    .from('v_student_today_status')
    .select('*')
    .eq('student_id', studentId);
  
  console.log('üìä Final status:', finalStatus);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const { data: allTodayData } = await supabase
    .from('passenger_data_daily')
    .select('*')
    .eq('student_id', studentId)
    .eq('event_date', date)
    .order('event_time', { ascending: true });
  
  console.log('üìã All today\'s data:', allTodayData);
  console.log('‚úÖ Trip finished successfully');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function cleanupWorkflowTestData() {
  console.log('\nüßπ Cleaning up workflow test data...');
  
  try {
    const today = new Date().toISOString().split('T')[0];
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const { error: deleteError } = await supabase
      .from('passenger_data_daily')
      .delete()
      .eq('student_id', '100017')
      .eq('event_date', today)
      .like('notes', '%Test workflow%');

    if (deleteError) {
      console.error('‚ùå Error cleaning up workflow test data:', deleteError);
    } else {
      console.log('‚úÖ Workflow test data cleaned up successfully');
    }
    
  } catch (error) {
    console.error('‚ùå Error in workflow cleanup:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
async function checkSystemHealth() {
  console.log('üè• Checking system health...\n');
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { data: dbTest, error: dbError } = await supabase
      .from('students')
      .select('count')
      .limit(1);
    
    if (dbError) {
      console.error('‚ùå Database connection failed:', dbError);
    } else {
      console.log('‚úÖ Database connection OK');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö view ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const { data: viewTest, error: viewError } = await supabase
      .from('v_student_today_status')
      .select('*')
      .limit(1);
    
    if (viewError) {
      console.error('‚ùå View access failed:', viewError);
    } else {
      console.log('‚úÖ Views accessible');
    }

    console.log('‚úÖ System health check completed');
    
  } catch (error) {
    console.error('‚ùå System health check failed:', error);
  }
}

// Export functions
export { 
  testFullWorkflow, 
  cleanupWorkflowTestData, 
  checkSystemHealth 
};

// Main function
async function main() {
  console.log('üöÄ Starting Full Workflow Test\n');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô
  await checkSystemHealth();
  
  console.log('\n' + '='.repeat(50));
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö workflow ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  await testFullWorkflow();
  
  console.log('\n‚ùì To clean up test data, run: cleanupWorkflowTestData()');
  console.log('\n‚úÖ All tests completed!');
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}