import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô checkLinkStatus ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå account-linking.js
async function checkLinkStatus(lineUserId) {
  try {
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE User ID: ${lineUserId}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏à‡∏≤‡∏Å parent_line_links
    const { data: parentLink, error: parentError } = await supabase
      .from('parent_line_links')
      .select('link_id, parent_id, linked_at, active')
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();
    
    console.log('üìã Parent Link Query Result:', { parentLink, parentError });
    
    if (parentLink && !parentError) {
      // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å students table ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const { data: student, error: studentError } = await supabase
        .from('students')
        .select('student_id, student_name, grade')
        .eq('parent_id', parentLink.parent_id)
        .single();
      
      console.log('üìã Student Query Result:', { student, studentError });
      
      if (student && !studentError) {
        return {
          isLinked: true,
          link_id: parentLink.link_id,
          parent_id: parentLink.parent_id,
          parent_name: '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á',
          student_id: student.student_id,
          student_name: student.student_name,
          linked_at: parentLink.linked_at,
          link_type: 'parent'
        };
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏à‡∏≤‡∏Å student_line_links
    const { data: studentLink, error: studentError } = await supabase
      .from('student_line_links')
      .select(`
        link_id, student_id, linked_at, active,
        students(student_id, student_name, grade)
      `)
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();
    
    console.log('üìã Student Link Query Result:', { studentLink, studentError });
    
    if (studentLink && !studentError && studentLink.students) {
      return {
        isLinked: true,
        link_id: studentLink.link_id,
        student_id: studentLink.students.student_id,
        student_name: studentLink.students.student_name,
        linked_at: studentLink.linked_at,
        link_type: 'student'
      };
    }
    
    return {
      isLinked: false,
      error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
    };
    
  } catch (error) {
    console.error('Error checking link status:', error);
    return {
      isLinked: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
    };
  }
}

async function testLinkStatus() {
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö LINE User ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  const testUsers = [
    'Ue1de2d9dbed6fbf37ed494f3b44bb43a', // Parent link
    'tartar-c-v', // Student link
    'nonexistent-user' // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
  ];
  
  for (const userId of testUsers) {
    console.log('\n' + '='.repeat(50));
    const result = await checkLinkStatus(userId);
    console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(result, null, 2));
  }
}

testLinkStatus();