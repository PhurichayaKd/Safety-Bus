import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const envPath = join(__dirname, '..', 'safety-bus-bot', 'vercel-deploy', '.env.local');

dotenv.config({ path: envPath });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function testRfidFormats() {
  try {
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™ RFID...\n');
    
    // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™ RFID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { data: cards, error } = await supabase
      .from('rfid_cards')
      .select('rfid_code')
      .eq('is_active', true)
      .limit(5);
    
    if (error) {
      console.error('‚ùå Error:', error);
      return;
    }
    
    console.log('üìã ‡∏£‡∏´‡∏±‡∏™ RFID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    cards.forEach((card, index) => {
      const code = card.rfid_code;
      console.log(`${index + 1}. ${code}`);
      console.log(`   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ${code.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`);
      console.log(`   - ‡∏°‡∏µ colon (:): ${code.includes(':') ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
      console.log(`   - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ${code.includes(':') ? 'XX:XX:XX:XX' : 'XXXXXXXX'}`);
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      if (code.includes(':')) {
        const withoutColon = code.replace(/:/g, '');
        console.log(`   - ‡πÑ‡∏°‡πà‡∏°‡∏µ colon: ${withoutColon}`);
      } else {
        const withColon = code.match(/.{2}/g)?.join(':') || code;
        console.log(`   - ‡∏°‡∏µ colon: ${withColon}`);
      }
      console.log('');
    });
    
    console.log('üí° ‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï:');
    console.log('- Arduino ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PRINT_WITH_COLON = false');
    console.log('- ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ Arduino ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö XXXXXXXX (‡πÑ‡∏°‡πà‡∏°‡∏µ colon)');
    console.log('- ‡∏ñ‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ö‡∏ö XX:XX:XX:XX ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
    console.log('');
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const testCode = cards[0]?.rfid_code;
    if (testCode) {
      console.log(`üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™: ${testCode}`);
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏£‡∏á‡πÜ
      const { data: exact } = await supabase
        .from('rfid_cards')
        .select('rfid_code')
        .eq('rfid_code', testCode)
        .maybeSingle();
      
      console.log(`‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏£‡∏á‡πÜ: ${exact ? '‡∏û‡∏ö' : '‡πÑ‡∏°‡πà‡∏û‡∏ö'}`);
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ colon
      const withoutColon = testCode.replace(/:/g, '');
      const { data: noColon } = await supabase
        .from('rfid_cards')
        .select('rfid_code')
        .eq('rfid_code', withoutColon)
        .maybeSingle();
      
      console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ colon (${withoutColon}): ${noColon ? '‡∏û‡∏ö' : '‡πÑ‡∏°‡πà‡∏û‡∏ö'}`);
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ colon
      const withColon = testCode.includes(':') ? testCode : testCode.match(/.{2}/g)?.join(':');
      if (withColon && withColon !== testCode) {
        const { data: hasColon } = await supabase
          .from('rfid_cards')
          .select('rfid_code')
          .eq('rfid_code', withColon)
          .maybeSingle();
        
        console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ colon (${withColon}): ${hasColon ? '‡∏û‡∏ö' : '‡πÑ‡∏°‡πà‡∏û‡∏ö'}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

testRfidFormats();