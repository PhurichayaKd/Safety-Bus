import { sendLineMessage, replyLineMessage, getUserProfile } from './line.js';
import { supabase } from './db.js';
import { sendMainMenu } from './menu.js';
import { getStudentByLineId } from './student-data.js';
import { config } from './config.js';
import { checkLineUserIdExists, matchLineIds, checkAndAutoMatchLineId } from './line-id-matcher.js';
import { createStudentInfoBubble, createLeaveRequestBubble, createContactDriverBubble } from './flex-templates.js';

// Store user form states (in production, use Redis or database)
const userFormStates = new Map();
// Store user leave form sending states to prevent duplicate sends
const userLeaveFormStates = new Map();
// Store user error message states to prevent spam
const userErrorStates = new Map();
export { userFormStates, userLeaveFormStates, userErrorStates };

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @param {string} userId
 * @returns {Promise<{linked: boolean, type: string|null, student: object|null}>}
 */
export async function checkLinkStatus(userId) {
  try {
    console.log(`üîç Checking link status for user: ${userId}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô
    const studentData = await getStudentByLineId(userId);
    
    if (studentData && studentData.student) {
      console.log(`‚úÖ User ${userId} is linked as ${studentData.type}`);
      return { 
        linked: true, 
        type: studentData.type, 
        student: studentData.student 
      };
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    console.log(`üîÑ Attempting auto-match for user: ${userId}`);
    const autoMatchResult = await checkAndAutoMatchLineId(userId);
    
    if (autoMatchResult.exists) {
      console.log(`‚úÖ Auto-matched user ${userId} as ${autoMatchResult.userType}`);
      return { 
        linked: true, 
        type: autoMatchResult.userType, 
        student: autoMatchResult.userData.student || autoMatchResult.userData,
        autoMatched: autoMatchResult.autoMatched
      };
    }
    
    console.log(`‚ùå User ${userId} is not linked and cannot be auto-matched`);
    return { linked: false, type: null, student: null };
  } catch (error) {
    console.error('‚ùå Error in checkLinkStatus:', error);
    console.error('Error details:', {
      message: error.message,
      code: error.code,
      details: error.details
    });
    // Always return false for linking status on error to prevent crashes
    return { linked: false, type: null, student: null };
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
 * @param {Object} event - LINE webhook event
 */
export async function handleTextMessage(event) {
  const userId = event.source.userId;
  const text = event.message.text.trim();

  console.log(`üìù Text message from ${userId}: ${text}`);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß (‡πÑ‡∏°‡πà auto match ‡∏Å‡πà‡∏≠‡∏ô)
  let isLinked = false;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô
  try {
    const { data: studentLink } = await supabase
      .from('student_line_links')
      .select('id')
      .eq('line_user_id', userId)
      .limit(1)
      .single();
    
    if (studentLink) {
      isLinked = true;
    } else {
      const { data: parentLink } = await supabase
        .from('parent_line_links')
        .select('id')
        .eq('line_user_id', userId)
        .limit(1)
        .single();
      
      if (parentLink) {
        isLinked = true;
      }
    }
  } catch (error) {
    console.log('Quick link check failed, will try auto match later');
  }

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á auto match (‡πÅ‡∏ï‡πà‡∏ó‡∏≥‡πÉ‡∏ô background)
  if (!isLinked) {
    // ‡∏ó‡∏≥ auto match ‡πÉ‡∏ô background ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    setImmediate(async () => {
      try {
        const linkStatus = await checkAndAutoMatchLineId(userId);
        if (linkStatus.autoMatched) {
          await sendLineMessage(userId, [{
            type: 'text',
            text: `‚úÖ ${linkStatus.message}\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus! üöå\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`
          }]);
          await sendMainMenu(userId);
        }
      } catch (error) {
        console.error('Background auto match failed:', error);
      }
    });
  }

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
  // ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE Display ID ‡∏Å‡∏±‡∏ö LINE User ID
  if (!isLinked && !/^[0-9]{6}$/.test(text) && !/^[A-Z0-9]{8}$/.test(text.toUpperCase())) {
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ text ‡πÄ‡∏õ‡πá‡∏ô LINE Display ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
    const matchResult = await matchLineIds(userId, text);
    if (matchResult.success) {
      isLinked = true;
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: `‚úÖ ${matchResult.message}\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus! üöå\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
      });
      await sendMainMenu(userId);
      return;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (A-Z, 0-9)
  if (/^[A-Z0-9]{8}$/.test(text.toUpperCase())) {
    await handleLinkCodeVerification(event, text.toUpperCase());
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
  if (/^[0-9]{6}$/.test(text)) {
    await handleStudentCodeLinking(event, text);
    return;
  }

  // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  if (!isLinked) {
    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus\n\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô\n‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 123456\n\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™ 6 ‡∏´‡∏•‡∏±‡∏Å ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö`
    });
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π
  if (text.toLowerCase().includes('‡πÄ‡∏°‡∏ô‡∏π') || text.toLowerCase().includes('menu')) {
    await sendMainMenu(userId, event.replyToken);
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  if (text.includes('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥') || text.includes('history')) {
    await handleHistoryRequest(event);
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
  if (text.includes('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á') || text.includes('‡∏£‡∏ñ') || text.includes('location')) {
    await handleLocationRequest(event);
    return;
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö - reset cooldown
  if (text.toLowerCase() === 'reset cooldown' || text === '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï') {
    userLeaveFormStates.delete(userId);
    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: '‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï cooldown ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ\n\nüí° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤" ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤"'
    });
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
  if (text.includes('‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠') || text.includes('contact') || text.includes('‡πÇ‡∏ó‡∏£')) {
    await handleContactDriverRequest(event);
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)
  if (text === '‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤' || text === '‡∏•‡∏≤' || text === '‡∏Ç‡∏≠‡∏•‡∏≤' || text.includes('‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤') || text.includes('absence') || text.includes('‡∏Ç‡∏≤‡∏î')) {
    await handleLeaveRequestMenu(event);
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
  if (text.includes('‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö') || text.includes('driver')) {
    await handleDriverCommand(event);
    return;
  }

  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
  await sendMainMenu(userId, event.replyToken);
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback event
 * @param {Object} event - LINE webhook event
 */
export async function handlePostback(event) {
  const userId = event.source.userId;
  const data = event.postback.data;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° log
  console.log(`üîÑ handlePostback called from ${userId}: ${data}`);
  console.log('üìã Full event data:', JSON.stringify(event, null, 2));

  try {
    // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó action
    if (data.startsWith('action=')) {
      const action = data.split('=')[1];
      console.log('Postback action:', action);
      await handleMainAction(event, action);
    } else if (data.startsWith('leave_type=') || data.startsWith('confirm_leave=') || data.startsWith('leave_form_')) {
      // Handle leave-related postbacks by redirecting to leave request menu
      console.log('Leave-related postback, redirecting to leave request menu');
      await handleLeaveRequestMenu(event);
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ action ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
      console.log('Unknown postback data:', data);
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ó‡∏ô'
      });
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Rich Menu ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      // await sendMainMenu(userId);
    }
  } catch (err) {
    console.error('‚ùå Error in handlePostback:', err);
    console.error('Error details:', {
      userId: userId,
      data: data,
      replyToken: event.replyToken,
      message: err.message,
      stack: err.stack
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limiting ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error messages
    const currentTime = Date.now();
    const lastErrorTime = userErrorStates.get(userId);
    const errorCooldown = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    if (lastErrorTime && (currentTime - lastErrorTime) < errorCooldown) {
      console.log(`üö´ Error message cooldown active for user ${userId}`);
      return; // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ã‡πâ‡∏≥
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï error state
    userErrorStates.set(userId, currentTime);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ú‡πà‡∏≤‡∏ô reply token ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (event.replyToken) {
      try {
        await replyLineMessage(event.replyToken, {
          type: 'text',
          text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏°‡∏ô‡∏π ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        });
        console.log('‚úÖ Sent postback error message via reply token');
      } catch (replyError) {
        console.error('‚ùå Reply token already used or invalid:', replyError);
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ push message ‡πÄ‡∏õ‡πá‡∏ô fallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
        console.log('‚ö†Ô∏è Skipping push message fallback to prevent spam');
      }
    } else {
      console.log('‚ö†Ô∏è Cannot send postback error message - no reply token');
    }
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ follow event (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô)
 * @param {Object} event - LINE webhook event
 */
export async function handleFollow(event) {
  const userId = event.source.userId;
  console.log(`üëã New follower: ${userId}`);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const { linked, type, student } = await checkLinkStatus(userId);

  if (linked) {
    // ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    let roleText = type === 'parent' ? '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á' : '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
    let nameText = student ? student.student_name : '';
    const welcomeMessage = {
      type: 'text',
      text: `‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ${roleText === '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á' ? '‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì' : '‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡πâ‡∏≠‡∏á'}${nameText}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${roleText}\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠:\n‚Ä¢ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ\n‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö`
    };
    await replyLineMessage(event.replyToken, welcomeMessage);
    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Rich Menu ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  } else {
    // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    const welcomeMessage = {
      type: 'text',
      text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus! üöå\n\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô\n‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å (link_code)\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 123456\n\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™ 6 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì:\n‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n‚Ä¢ ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™\n‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ`
    };
    await replyLineMessage(event.replyToken, welcomeMessage);
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ main action ‡∏à‡∏≤‡∏Å postback
 * @param {Object} event - LINE webhook event
 * @param {string} action - Action type
 */
export async function handleMainAction(event, action) {
  const userId = event.source.userId;
  const replyToken = event.replyToken;
  console.log(`üéØ handleMainAction: ${action} for user: ${userId}, replyToken: ${replyToken}`);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const linkResult = await checkLinkStatus(userId);
    const { linked, type, student, autoMatched } = linkResult;
    console.log(`üîó Account linking status: ${linked}, type: ${type}, autoMatched: ${autoMatched}`);
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    if (!linked && action === 'contact_driver') {
      console.log('üöå Contact driver requested by unlinked user, allowing access');
      await handleContactDriverRequest(event);
      return;
    }
    
    if (!linked) {
      if (replyToken) {
        await replyLineMessage(replyToken, {
          type: 'text',
          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å\n\nüí° ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
        });
      }
      return;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (autoMatched && replyToken) {
      let roleText = type === 'parent' ? '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á' : '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
      let nameText = student ? student.student_name : '';
      await replyLineMessage(replyToken, {
        type: 'text',
        text: `‚úÖ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ${roleText === '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á' ? '‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì' : '‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡πâ‡∏≠‡∏á'}${nameText}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${roleText}\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus! üöå\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`
      });
      await sendMainMenu(userId);
      return;
    }
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ action ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ replyToken ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    switch (action) {
      case 'history':
      case 'student_history':
        await handleHistoryRequest(event);
        break;
        
      case 'leave':
      case 'leave_request':
        await handleLeaveRequestMenu(event);
        break;
        
      case 'location':
      case 'bus_location':
        await handleBusLocationRequest(event);
        break;
        
      case 'contact':
      case 'contact_driver':
        await handleContactDriverRequest(event);
        break;
        
      case 'main_menu':
        // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        let roleText = type === 'parent' ? '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á' : '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
        let nameText = student ? student.student_name : '';
        await sendMainMenu(userId, replyToken, {
          welcomeText: `‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ${roleText === '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á' ? '‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì' : '‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡πâ‡∏≠‡∏á'}${nameText}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${roleText}\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠:\n‚Ä¢ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ\n‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô`
        });
        break;
        
      default:
        // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å fallback
        await sendMainMenu(userId, replyToken);
        break;
    }
  } catch (err) {
    console.error('‚ùå Error in handleMainAction:', err);
    console.error('Error details:', {
      action: action,
      userId: userId,
      replyToken: replyToken,
      message: err.message,
      stack: err.stack
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
    const errorKey = `${userId}_${action}_error`;
    const lastErrorTime = userErrorStates.get(errorKey);
    const now = Date.now();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ cooldown ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
    if (lastErrorTime && (now - lastErrorTime) < 60000) {
      console.log('‚ö†Ô∏è Error message already sent recently, skipping to prevent spam');
      return;
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
    userErrorStates.set(errorKey, now);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡πà‡∏≤‡∏ô reply token ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ push message fallback)
    if (replyToken) {
      try {
        await replyLineMessage(replyToken, {
          type: 'text',
          text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà\n\n‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
        });
        console.log('‚úÖ Sent error message via reply token');
      } catch (replyError) {
        console.error('‚ùå Reply token already used or invalid:', replyError);
        console.log('‚ö†Ô∏è Skipping push message fallback to prevent spam');
      }
    } else {
      console.log('‚ö†Ô∏è Cannot send error message - reply token missing');
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á error state ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
      userErrorStates.delete(errorKey);
    }, 600000);
  }
}




/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
 * @param {Object} event - LINE webhook event
 */
export async function handleLocationRequest(event) {
  await replyLineMessage(event.replyToken, {
    type: 'text',
    text: 'üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™\n\n‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á'
  });
}



/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 * @param {Object} event - LINE webhook event
 * @param {string} token - Link token
 */
export async function handleAccountLinking(event, token) {
  const userId = event.source.userId;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    let linkData = null;
    let userType = null;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_link_tokens ‡∏Å‡πà‡∏≠‡∏ô
    const { data: studentToken, error: studentError } = await supabase
      .from('student_link_tokens')
      .select('*, students(student_name, class)')
      .eq('token', token)
      .is('used_at', null)
      .single();

    if (studentToken && !studentError) {
      linkData = studentToken;
      userType = 'student';
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á student ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á parent
      const { data: parentToken, error: parentError } = await supabase
        .from('parent_link_tokens')
        .select('*, parents(parent_name)')
        .eq('token', token)
        .is('used_at', null)
        .single();

      if (parentToken && !parentError) {
        linkData = parentToken;
        userType = 'parent';
      }
    }

    if (!linkData) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const now = new Date();
    const expiresAt = new Date(linkData.expires_at);

    if (now > expiresAt) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      });
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
    let linkError = null;
    if (userType === 'student') {
      const { error } = await supabase
        .from('student_line_links')
        .insert({
          line_user_id: userId,
          student_id: linkData.student_id,
          active: true,
          linked_at: new Date().toISOString()
        });
      linkError = error;
    } else if (userType === 'parent') {
      const { error } = await supabase
        .from('parent_line_links')
        .insert({
          line_user_id: userId,
          parent_id: linkData.parent_id,
          active: true,
          linked_at: new Date().toISOString()
        });
      linkError = error;
    }

    if (linkError) {
      throw linkError;
    }

    // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
    const tableName = userType === 'student' ? 'student_link_tokens' : 'parent_link_tokens';
    await supabase
      .from(tableName)
      .update({ 
        used_at: new Date().toISOString(),
        used_by_line_user_id: userId
      })
      .eq('token', token);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const userName = userType === 'student' 
      ? linkData.students?.student_name 
      : linkData.parents?.parent_name;
    
    const userClass = userType === 'student' 
      ? linkData.students?.class 
      : '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á';

    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: `‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n${userType === 'student' ? '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' : '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á'}: ${userName || 'N/A'}\n${userType === 'student' ? '‡∏ä‡∏±‡πâ‡∏ô' : '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'}: ${userClass || 'N/A'}\n\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô`
    });

  } catch (error) {
    console.error('Error handling account linking:', error);
    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @param {Object} event - LINE webhook event
 * @param {string} studentId - Student ID
 */
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
 * @param {string} userId - LINE User ID
 * @returns {boolean} - true ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß
 */
export async function checkAccountLinking(userId) {
  try {
    console.log(`üîç Checking account linking for user: ${userId}`);

    // ‡πÉ‡∏ä‡πâ getStudentByLineId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    const studentData = await getStudentByLineId(userId);
    
    console.log('üë®‚Äçüéì Student data result:', studentData);

    return !!studentData;
  } catch (error) {
    console.error('Error checking account linking:', error);
    return false;
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å
 * @param {Object} event - LINE webhook event
 * @param {string} studentCode - ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å
 */
export async function handleStudentCodeLinking(event, studentCode) {
  const userId = event.source.userId;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const linkStatus = await checkAndAutoMatchLineId(userId);
    if (linkStatus.exists) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'
      });
      await sendMainMenu(userId, null);
      return;
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™ student_id
    const { data: student, error } = await supabase
      .from('students')
      .select('student_id, student_name, grade, parent_id')
      .eq('student_id', parseInt(studentCode))
      .single();

    if (error || !student) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™ 6 ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE Display ID ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const lineIdValidation = await validateAndUpdateLineId(userId, student.student_id, student.parent_id);
    
    if (!lineIdValidation.isValid) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: lineIdValidation.message
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
    let linkType = 'parent'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô student_line_links ‡∏Å‡πà‡∏≠‡∏ô
    const { data: studentLineData } = await supabase
      .from('student_line_links')
      .select('*')
      .eq('student_id', student.student_id)
      .eq('line_user_id', userId)
      .eq('active', true)
      .single();

    if (studentLineData) {
      linkType = 'student';
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    const roleText = linkType === 'student' ? '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' : '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á';
    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: `‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${student.student_name}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${roleText}\n‡∏ä‡∏±‡πâ‡∏ô: ${student.grade}\n\nüöå ‡∏£‡∏∞‡∏ö‡∏ö Safety Bus ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n\n‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ:\n‚Ä¢ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ\n‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö\n\n‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
    });

    // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    await sendMainMenu(userId, null);

  } catch (error) {
    console.error('Error handling student code linking:', error);
    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE User ID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {string} userId - LINE User ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å webhook
 * @param {number} studentId - ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * @param {number} parentId - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 */
async function validateAndUpdateLineId(userId, studentId, parentId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE User ID ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (U + 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    const lineIdPattern = /^U[a-f0-9]{32}$/i;
    if (!lineIdPattern.test(userId)) {
      return {
        isValid: false,
        message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'
      };
    }

    // ‡∏î‡∏∂‡∏á Display ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE API
    let userDisplayName;
    try {
      const userProfile = await getUserProfile(userId);
      userDisplayName = userProfile.displayName;
      console.log(`üìã User Display Name: ${userDisplayName}`);
    } catch (error) {
      console.error('Error getting user profile:', error);
      return {
        isValid: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå LINE ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      };
    }

    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô student_line_links ‡∏î‡πâ‡∏ß‡∏¢ line_display_id ‡∏Å‡πà‡∏≠‡∏ô
    const { data: studentLineIdData, error: studentLineIdError } = await supabase
      .from('student_line_links')
      .select('*')
      .eq('student_id', studentId)
      .eq('line_display_id', userDisplayName)
      .eq('active', true)
      .single();

    if (studentLineIdData && !studentLineIdError) {
      // ‡∏û‡∏ö line_display_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_user_id
      const { error: updateError } = await supabase
        .from('student_line_links')
        .update({ 
          line_user_id: userId,
          linked_at: new Date().toISOString()
        })
        .eq('student_id', studentId)
        .eq('line_display_id', userDisplayName)
        .eq('active', true);

      if (updateError) {
        console.error('Error updating student LINE User ID:', updateError);
        return {
          isValid: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        };
      }

      return { isValid: true, message: `‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nDisplay Name: ${userDisplayName}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô` };
    }

    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô parent_line_links ‡∏î‡πâ‡∏ß‡∏¢ line_display_id
    const { data: parentLineIdData, error: parentLineIdError } = await supabase
      .from('parent_line_links')
      .select('*')
      .eq('parent_id', parentId)
      .eq('line_display_id', userDisplayName)
      .eq('active', true)
      .single();

    if (parentLineIdData && !parentLineIdError) {
      // ‡∏û‡∏ö line_display_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_user_id
      const { error: updateError } = await supabase
        .from('parent_line_links')
        .update({ 
          line_user_id: userId,
          linked_at: new Date().toISOString()
        })
        .eq('parent_id', parentId)
        .eq('line_display_id', userDisplayName)
        .eq('active', true);

      if (updateError) {
        console.error('Error updating parent LINE User ID:', updateError);
        return {
          isValid: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        };
      }

      return { isValid: true, message: `‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nDisplay Name: ${userDisplayName}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á` };
    }

    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö line_display_id ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö line_user_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô student_line_links ‡∏î‡πâ‡∏ß‡∏¢ line_user_id
    const { data: studentLineData, error: studentError } = await supabase
      .from('student_line_links')
      .select('*')
      .eq('student_id', studentId)
      .eq('active', true)
      .single();

    if (studentLineData && !studentError) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ LINE User ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (studentLineData.line_user_id && studentLineData.line_user_id !== userId) {
        return {
          isValid: false,
          message: 'LINE ID ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        };
      }

      // ‡∏ñ‡πâ‡∏≤ LINE User ID ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      if (!studentLineData.line_user_id || studentLineData.line_user_id.trim() === '') {
        const { error: updateError } = await supabase
          .from('student_line_links')
          .update({ 
            line_user_id: userId,
            linked_at: new Date().toISOString()
          })
          .eq('student_id', studentId)
          .eq('active', true);

        if (updateError) {
          console.error('Error updating student LINE ID:', updateError);
          return {
            isValid: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
        }
      }

      return { isValid: true, message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE ID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)' };
    }

    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô parent_line_links ‡∏î‡πâ‡∏ß‡∏¢ line_user_id
    const { data: parentLineData, error: parentError } = await supabase
      .from('parent_line_links')
      .select('*')
      .eq('parent_id', parentId)
      .eq('active', true)
      .single();

    if (parentLineData && !parentError) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ LINE User ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (parentLineData.line_user_id && parentLineData.line_user_id !== userId) {
        return {
          isValid: false,
          message: 'LINE ID ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        };
      }

      // ‡∏ñ‡πâ‡∏≤ LINE User ID ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      if (!parentLineData.line_user_id || parentLineData.line_user_id.trim() === '') {
        const { error: updateError } = await supabase
          .from('parent_line_links')
          .update({ 
            line_user_id: userId,
            linked_at: new Date().toISOString()
          })
          .eq('parent_id', parentId)
          .eq('active', true);

        if (updateError) {
          console.error('Error updating parent LINE ID:', updateError);
          return {
            isValid: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
        }
      }

      return { isValid: true, message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE ID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á)' };
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    return {
      isValid: false,
      message: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Display Name "${userDisplayName}" ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô\n‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß`
    };

  } catch (error) {
    console.error('Error validating LINE ID:', error);
    return {
      isValid: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    };
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 * @param {Object} event - LINE webhook event
 */
export async function handleDriverCommand(event) {
  await replyLineMessage(event.replyToken, {
    type: 'text',
    text: 'üöå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•'
  });
}



/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏î‡πà‡∏ß‡∏ô (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ/‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ)
 * @param {Object} event - LINE webhook event
 * @param {string} when - 'today' ‡∏´‡∏£‡∏∑‡∏≠ 'tomorrow'
 */
export async function handleQuickLeave(event, when) {
  const userId = event.source.userId;

  try {
    const studentData = await getStudentByLineId(userId);

    if (!studentData) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤\n‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'
      });
      return;
    }

    const currentDate = new Date();
    let leaveDate = new Date(currentDate);

    if (when === 'tomorrow') {
      leaveDate.setDate(leaveDate.getDate() + 1);
    }

    const leaveDateStr = leaveDate.toLocaleDateString('th-TH');
    const submitTimeStr = currentDate.toLocaleString('th-TH');

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { data, error } = await supabase
      .from('leave_requests')
      .insert({
        student_id: studentData.student.student_id,
        leave_type: 'personal',
        leave_date: leaveDate.toISOString().split('T')[0],
        reason: when === 'today' ? '‡∏•‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ' : '‡∏•‡∏≤‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ',
        status: 'approved',
        created_at: currentDate.toISOString()
      })
      .select();

    if (error) {
      throw error;
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤
    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: `‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${studentData.student.student_name}\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤: ${leaveDateStr}\n‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á: ${submitTimeStr}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß`
    });

  } catch (error) {
    console.error('Error handling quick leave:', error);
    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
 * @param {Object} event - LINE webhook event
 */
export async function handleHistoryRequest(event) {
  const userId = event.source.userId;

  try {
    // ‡πÉ‡∏ä‡πâ getStudentByLineId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    const studentData = await getStudentByLineId(userId);
    
    if (!studentData || !studentData.student) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥\n‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'
      });
      return;
    }

    const student = studentData.student;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å Supabase
    const { data: fullStudentData, error: studentError } = await supabase
      .from('students')
      .select(`
        student_id,
        student_name,
        grade,
        start_date,
        end_date,
        parent_id,
        parents:parent_id(
          parent_name
        )
      `)
      .eq('student_id', student.student_id)
      .single();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RFID Card ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const { data: rfidData, error: rfidError } = await supabase
      .from('rfid_card_assignments')
      .select(`
        rfid_cards(
          rfid_code
        )
      `)
      .eq('student_id', student.student_id)
      .is('valid_to', null)
      .single();

    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
    console.log('Full student data:', fullStudentData);
    console.log('Student error:', studentError);
    console.log('RFID data:', rfidData);
    console.log('RFID error:', rfidError);
    
    if (studentError) {
      console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ:', studentError);
    }

    // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const { data: history, error } = await supabase
      .from('travel_history')
      .select('*')
      .eq('student_id', student.student_id)
      .order('travel_date', { ascending: false })
      .limit(10);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const flexMessage = createStudentInfoBubble(fullStudentData, rfidData, history);

    await replyLineMessage(event.replyToken, flexMessage);
  } catch (error) {
    console.error('Error handling history request:', error);
    // Only reply once - don't use push message as fallback to prevent spam
    try {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    } catch (replyError) {
      console.error('Reply token already used or invalid:', replyError);
      // Don't use push message fallback to prevent duplicate messages
      console.log('‚ö†Ô∏è Skipping push message fallback to prevent spam');
    }
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (Push message version)
 * @param {string} userId - LINE User ID
 */
export async function handleHistoryRequestPush(userId) {
  try {
    // ‡πÉ‡∏ä‡πâ getStudentByLineId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    const studentData = await getStudentByLineId(userId);
    
    if (!studentData || !studentData.student) {
      await sendLineMessage(userId, [{
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥\n‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'
      }]);
      return;
    }

    const student = studentData.student;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å Supabase
    const { data: fullStudentData, error: studentError } = await supabase
      .from('students')
      .select(`
        student_id,
        student_name,
        grade,
        start_date,
        end_date,
        parent_id,
        parents:parent_id(
          parent_name
        )
      `)
      .eq('student_id', student.student_id)
      .single();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RFID Card ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const { data: rfidData, error: rfidError } = await supabase
      .from('rfid_card_assignments')
      .select(`
        rfid_cards(
          rfid_code
        )
      `)
      .eq('student_id', student.student_id)
      .is('valid_to', null)
      .single();
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    let infoText = `üë¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n`;
    infoText += `‡∏ä‡∏∑‡πà‡∏≠: ${fullStudentData?.student_name || student.student_name || '-'}\n`;
    infoText += `‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${fullStudentData?.student_id || student.student_id || '-'}\n`;
    infoText += `‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${fullStudentData?.grade || '-'}\n`;
    infoText += `‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ï‡∏£ RFID: ${rfidData?.rfid_cards?.rfid_code || '-'}\n`;
    infoText += `‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${fullStudentData?.parents?.parent_name || '-'}\n`;
    
    const startDate = fullStudentData?.start_date ? 
      new Date(fullStudentData.start_date).toLocaleDateString('th-TH') : '-';
    const endDate = fullStudentData?.end_date ? 
      new Date(fullStudentData.end_date).toLocaleDateString('th-TH') : '-';
    
    infoText += `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô-‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á: ${startDate} - ${endDate}\n`;

    // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const { data: history, error } = await supabase
      .from('travel_history')
      .select('*')
      .eq('student_id', student.student_id)
      .order('travel_date', { ascending: false })
      .limit(10);

    let historyText = '';
    if (history && history.length > 0) {
      historyText = '\nüìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n';
      history.forEach((record, index) => {
        const date = new Date(record.travel_date).toLocaleDateString('th-TH');
        historyText += `${index + 1}. ${date}\n`;
        historyText += `   üöå ${record.pickup_time || 'N/A'} - ${record.dropoff_time || 'N/A'}\n`;
        historyText += `   üìç ${record.status || 'N/A'}\n`;
      });
    }

    await sendLineMessage(userId, [{
      type: 'text',
      text: infoText + historyText
    }]);
  } catch (error) {
    console.error('Error handling history request push:', error);
    await sendLineMessage(userId, [{
      type: 'text',
      text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    }]);
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
 * @param {Object} event - LINE webhook event
 */
export async function handleLeaveRequestMenu(event) {
  const userId = event.source.userId;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
    const lastSentTime = userLeaveFormStates.get(userId);
    const currentTime = Date.now();
    const cooldownPeriod = 5000; // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    
    if (lastSentTime && (currentTime - lastSentTime) < cooldownPeriod) {
      const remainingTimeMs = cooldownPeriod - (currentTime - lastSentTime);
      const remainingSeconds = Math.ceil(remainingTimeMs / 1000); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      console.log(`üö´ Leave form cooldown active for user ${userId}, remaining: ${remainingSeconds} seconds`);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° cooldown ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      if (remainingSeconds > 2) {
        await replyLineMessage(event.replyToken, {
          type: 'text',
          text: `‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${remainingSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà`
        });
      }
      return;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å LINE ID
    const studentData = await getStudentByLineId(userId);

    if (!studentData) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
      return;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    userLeaveFormStates.set(userId, currentTime);
    console.log(`üìù Leave form sent to user ${userId} at ${new Date(currentTime).toISOString()}`);

    const formUrl = `${config.liffAppUrl}/leave-form?studentId=${studentData.student.student_id}&studentName=${encodeURIComponent(studentData.student.student_name)}&grade=${encodeURIComponent(studentData.student.grade || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}`;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤
    const flexMessage = createLeaveRequestBubble(studentData, formUrl);

    // ‡πÉ‡∏ä‡πâ reply message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    await replyLineMessage(event.replyToken, flexMessage);

  } catch (error) {
    console.error('Error handling leave request menu:', error);
    // ‡πÉ‡∏ä‡πâ reply message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (event.replyToken) {
      await replyLineMessage(event.replyToken, {
        type: 'text',
        text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î (Push message version)
 * @param {string} userId - LINE User ID
 */
export async function handleLeaveRequestMenuPush(userId) {
  console.log(`üìù handleLeaveRequestMenuPush called for user: ${userId}`);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
    const lastSentTime = userLeaveFormStates.get(userId);
    const currentTime = Date.now();
    const cooldownPeriod = 5000; // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    
    if (lastSentTime && (currentTime - lastSentTime) < cooldownPeriod) {
      const remainingTimeMs = cooldownPeriod - (currentTime - lastSentTime);
      const remainingSeconds = Math.ceil(remainingTimeMs / 1000); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      console.log(`üö´ Leave form cooldown active for user ${userId}, remaining: ${remainingSeconds} seconds`);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° cooldown ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      if (remainingSeconds > 2) {
        await sendLineMessage(userId, {
          type: 'text',
          text: `‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${remainingSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà`
        });
      }
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    const { linked, student } = await checkLinkStatus(userId);
    if (!linked || !student) {
      await sendLineMessage(userId, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å'
      });
      return;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const studentData = await getStudentByLineId(userId);
    if (!studentData || !studentData.student) {
      await sendLineMessage(userId, {
        type: 'text',
        text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
      });
      return;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    userLeaveFormStates.set(userId, currentTime);
    console.log(`üìù Leave form sent to user ${userId} at ${new Date(currentTime).toISOString()}`);

    const leaveText = `‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î\n\n` +
      `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î\n\n` +
      `‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n` +
      `‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏ß‡∏±‡∏ô\n\n` +
      `üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:\n` +
      `‡∏ä‡∏∑‡πà‡∏≠: ${studentData.student.student_name}\n` +
      `‡∏£‡∏´‡∏±‡∏™: ${studentData.student.student_id}\n` +
      `‡∏ä‡∏±‡πâ‡∏ô: ${studentData.student.grade || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n` +
      `üîó ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î:\n` +
      `${config.liffAppUrl}/leave-form?studentId=${studentData.student.student_id}&studentName=${encodeURIComponent(studentData.student.student_name)}&grade=${encodeURIComponent(studentData.student.grade || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}`;

    await sendLineMessage(userId, {
      type: 'text',
      text: leaveText
    });

  } catch (error) {
    console.error('Error handling leave request menu push:', error);
    await sendLineMessage(userId, {
      type: 'text',
      text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
 * @param {Object} event - LINE webhook event
 */
export async function handleBusLocationRequest(event) {
  const userId = event.source.userId;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  const { linked, student } = await checkLinkStatus(userId);
  
  if (!linked) {
    await replyLineMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å'
    });
    return;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
  const baseUrl = config.liffAppUrl;
  const mapUrl = `${baseUrl}/bus-location.html`;

  await replyLineMessage(event.replyToken, {
    type: 'template',
    altText: 'üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™ - ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå',
    template: {
      type: 'buttons',
      thumbnailImageUrl: 'https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj2gcdtwqdBqnqddViqekDMhnpWWWowbpSiM7ambAAprlMIEE1R6bisb6Ld8ZWvRdsvq5xFv9y1pxpKsG0K3soAqvr_w2E6uZmfvSZ-nNu7daAixhcSbk2TDhyphenhyphen3LuYrC5Awra1_at7xnkCH/s1600/map.png',
      imageAspectRatio: 'rectangle',
      imageSize: 'cover',
      title: 'üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™',
      text: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå\n‡∏î‡∏π‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
      actions: [
        {
          type: 'uri',
          label: '‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
          uri: mapUrl
        }
      ]
    }
  });
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ (Push message version)
 * @param {string} userId - LINE User ID
 */
export async function handleBusLocationRequestPush(userId) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  const { linked, student } = await checkLinkStatus(userId);
  
  if (!linked) {
    await sendLineMessage(userId, [{
      type: 'text',
      text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 6 ‡∏´‡∏•‡∏±‡∏Å'
    }]);
    return;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
  const baseUrl = config.liffAppUrl;
  const mapUrl = `${baseUrl}/bus-location.html`;

  await sendLineMessage(userId, [{
    type: 'template',
    altText: 'üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™ - ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå',
    template: {
      type: 'buttons',
      thumbnailImageUrl: 'https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj2gcdtwqdBqnqddViqekDMhnpWWWowbpSiM7ambAAprlMIEE1R6bisb6Ld8ZWvRdsvq5xFv9y1pxpKsG0K3soAqvr_w2E6uZmfvSZ-nNu7daAixhcSbk2TDhyphenhyphen3LuYrC5Awra1_at7xnkCH/s1600/map.png',
      imageAspectRatio: 'rectangle',
      imageSize: 'cover',
      title: 'üöå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™',
      text: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå\n‡∏î‡∏π‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
      actions: [
        {
          type: 'uri',
          label: '‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
          uri: mapUrl
        },
        {
          type: 'postback',
          label: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä',
          data: 'action=location'
        }
      ]
    }
  }]);
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 * @param {Object} event - LINE webhook event
 */
export async function handleContactDriverRequest(event) {
  const userId = event.source.userId;
  const replyToken = event.replyToken;
  
  try {
    console.log('üîç [DEBUG] handleContactDriverRequest called for userId:', userId);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö replyToken ‡∏Å‡πà‡∏≠‡∏ô
    if (!replyToken) {
      console.error('‚ùå No reply token provided');
      return;
    }
    
    console.log('üìû [INFO] Fetching driver ID 1 with route information');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    const { data: driverData, error: driverError } = await supabase
      .from('driver_bus')
      .select(`
        driver_id,
        driver_name,
        phone_number,
        license_plate,
        route_id,
        routes (
          route_name,
          start_point
        )
      `)
      .eq('driver_id', 1)
      .single();
    
    console.log('üîç [DEBUG] Driver query result:', { driverData, driverError });
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
    if (driverError || !driverData) {
      console.log('‚ùå [DEBUG] No driver data found, sending fallback message');
      await replyLineMessage(replyToken, {
        type: 'text',
        text: 'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ\n\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á\n\nüìû ‡πÇ‡∏ó‡∏£: 043-754-321\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: 08:00 - 16:30 ‡∏ô.'
      });
      return;
    }
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö template
    const contactData = {
      driver_name: driverData.driver_name || '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
      phone_number: driverData.phone_number || '043-754-321',
      license_plate: driverData.license_plate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      start_point: driverData.routes?.start_point || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    };
    
    console.log('üîç [DEBUG] Contact data prepared:', contactData);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
    const flexMessage = createContactDriverBubble(contactData);
    
    // ‡∏™‡πà‡∏á Flex Message
    await replyLineMessage(replyToken, flexMessage);
    console.log('‚úÖ [DEBUG] Contact driver Flex Message sent successfully');

  } catch (error) {
    console.error('‚ùå Error in handleContactDriverRequest:', error);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    try {
      if (replyToken) {
        await replyLineMessage(replyToken, {
          type: 'text',
          text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á:\nüìû 043-754-321\n\n‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å üôè'
        });
      }
    } catch (replyError) {
      console.error('‚ùå Failed to send error message:', replyError);
    }
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö (Push message version)
 * @param {string} userId - LINE User ID
 */
export async function handleContactDriverRequestPush(userId) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö ID 1 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    const { data: driverData, error } = await supabase
      .from('driver_bus')
      .select(`
        driver_id,
        driver_name,
        phone_number,
        license_plate,
        route_id,
        routes!inner(start_point)
      `)
      .eq('driver_id', 1)
      .single();

    if (error || !driverData) {
      console.error('Error fetching driver data:', error);
      await sendLineMessage(userId, [{
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      }]);
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
    const flexMessage = createContactDriverBubble({
      driverName: driverData.driver_name,
      phoneNumber: driverData.phone_number,
      licensePlate: driverData.license_plate,
      address: driverData.routes?.start_point || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      workingHours: '06:00 - 17:00 ‡∏ô.'
    });

    await sendLineMessage(userId, [flexMessage]);

  } catch (error) {
    console.error('Error in handleContactDriverRequestPush:', error);
    await sendLineMessage(userId, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    }]);
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
 * @param {Object} event - LINE webhook event
 * @param {string} linkCode - ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
 */
export async function handleLinkCodeVerification(event, linkCode) {
  const userId = event.source.userId;
  const replyToken = event.replyToken;

  console.log(`üîó Link code verification: ${linkCode} from user: ${userId}`);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { linked } = await checkLinkStatus(userId);
    
    if (linked) {
      await replyLineMessage(replyToken, {
        type: 'text',
        text: '‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ'
      });
      return;
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
    const verifyResponse = await fetch(`${process.env.VERCEL_URL || 'http://localhost:3000'}/api/verify-link-code`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        linkCode: linkCode,
        lineUserId: userId
      })
    });

    const result = await verifyResponse.json();

    if (result.success) {
      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const userTypeText = result.userType === 'student' ? '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' : '‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á';
      
      await replyLineMessage(replyToken, [
        {
          type: 'text',
          text: `‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á LINE ID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüë§ ‡∏ä‡∏∑‡πà‡∏≠: ${result.userData.name}\nüÜî ‡∏£‡∏´‡∏±‡∏™: ${result.userData.id}\nüìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${userTypeText}\n\nüéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Safety Bus!`
        },
        {
          type: 'text',
          text: 'üöå ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß\n\nüì± ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠:\n‚Ä¢ ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏±‡∏™\n‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î\n‚Ä¢ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ'
        }
      ]);

      // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
      await sendMainMenu(userId);

    } else {
      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      let errorMessage = '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á LINE ID ‡πÑ‡∏î‡πâ\n\n';
      
      if (result.message.includes('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á')) {
        errorMessage += 'üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
      } else if (result.message.includes('‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏')) {
        errorMessage += '‚è∞ ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ';
      } else if (result.message.includes('‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß')) {
        errorMessage += 'üîÑ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ';
      } else if (result.message.includes('‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô')) {
        errorMessage += 'üë• LINE ID ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ LINE ID ‡∏≠‡∏∑‡πà‡∏ô';
      } else {
        errorMessage += result.message;
      }

      await replyLineMessage(replyToken, {
        type: 'text',
        text: errorMessage
      });
    }

  } catch (error) {
    console.error('Error in handleLinkCodeVerification:', error);
    
    await replyLineMessage(replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ'
    });
  }
}