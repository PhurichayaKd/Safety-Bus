require('dotenv').config({ path: '../safety-bus-bot/vercel-deploy/.env.local' });

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase configuration');
  console.log('SUPABASE_URL:', supabaseUrl ? 'Set' : 'Missing');
  console.log('SUPABASE_ANON_KEY:', supabaseKey ? 'Set' : 'Missing');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkNotificationLogsTable() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á notification_logs...\n');

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const { data: columns, error: columnsError } = await supabase
      .rpc('get_table_columns', { table_name: 'notification_logs' })
      .single();

    if (columnsError) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ RPC function ‡πÑ‡∏î‡πâ, ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
      
      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
      const { data: sampleData, error: sampleError } = await supabase
        .from('notification_logs')
        .select('*')
        .limit(1);

      if (sampleError) {
        console.error('‚ùå Error accessing notification_logs:', sampleError.message);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const { data: tableExists, error: tableError } = await supabase
          .from('information_schema.tables')
          .select('table_name')
          .eq('table_name', 'notification_logs')
          .eq('table_schema', 'public');

        if (tableError) {
          console.error('‚ùå Error checking table existence:', tableError.message);
        } else if (tableExists && tableExists.length > 0) {
          console.log('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á notification_logs ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
        } else {
          console.log('‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á notification_logs ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
        }
      } else {
        console.log('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á notification_logs ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
        if (sampleData && sampleData.length > 0) {
          console.log('üìã Columns ‡∏ó‡∏µ‡πà‡∏û‡∏ö:', Object.keys(sampleData[0]));
        } else {
          console.log('üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π columns ‡πÑ‡∏î‡πâ');
        }
      }
    } else {
      console.log('‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á:', columns);
    }

    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤ column ‡πÑ‡∏´‡∏ô‡∏Ç‡∏≤‡∏î
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    const testData = {
      student_id: 'test_student',
      driver_id: 1,
      notification_type: 'test',
      message: 'Test message',
      status: 'test'
    };

    const { data: insertData, error: insertError } = await supabase
      .from('notification_logs')
      .insert(testData)
      .select();

    if (insertError) {
      console.error('‚ùå Insert Error:', insertError.message);
      console.log('üí° ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ column ‡πÑ‡∏´‡∏ô‡∏Ç‡∏≤‡∏î');
    } else {
      console.log('‚úÖ Insert ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', insertData);
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await supabase
        .from('notification_logs')
        .delete()
        .eq('message', 'Test message');
    }

  } catch (error) {
    console.error('‚ùå Unexpected error:', error.message);
  }
}

checkNotificationLogsTable();