// routes/api.js
import express from 'express';
import { supabase } from '../lib/db.js';
import { notifyParent, notifyMultipleParents, broadcastEmergency } from '../lib/notifications.js';
import { lineClient } from '../lib/line.js';
import {
  createValidationMiddleware,
  apiKeyMiddleware,
  rfidScanSchema,
  emergencySchema,
  busLocationSchema,
  delayNotificationSchema,
  attendanceCheckSchema,
  testNotificationSchema,
  linkAccountSchema
} from '../lib/validation.js';
import { linkByStudentId, checkLinkStatus } from '../lib/account-linking.js';
import { getStudentByLineId } from '../lib/student-data.js';
import { saveLeaveRequest } from '../lib/leave-form.js';
import jwt from 'jsonwebtoken';
const router = express.Router();

// ‡πÉ‡∏ä‡πâ middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å route ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô LIFF endpoints
router.use((req, res, next) => {
  // ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô LIFF endpoints ‡∏à‡∏≤‡∏Å API key validation
  if (req.path === '/student-info' || req.path === '/submit-leave') {
    return next();
  }
  return apiKeyMiddleware(req, res, next);
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á‡∏£‡∏ñ (‡∏à‡∏≤‡∏Å RFID Scanner)
router.post('/rfid-scan', createValidationMiddleware(rfidScanSchema), async (req, res) => {
  try {
    const { 
      student_id, 
      rfid_tag, 
      scan_type, // 'pickup' ‡∏´‡∏£‡∏∑‡∏≠ 'dropoff'
      bus_number,
      location,
      coordinates,
      timestamp 
    } = req.body;
    
    console.log(`üì° RFID Scan received: ${student_id} - ${scan_type}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!student_id || !scan_type) {
      return res.status(400).json({ 
        error: 'Missing required fields', 
        required: ['student_id', 'scan_type'] 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    const { data: student } = await supabase
      .from('students')
      .select('*')
      .eq('student_id', student_id)
      .single();
    
    if (!student) {
      return res.status(404).json({ 
        error: 'Student not found', 
        student_id 
      });
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
    const { data: trip, error: tripError } = await supabase
      .from('trips')
      .insert({
        student_id,
        type: scan_type,
        bus_number,
        location,
        coordinates,
        rfid_tag,
        timestamp: timestamp || new Date().toISOString()
      })
      .select()
      .single();
    
    if (tripError) {
      console.error('‚ùå Error saving trip:', tripError);
      return res.status(500).json({ error: 'Failed to save trip data' });
    }
    
    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
    const notificationSent = await notifyParent(student_id, scan_type, {
      location,
      busNumber: bus_number,
      coordinates,
      timestamp
    });
    
    res.json({
      success: true,
      trip_id: trip.id,
      notification_sent: notificationSent,
      message: `${scan_type} recorded successfully`
    });
    
  } catch (error) {
    console.error('‚ùå RFID scan error:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: error.message 
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
router.post('/emergency', createValidationMiddleware(emergencySchema), async (req, res) => {
  try {
    const {
      bus_number,
      location,
      coordinates,
      emergency_type, // 'fire', 'accident', 'medical', 'other'
      description,
      severity, // 'low', 'medium', 'high', 'critical'
      reported_by // 'driver', 'sensor', 'student', 'manual'
    } = req.body;
    
    console.log(`üö® Emergency alert: ${emergency_type} on bus ${bus_number}`);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
    const { data: emergency, error: emergencyError } = await supabase
      .from('emergencies')
      .insert({
        bus_number,
        location,
        coordinates,
        emergency_type,
        description,
        severity: severity || 'medium',
        reported_by: reported_by || 'system',
        status: 'active',
        timestamp: new Date().toISOString()
      })
      .select()
      .single();
    
    if (emergencyError) {
      console.error('‚ùå Error saving emergency:', emergencyError);
      return res.status(500).json({ error: 'Failed to save emergency data' });
    }
    
    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    const broadcastSent = await broadcastEmergency({
      busNumber: bus_number,
      location,
      coordinates,
      emergencyType: emergency_type,
      description,
      severity
    });
    
    res.json({
      success: true,
      emergency_id: emergency.id,
      broadcast_sent: broadcastSent,
      message: 'Emergency alert sent'
    });
    
  } catch (error) {
    console.error('‚ùå Emergency alert error:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: error.message 
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ (‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö)
router.post('/bus-location', createValidationMiddleware(busLocationSchema), async (req, res) => {
  try {
    const {
      bus_number,
      driver_id,
      latitude,
      longitude,
      speed,
      heading,
      accuracy,
      timestamp
    } = req.body;
    
    if (!bus_number || !latitude || !longitude) {
      return res.status(400).json({ 
        error: 'Missing required fields', 
        required: ['bus_number', 'latitude', 'longitude'] 
      });
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ
    const { error: locationError } = await supabase
      .from('bus_locations')
      .upsert({
        bus_number,
        driver_id,
        latitude,
        longitude,
        speed: speed || 0,
        heading: heading || 0,
        accuracy: accuracy || 0,
        timestamp: timestamp || new Date().toISOString(),
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'bus_number'
      });
    
    if (locationError) {
      console.error('‚ùå Error saving location:', locationError);
      return res.status(500).json({ error: 'Failed to save location data' });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Geo-fence (‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á)
    await checkGeofence(bus_number, latitude, longitude);
    
    res.json({
      success: true,
      message: 'Location updated successfully'
    });
    
  } catch (error) {
    console.error('‚ùå Location update error:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: error.message 
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤
router.post('/delay-notification', createValidationMiddleware(delayNotificationSchema), async (req, res) => {
  try {
    const {
      bus_number,
      route_id,
      delay_minutes,
      reason,
      affected_stops
    } = req.body;
    
    console.log(`‚è∞ Delay notification: Bus ${bus_number} delayed ${delay_minutes} minutes`);
    
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
    const { data: affectedStudents } = await supabase
      .from('students')
      .select('student_id')
      .in('pickup_stop', affected_stops || []);
    
    if (affectedStudents && affectedStudents.length > 0) {
      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
      const notifications = affectedStudents.map(student => ({
        studentId: student.student_id,
        type: 'late_pickup',
        payload: {
          busNumber: bus_number,
          delayMinutes: delay_minutes,
          reason,
          stopName: affected_stops?.[0] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        }
      }));
      
      await notifyMultipleParents(notifications);
    }
    
    res.json({
      success: true,
      affected_students: affectedStudents?.length || 0,
      message: 'Delay notification sent'
    });
    
  } catch (error) {
    console.error('‚ùå Delay notification error:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: error.message 
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
router.post('/check-attendance', createValidationMiddleware(attendanceCheckSchema), async (req, res) => {
  try {
    const { date, route_id } = req.body;
    const checkDate = date || new Date().toISOString().split('T')[0];
    
    console.log(`üìä Checking attendance for ${checkDate}`);
    
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const { data: expectedStudents } = await supabase
      .from('students')
      .select('student_id, name')
      .eq('active', true);
    
    if (!expectedStudents) {
      return res.json({ success: true, absent_students: [] });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡πâ‡∏≤‡∏á
    const { data: presentStudents } = await supabase
      .from('trips')
      .select('student_id')
      .eq('type', 'pickup')
      .gte('timestamp', `${checkDate}T00:00:00Z`)
      .lt('timestamp', `${checkDate}T23:59:59Z`);
    
    const presentIds = presentStudents?.map(s => s.student_id) || [];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏Ñ‡∏£‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
    const { data: onLeave } = await supabase
      .from('student_leaves')
      .select('student_id')
      .eq('leave_date', checkDate)
      .eq('status', 'approved');
    
    const leaveIds = onLeave?.map(s => s.student_id) || [];
    
    // ‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏≤)
    const absentStudents = expectedStudents.filter(student => 
      !presentIds.includes(student.student_id) && 
      !leaveIds.includes(student.student_id)
    );
    
    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    if (absentStudents.length > 0) {
      const notifications = absentStudents.map(student => ({
        studentId: student.student_id,
        type: 'absent_alert',
        payload: {
          date: checkDate,
          studentName: student.name
        }
      }));
      
      await notifyMultipleParents(notifications);
    }
    
    res.json({
      success: true,
      date: checkDate,
      total_students: expectedStudents.length,
      present_students: presentIds.length,
      on_leave: leaveIds.length,
      absent_students: absentStudents.length,
      absent_list: absentStudents
    });
    
  } catch (error) {
    console.error('‚ùå Attendance check error:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: error.message 
    });
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Geo-fence
async function checkGeofence(busNumber, latitude, longitude) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { data: stops } = await supabase
      .from('bus_stops')
      .select('*')
      .eq('active', true);
    
    if (!stops) return;
    
    for (const stop of stops) {
      const distance = calculateDistance(
        latitude, longitude,
        stop.latitude, stop.longitude
      );
      
      // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 500 ‡πÄ‡∏°‡∏ï‡∏£
      if (distance <= 0.5) {
        console.log(`üìç Bus ${busNumber} approaching ${stop.name}`);
        
        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
        const { data: students } = await supabase
          .from('students')
          .select('student_id')
          .eq('pickup_stop', stop.name)
          .eq('active', true);
        
        if (students && students.length > 0) {
          // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô "‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß"
          const notifications = students.map(student => ({
            studentId: student.student_id,
            type: 'approaching',
            payload: {
              stopName: stop.name,
              busNumber,
              estimatedMinutes: Math.ceil(distance * 2) // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
            }
          }));
          
          await notifyMultipleParents(notifications);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Geofence check error:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (Haversine formula)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
router.post('/test-notification', createValidationMiddleware(testNotificationSchema), async (req, res) => {
  try {
    const { student_id, notification_type, test_payload } = req.body;
    
    if (!student_id || !notification_type) {
      return res.status(400).json({ 
        error: 'Missing required fields', 
        required: ['student_id', 'notification_type'] 
      });
    }
    
    const success = await notifyParent(student_id, notification_type, test_payload || {});
    
    res.json({
      success,
      message: success ? 'Test notification sent' : 'Failed to send notification'
    });
    
  } catch (error) {
    console.error('‚ùå Test notification error:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: error.message 
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
router.post('/link-by-student-id', createValidationMiddleware(linkAccountSchema), async (req, res) => {
  try {
    const { lineUserId, studentId, parentName, phoneNumber } = req.body;
    
    console.log(`üîó Link account request: ${studentId} -> ${lineUserId}`);
    
    const result = await linkByStudentId(lineUserId, studentId, parentName, phoneNumber);
    
    if (result.success) {
      res.json({
        success: true,
        message: 'Account linked successfully',
        data: {
          link_id: result.link_id,
          parent_name: result.parent_name,
          student_name: result.student_name,
          student_id: result.student_id
        }
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
    
  } catch (error) {
    console.error('‚ùå Link account error:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to link account' 
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å LIFF
router.post('/student-info', async (req, res) => {
  try {
    const { idToken, userId } = req.body;
    
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'Missing userId'
      });
    }
    
    console.log(`üìã Getting student info for LIFF: ${userId}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    const linkStatus = await checkLinkStatus(userId);
    
    if (!linkStatus.isLinked) {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô'
      });
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const studentData = await getStudentByLineId(userId);
    
    if (!studentData) {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      });
    }
    
    res.json({
      success: true,
      data: studentData
    });
    
  } catch (error) {
    console.error('‚ùå Error getting student info:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏à‡∏≤‡∏Å LIFF
router.post('/submit-leave', async (req, res) => {
  try {
    const { student_id, leave_type, leave_dates, reason, parent_id, userId } = req.body;
    
    if (!student_id || !leave_type || !leave_dates || !Array.isArray(leave_dates) || leave_dates.length === 0 || !reason) {
      return res.status(400).json({
        success: false,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      });
    }
    
    console.log(`üìù Submitting leave request: ${student_id} - ${leave_type} for ${leave_dates.length} days`);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å link_code ‡πÅ‡∏ó‡∏ô student_id)
    const { data: student, error: studentError } = await supabase
      .from('students')
      .select('*')
      .eq('link_code', student_id)
      .single();
    
    if (studentError || !student) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      });
    }
    
    // ‡πÉ‡∏ä‡πâ userId ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å client
    const lineUserId = userId;
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    const results = [];
    for (const leave_date of leave_dates) {
      const leaveData = {
        student_id: student.student_id,
        leave_type,
        leave_date,
        reason,
        parent_id: parent_id || student.parent_id
      };
      
      const result = await saveLeaveRequest(leaveData);
      results.push({ date: leave_date, result });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const successCount = results.filter(r => r.result.success).length;
    const failedCount = results.length - successCount;
    
    if (successCount > 0) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      const leaveTypeText = {
        'sick': '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢',
        'personal': '‡∏•‡∏≤‡∏Å‡∏¥‡∏à',
        'absent': '‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      };
      
      const dateList = leave_dates.map(date => {
        const d = new Date(date + 'T00:00:00');
        return d.toLocaleDateString('th-TH');
      }).join(', ');
      
      const replyMessage = {
        type: 'text',
        text: `‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n` +
              `üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student.student_name}\n` +
              `üÜî ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student.student_id}\n` +
              `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤: ${dateList} (${leave_dates.length} ‡∏ß‡∏±‡∏ô)\n\n` +
              `‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß\n\n` +
              `‚ú® ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n\n` +
              `‚ùå ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"`
      };
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ LINE User ID
      if (lineUserId) {
        try {
          await lineClient.pushMessage(lineUserId, replyMessage);
          console.log(`‚úÖ Reply message sent to LINE user: ${lineUserId}`);
        } catch (lineError) {
          console.error('‚ùå Error sending LINE message:', lineError);
        }
      }
      
      console.log(`‚úÖ Leave request saved: ${student_id} (${successCount}/${results.length} days)`);
      res.json({
        success: true,
        message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount} ‡∏ß‡∏±‡∏ô` + (failedCount > 0 ? ` (‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${failedCount} ‡∏ß‡∏±‡∏ô)` : ''),
        data: {
          student,
          successful_dates: results.filter(r => r.result.success).map(r => r.date),
          failed_dates: results.filter(r => !r.result.success).map(r => r.date)
        }
      });
    } else {
      console.log(`‚ùå All leave requests failed for: ${student_id}`);
      res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÑ‡∏î‡πâ'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error submitting leave:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    });
  }
});

export default router;