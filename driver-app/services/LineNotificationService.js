// services/LineNotificationService.js
import AsyncStorage from '@react-native-async-storage/async-storage';

class LineNotificationService {
  constructor() {
    this.baseUrl = 'http://localhost:3000'; // URL ‡∏Ç‡∏≠‡∏á safety-bus-bot
    this.isEnabled = true;
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
   * @param {Object} emergency - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
   * @param {string} driverInfo - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
   */
  async sendEmergencyNotification(emergency, driverInfo = null) {
    if (!this.isEnabled) {
      console.log('LINE notifications are disabled');
      return { success: false, message: 'Notifications disabled' };
    }

    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏à‡∏≤‡∏Å AsyncStorage ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
      if (!driverInfo) {
        const storedDriverInfo = await AsyncStorage.getItem('driver_info');
        driverInfo = storedDriverInfo ? JSON.parse(storedDriverInfo) : null;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const message = this.formatEmergencyMessage(emergency, driverInfo);

      // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Bot API
      const response = await fetch(`${this.baseUrl}/api/send-emergency-notification`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          emergency,
          driverInfo,
          message,
          timestamp: new Date().toISOString(),
        }),
      });

      const result = await response.json();

      if (response.ok) {
        console.log('Emergency notification sent successfully:', result);
        return { success: true, data: result };
      } else {
        console.error('Failed to send emergency notification:', result);
        return { success: false, error: result.error || 'Unknown error' };
      }
    } catch (error) {
      console.error('Error sending emergency notification:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
   * @param {Object} emergency - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
   * @param {string} response - ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á (CHECKED, EMERGENCY)
   * @param {string} driverInfo - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
   */
  async sendResponseNotification(emergency, response, driverInfo = null) {
    if (!this.isEnabled) {
      console.log('LINE notifications are disabled');
      return { success: false, message: 'Notifications disabled' };
    }

    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏à‡∏≤‡∏Å AsyncStorage ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
      if (!driverInfo) {
        const storedDriverInfo = await AsyncStorage.getItem('driver_info');
        driverInfo = storedDriverInfo ? JSON.parse(storedDriverInfo) : null;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
      const message = this.formatResponseMessage(emergency, response, driverInfo);

      // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Bot API
      const apiResponse = await fetch(`${this.baseUrl}/api/send-response-notification`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          emergency,
          response,
          driverInfo,
          message,
          timestamp: new Date().toISOString(),
        }),
      });

      const result = await apiResponse.json();

      if (apiResponse.ok) {
        console.log('Response notification sent successfully:', result);
        return { success: true, data: result };
      } else {
        console.error('Failed to send response notification:', result);
        return { success: false, error: result.error || 'Unknown error' };
      }
    } catch (error) {
      console.error('Error sending response notification:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
   * @param {Object} emergency - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
   * @param {Object} driverInfo - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
   * @returns {string} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
   */
  formatEmergencyMessage(emergency, driverInfo) {
    const emergencyTypes = {
      DRIVER_PANIC: 'üö® ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
      SMOKE_DETECTED: 'üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏±‡∏ô',
      FIRE_DETECTED: 'üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ',
      ACCIDENT: 'üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏',
      MEDICAL_EMERGENCY: 'üè• ‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå',
      BREAKDOWN: 'üîß ‡∏£‡∏ñ‡πÄ‡∏™‡∏µ‡∏¢',
      SECURITY_THREAT: '‚ö†Ô∏è ‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
    };

    const typeLabel = emergencyTypes[emergency.type] || '‚ö†Ô∏è ‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    const driverName = driverInfo?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const busNumber = driverInfo?.license_plate || emergency.bus_id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    
    const time = new Date(emergency.created_at).toLocaleString('th-TH', {
      timeZone: 'Asia/Bangkok',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });

    let message = `üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô üö®\n\n`;
    message += `${typeLabel}\n\n`;
    message += `üìç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\n`;
    message += `‚Ä¢ ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${driverName}\n`;
    message += `‚Ä¢ ‡∏£‡∏ñ‡∏ö‡∏±‡∏™: ${busNumber}\n`;
    message += `‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${time}\n`;
    
    if (emergency.details) {
      message += `‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${emergency.details}\n`;
    }
    
    if (emergency.location) {
      message += `‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${emergency.location}\n`;
    }

    message += `\n‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`;

    return message;
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
   * @param {Object} emergency - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
   * @param {string} response - ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
   * @param {Object} driverInfo - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
   * @returns {string} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
   */
  formatResponseMessage(emergency, response, driverInfo) {
    const responseTypes = {
      CHECKED: '‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß - ‡∏õ‡∏Å‡∏ï‡∏¥',
      EMERGENCY: 'üö® ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
    };

    const responseLabel = responseTypes[response] || response;
    const driverName = driverInfo?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const busNumber = driverInfo?.license_plate || emergency.bus_id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    
    const time = new Date().toLocaleString('th-TH', {
      timeZone: 'Asia/Bangkok',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });

    let message = `üì¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô\n\n`;
    message += `${responseLabel}\n\n`;
    message += `üìç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\n`;
    message += `‚Ä¢ ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${driverName}\n`;
    message += `‚Ä¢ ‡∏£‡∏ñ‡∏ö‡∏±‡∏™: ${busNumber}\n`;
    message += `‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á: ${time}\n`;

    if (response === 'EMERGENCY') {
      message += `\nüö® ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏î‡πà‡∏ß‡∏ô!`;
    } else {
      message += `\n‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏Å‡∏ï‡∏¥`;
    }

    return message;
  }

  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE Bot
   */
  async testConnection() {
    try {
      const response = await fetch(`${this.baseUrl}/api/test-line-connection`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const result = await response.json();

      if (response.ok) {
        console.log('LINE connection test successful:', result);
        return { success: true, data: result };
      } else {
        console.error('LINE connection test failed:', result);
        return { success: false, error: result.error || 'Connection test failed' };
      }
    } catch (error) {
      console.error('Error testing LINE connection:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   * @param {boolean} enabled - ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î
   */
  setEnabled(enabled) {
    this.isEnabled = enabled;
    console.log(`LINE notifications ${enabled ? 'enabled' : 'disabled'}`);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á LINE Bot
   * @param {string} url - URL ‡πÉ‡∏´‡∏°‡πà
   */
  setBaseUrl(url) {
    this.baseUrl = url;
    console.log(`LINE Bot URL set to: ${url}`);
  }
}

// Export singleton instance
export default new LineNotificationService();