// lib/notifications.js
import { lineClient } from './line.js';
import { supabase } from './db.js';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
async function notifyParent(studentId, notificationType, payload) {
  try {
    console.log(`üì¢ Sending notification for student ${studentId}: ${notificationType}`);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LINE User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
    const { data: parentLink } = await supabase
      .from('parent_line_links')
      .select(`
        line_user_id,
        parents(name),
        students(name, student_id)
      `)
      .eq('students.student_id', studentId)
      .single();
    
    if (!parentLink || !parentLink.line_user_id) {
      console.log(`‚ö†Ô∏è No LINE account linked for student ${studentId}`);
      return false;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    const message = createNotificationMessage(notificationType, payload, parentLink.students.name);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    await lineClient.pushMessage(parentLink.line_user_id, message);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    await logNotification({
      student_id: studentId,
      parent_id: parentLink.parents?.id,
      line_user_id: parentLink.line_user_id,
      notification_type: notificationType,
      message_content: JSON.stringify(message),
      payload: JSON.stringify(payload),
      status: 'sent'
    });
    
    console.log(`‚úÖ Notification sent successfully to ${parentLink.line_user_id}`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå Error sending notification:`, error);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error log
    await logNotification({
      student_id: studentId,
      notification_type: notificationType,
      payload: JSON.stringify(payload),
      status: 'failed',
      error_message: error.message
    });
    
    return false;
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
function createNotificationMessage(type, payload, studentName) {
  const now = new Date();
  const timeStr = now.toLocaleTimeString('th-TH', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });
  const dateStr = now.toLocaleDateString('th-TH');
  
  switch (type) {
    case 'pickup':
      return {
        type: 'text',
        text: `üöå ‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß\n\nüë§ ${studentName}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${timeStr}\nüìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${payload.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\nüöç ‡∏£‡∏ñ: ${payload.busNumber || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n‚úÖ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
      };
    
    case 'dropoff':
      return {
        type: 'text',
        text: `üè† ‡∏•‡∏á‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß\n\nüë§ ${studentName}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${timeStr}\nüìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${payload.location || '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'}\nüöç ‡∏£‡∏ñ: ${payload.busNumber || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n‚úÖ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
      };
    
    case 'emergency':
      return {
        type: 'text',
        text: `üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô\n\nüë§ ${studentName}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${timeStr}\nüöç ‡∏£‡∏ñ: ${payload.busNumber || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\nüìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${payload.coordinates || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ó‡∏£ 191 ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`
      };
    
    case 'approaching':
      return {
        type: 'text',
        text: `üöå ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß\n\nüë§ ${studentName}\nüìç ‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á: ${payload.stopName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‚è±Ô∏è ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${payload.estimatedMinutes || 5} ‡∏ô‡∏≤‡∏ó‡∏µ\nüöç ‡∏£‡∏ñ: ${payload.busNumber || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\nüèÉ‚Äç‚ôÇÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏£‡∏≠‡∏£‡∏±‡∏ö`
      };
    
    case 'absent_alert':
      return {
        type: 'text',
        text: `‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\nüë§ ${studentName}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateStr}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${timeStr}\n\n‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥\n‡∏´‡∏≤‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`
      };
    
    case 'late_pickup':
      return {
        type: 'text',
        text: `‚è∞ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏ñ‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤\n\nüë§ ${studentName}\nüìç ‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö: ${payload.stopName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n‚è±Ô∏è ‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤: ${payload.delayMinutes || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ô‡∏≤‡∏ó‡∏µ\nüöç ‡∏£‡∏ñ: ${payload.busNumber || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\nüôè ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å`
      };
    
    default:
      return {
        type: 'text',
        text: `üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Safety Bus\n\nüë§ ${studentName}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${timeStr}\n\n${payload.message || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}`
      };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
async function notifyMultipleParents(notifications) {
  const results = await Promise.allSettled(
    notifications.map(({ studentId, type, payload }) => 
      notifyParent(studentId, type, payload)
    )
  );
  
  const successful = results.filter(r => r.status === 'fulfilled' && r.value).length;
  const failed = results.length - successful;
  
  console.log(`üìä Bulk notification results: ${successful} sent, ${failed} failed`);
  
  return { successful, failed, results };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)
async function broadcastEmergency(payload) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ LINE
    const { data: parentLinks } = await supabase
      .from('parent_line_links')
      .select(`
        line_user_id,
        parents(name),
        students(name)
      `);
    
    if (!parentLinks || parentLinks.length === 0) {
      console.log('‚ö†Ô∏è No parents with LINE accounts found');
      return false;
    }
    
    const message = {
      type: 'text',
      text: `üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - Safety Bus\n\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}\nüöç ‡∏£‡∏ñ: ${payload.busNumber || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\nüìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${payload.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n${payload.message || '‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'}\n\nüìû ‡πÇ‡∏ó‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: 191`
    };
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    const results = await Promise.allSettled(
      parentLinks.map(link => 
        lineClient.pushMessage(link.line_user_id, message)
      )
    );
    
    const successful = results.filter(r => r.status === 'fulfilled').length;
    const failed = results.length - successful;
    
    console.log(`üö® Emergency broadcast: ${successful} sent, ${failed} failed`);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
    await logNotification({
      notification_type: 'emergency_broadcast',
      message_content: JSON.stringify(message),
      payload: JSON.stringify(payload),
      status: 'sent',
      recipients_count: parentLinks.length,
      successful_count: successful,
      failed_count: failed
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error broadcasting emergency:', error);
    return false;
  }
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
async function logNotification(logData) {
  try {
    await supabase
      .from('notification_logs')
      .insert({
        ...logData,
        created_at: new Date().toISOString()
      });
  } catch (error) {
    console.error('‚ùå Error logging notification:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function testNotification(lineUserId, message = '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô') {
  try {
    await lineClient.pushMessage(lineUserId, {
      type: 'text',
      text: `üß™ ${message}\n\n‚è∞ ${new Date().toLocaleString('th-TH')}\n\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥`
    });
    
    console.log(`‚úÖ Test notification sent to ${lineUserId}`);
    return true;
  } catch (error) {
    console.error('‚ùå Test notification failed:', error);
    return false;
  }
}

export {
  notifyParent,
  notifyMultipleParents,
  broadcastEmergency,
  createNotificationMessage,
  logNotification,
  testNotification
};