// routes/link.js
import express from 'express';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { supabase } from '../lib/db.js';
import { consumeToken, markTokenUsed } from '../lib/tokens.js';
import { lineClient } from '../lib/line.js';

const router = express.Router();

async function verifyIdToken(idToken) {
  const params = new URLSearchParams();
  params.append('id_token', idToken);
  params.append('client_id', process.env.LINE_CHANNEL_ID); // ‡πÉ‡∏™‡πà Channel ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á LIFF

  const { data } = await axios.post('https://api.line.me/oauth2/v2.1/verify', params);
  return data; // data.sub = line userId
}

router.post('/confirm', async (req, res) => {
  try {
    const { token, idToken } = req.body;
    if (!token || !idToken) return res.status(400).json({ ok: false, message: 'missing token or idToken' });

    const idt = await verifyIdToken(idToken);
    const lineUserId = idt.sub;

    const row = await consumeToken(token); // ‡∏ï‡∏£‡∏ß‡∏à token ‡∏™‡∏î/‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ

    const { error: insErr } = await supabase.from('parent_line_links')
      .insert({ parent_id: row.parent_id, line_user_id: lineUserId });
    if (insErr && insErr.code !== '23505') throw insErr; // 23505 = unique violation (‡πÄ‡∏Ñ‡∏¢‡∏ú‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß)

    await markTokenUsed(token, lineUserId);

    await lineClient.pushMessage(lineUserId, {
      type: 'text',
      text: '‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üéâ',
      quickReply: {
        items: [
          { type: 'action', action: { type: 'message', label: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ' } },
          { type: 'action', action: { type: 'message', label: '‡∏•‡∏≤/‡πÑ‡∏°‡πà‡∏°‡∏≤', text: '‡∏•‡∏≤' } },
          { type: 'action', action: { type: 'uri', label: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ', uri: `${process.env.BASE_URL}/map` } }
        ]
      }
    });

    res.json({ ok: true, message: '‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ' });
  } catch (e) {
    console.error('link confirm error:', e.response?.data || e.message);
    res.status(400).json({ ok: false, message: e.message || 'link failed' });
  }
});

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIFF leave form
router.get('/leave-form', (req, res) => {
  try {
    const filePath = path.join(process.cwd(), 'server', 'public', 'leave-form.html');
    let html = fs.readFileSync(filePath, 'utf8');
    
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà LIFF_ID ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å environment
    html = html.replace('{{LIFF_ID}}', process.env.LINE_LIFF_ID);
    
    res.setHeader('Content-Type', 'text/html');
    res.send(html);
  } catch (error) {
    console.error('Error serving leave form:', error);
    res.status(500).send('Error loading leave form');
  }
});

export default router;
