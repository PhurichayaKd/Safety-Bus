import { supabase } from './db.js';

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE Display ID ‡∏Å‡∏±‡∏ö LINE User ID ‡∏à‡∏£‡∏¥‡∏á
 * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏ó‡∏µ‡πà Bot ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
 * @param {string} lineUserId - LINE User ID ‡∏à‡∏£‡∏¥‡∏á (U + 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
 * @param {string} lineDisplayId - LINE Display ID ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏≠‡∏á
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
 */
export async function matchLineIds(lineUserId, lineDisplayId) {
  try {
    console.log(`Attempting to match LINE IDs: User ID: ${lineUserId}, Display ID: ${lineDisplayId}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE User ID
    const lineUserIdPattern = /^U[a-f0-9]{32}$/i;
    if (!lineUserIdPattern.test(lineUserId)) {
      return {
        success: false,
        message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      };
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô student_line_links ‡∏î‡πâ‡∏ß‡∏¢ line_display_id
    const { data: studentData, error: studentError } = await supabase
      .from('student_line_links')
      .select(`
        *,
        students (
          student_name,
          grade
        )
      `)
      .eq('line_display_id', lineDisplayId)
      .eq('active', true)
      .single();

    if (studentData && !studentError) {
      // ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_user_id
      const { error: updateError } = await supabase
        .from('student_line_links')
        .update({
          line_user_id: lineUserId,
          linked_at: new Date().toISOString()
        })
        .eq('line_display_id', lineDisplayId)
        .eq('active', true);

      if (updateError) {
        console.error('Error updating student LINE User ID:', updateError);
        return {
          success: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE User ID'
        };
      }

      return {
        success: true,
        userType: 'student',
        userData: studentData.students,
        message: `‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE ID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${studentData.students?.student_name}`
      };
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô parent_line_links ‡∏î‡πâ‡∏ß‡∏¢ line_display_id
    const { data: parentData, error: parentError } = await supabase
      .from('parent_line_links')
      .select(`
        *,
        parents (
          parent_name,
          phone_number
        ),
        students (
          student_name,
          grade
        )
      `)
      .eq('line_display_id', lineDisplayId)
      .eq('active', true)
      .single();

    if (parentData && !parentError) {
      // ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_user_id
      const { error: updateError } = await supabase
        .from('parent_line_links')
        .update({
          line_user_id: lineUserId,
          linked_at: new Date().toISOString()
        })
        .eq('line_display_id', lineDisplayId)
        .eq('active', true);

      if (updateError) {
        console.error('Error updating parent LINE User ID:', updateError);
        return {
          success: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LINE User ID'
        };
      }

      return {
        success: true,
        userType: 'parent',
        userData: {
          parent: parentData.parents,
          student: parentData.students
        },
        message: `‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE ID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${parentData.parents?.parent_name}`
      };
    }

    // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    return {
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE Display ID ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };

  } catch (error) {
    console.error('Error matching LINE IDs:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE ID'
    };
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE User ID ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {string} lineUserId - LINE User ID ‡∏à‡∏£‡∏¥‡∏á
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 */
export async function checkLineUserIdExists(lineUserId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô student_line_links
    const { data: studentData, error: studentError } = await supabase
      .from('student_line_links')
      .select(`
        *,
        students (
          student_name,
          grade
        )
      `)
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();

    if (studentData && !studentError) {
      return {
        exists: true,
        userType: 'student',
        userData: studentData.students
      };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô parent_line_links
    const { data: parentData, error: parentError } = await supabase
      .from('parent_line_links')
      .select(`
        *,
        parents (
          parent_name,
          phone_number
        ),
        students (
          student_name,
          student_id,
          grade
        )
      `)
      .eq('line_user_id', lineUserId)
      .eq('active', true)
      .single();

    if (parentData && !parentError) {
      return {
        exists: true,
        userType: 'parent',
        userData: {
          parent: parentData.parents,
          student: parentData.students
        }
      };
    }

    return {
      exists: false,
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE User ID ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };

  } catch (error) {
    console.error('Error checking LINE User ID:', error);
    return {
      exists: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE User ID'
    };
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE User ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ line_display_id ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ line_user_id
 * @param {string} lineUserId - LINE User ID ‡∏à‡∏£‡∏¥‡∏á
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
 */
export async function checkAndAutoMatchLineId(lineUserId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô
    const existingLink = await checkLineUserIdExists(lineUserId);
    if (existingLink.exists) {
      return existingLink;
    }

    console.log(`üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID: ${lineUserId} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö, ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
    const queryTimeout = 10000; // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    // ‡πÉ‡∏ä‡πâ Promise.race ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤ query
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Query timeout')), queryTimeout);
    });

    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô student_line_links ‡∏ó‡∏µ‡πà‡∏°‡∏µ line_display_id ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ line_user_id (‡πÅ‡∏ö‡∏ö simplified)
      const studentQuery = supabase
        .from('student_line_links')
        .select('id, student_id, line_display_id')
        .eq('active', true)
        .not('line_display_id', 'is', null)
        .is('line_user_id', null)
        .limit(5); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

      const { data: incompleteStudents, error: studentError } = await Promise.race([
        studentQuery,
        timeoutPromise
      ]);

      if (!studentError && incompleteStudents && incompleteStudents.length > 0) {
        console.log(`üìä ‡∏û‡∏ö ${incompleteStudents.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ student ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà`);
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if (incompleteStudents.length === 1) {
          const student = incompleteStudents[0];
          console.log(`üîÑ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: Student ID ${student.student_id} ‡∏Å‡∏±‡∏ö LINE User ID ${lineUserId}`);
          
          const { error: updateError } = await supabase
            .from('student_line_links')
            .update({
              line_user_id: lineUserId,
              linked_at: new Date().toISOString()
            })
            .eq('id', student.id);

          if (!updateError) {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• student ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
            const { data: studentData } = await supabase
              .from('students')
              .select('student_name, grade')
              .eq('student_id', student.student_id)
              .single();

            return {
              exists: true,
              userType: 'student',
              userData: studentData,
              autoMatched: true,
              message: `‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${studentData?.student_name}`
            };
          }
        }
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô parent_line_links ‡∏ó‡∏µ‡πà‡∏°‡∏µ line_display_id ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ line_user_id (‡πÅ‡∏ö‡∏ö simplified)
      const parentQuery = supabase
        .from('parent_line_links')
        .select('id, parent_id, student_id, line_display_id')
        .eq('active', true)
        .not('line_display_id', 'is', null)
        .is('line_user_id', null)
        .limit(5); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

      const { data: incompleteParents, error: parentError } = await Promise.race([
        parentQuery,
        timeoutPromise
      ]);

      if (!parentError && incompleteParents && incompleteParents.length > 0) {
        console.log(`üìä ‡∏û‡∏ö ${incompleteParents.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ parent ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà`);
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if (incompleteParents.length === 1) {
          const parent = incompleteParents[0];
          console.log(`üîÑ ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: Parent ID ${parent.parent_id} ‡∏Å‡∏±‡∏ö LINE User ID ${lineUserId}`);
          
          const { error: updateError } = await supabase
            .from('parent_line_links')
            .update({
              line_user_id: lineUserId,
              linked_at: new Date().toISOString()
            })
            .eq('id', parent.id);

          if (!updateError) {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• parent ‡πÅ‡∏•‡∏∞ student ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
            const [parentData, studentData] = await Promise.all([
              supabase
                .from('parents')
                .select('parent_name, phone_number')
                .eq('id', parent.parent_id)
                .single(),
              supabase
                .from('students')
                .select('student_name, grade')
                .eq('student_id', parent.student_id)
                .single()
            ]);

            return {
              exists: true,
              userType: 'parent',
              userData: {
                parent: parentData.data,
                student: studentData.data
              },
              autoMatched: true,
              message: `‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á: ${parentData.data?.parent_name}`
            };
          }
        }
      }

    } catch (timeoutError) {
      if (timeoutError.message === 'Query timeout') {
        console.warn('‚ö†Ô∏è Auto-match query timeout, skipping auto-match');
        return {
          exists: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE User ID ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (timeout)'
        };
      }
      throw timeoutError;
    }

    return {
      exists: false,
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE User ID ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ'
    };

  } catch (error) {
    console.error('Error in checkAndAutoMatchLineId:', error);
    return {
      exists: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà LINE User ID'
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE Display ID
 * @param {string} lineDisplayId - LINE Display ID ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏≠‡∏á
 * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
export async function getUserByLineDisplayId(lineDisplayId) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô student_line_links
    const { data: studentData, error: studentError } = await supabase
      .from('student_line_links')
      .select(`
        *,
        students (
          student_name,
          student_id,
          grade
        )
      `)
      .eq('line_display_id', lineDisplayId)
      .eq('active', true)
      .single();

    if (studentData && !studentError) {
      return {
        found: true,
        userType: 'student',
        userData: studentData.students,
        linkData: studentData
      };
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô parent_line_links
    const { data: parentData, error: parentError } = await supabase
      .from('parent_line_links')
      .select(`
        *,
        parents (
          parent_name,
          phone_number
        ),
        students (
          student_name,
          student_id,
          grade
        )
      `)
      .eq('line_display_id', lineDisplayId)
      .eq('active', true)
      .single();

    if (parentData && !parentError) {
      return {
        found: true,
        userType: 'parent',
        userData: {
          parent: parentData.parents,
          student: parentData.students
        },
        linkData: parentData
      };
    }

    return {
      found: false,
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE Display ID ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };

  } catch (error) {
    console.error('Error getting user by LINE Display ID:', error);
    return {
      found: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    };
  }
}