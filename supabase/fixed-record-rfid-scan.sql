-- Supabase Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
CREATE OR REPLACE FUNCTION record_rfid_scan(
  p_rfid_code VARCHAR,
  p_driver_id INTEGER,
  p_latitude NUMERIC DEFAULT NULL,
  p_longitude NUMERIC DEFAULT NULL,
  p_location_type VARCHAR DEFAULT 'pickup'
) RETURNS JSON AS $$
DECLARE
  v_student_id TEXT;
  v_line_user_id TEXT;
  v_student_name VARCHAR;
  v_driver_name VARCHAR;
  v_record_id INTEGER;
  v_scan_id BIGINT;
  v_card_id BIGINT;
  v_existing_scan INTEGER;
  v_today DATE;
  v_trip_phase TEXT;
  v_boarding_status TEXT;
  v_status_id BIGINT;
  notification_message TEXT;
  line_result JSON;
  line_notified BOOLEAN := false;
BEGIN
  -- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)
  v_today := (NOW() AT TIME ZONE 'Asia/Bangkok')::DATE;
  
  -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î trip_phase ‡∏à‡∏≤‡∏Å location_type
  v_trip_phase := CASE 
    WHEN p_location_type IN ('pickup', 'go') THEN 'go'
    WHEN p_location_type IN ('dropoff', 'return') THEN 'return'
    ELSE 'go'
  END;
  
  -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ student_id ‡∏à‡∏≤‡∏Å RFID code (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç status)
  SELECT 
    s.student_id, 
    s.student_name,
    rc.card_id
  INTO v_student_id, v_student_name, v_card_id
  FROM students s
  JOIN rfid_card_assignments rca ON s.student_id = rca.student_id
  JOIN rfid_cards rc ON rca.card_id = rc.card_id
  WHERE rc.rfid_code = p_rfid_code
    AND rca.is_active = true
    AND rc.is_active = true
    AND rc.status IN ('assigned', 'available')  -- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    AND s.is_active = true
    AND (rca.valid_to IS NULL OR rca.valid_to > NOW())
  LIMIT 1;

  -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  IF v_student_id IS NULL THEN
    RETURN json_build_object(
      'success', false, 
      'error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï',
      'rfid_code', p_rfid_code,
      'debug_info', 'Status condition updated to include both assigned and available'
    );
  END IF;

  -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trip_phase ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
  SELECT COUNT(*)
  INTO v_existing_scan
  FROM rfid_scan_logs
  WHERE student_id = v_student_id
    AND DATE(scan_timestamp AT TIME ZONE 'Asia/Bangkok') = v_today
    AND trip_phase = v_trip_phase
    AND is_valid_scan = true;

  -- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  IF v_existing_scan > 0 THEN
    RETURN json_build_object(
      'success', false,
      'error', '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
      'student_name', v_student_name,
      'already_scanned', true
    );
  END IF;

  -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
  SELECT driver_name 
  INTO v_driver_name
  FROM driver_bus 
  WHERE driver_id = p_driver_id;

  -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_scan_logs
  INSERT INTO rfid_scan_logs (
    rfid_code,
    student_id, 
    driver_id, 
    location_type,
    latitude, 
    longitude,
    trip_phase,
    is_valid_scan,
    notification_sent
  ) VALUES (
    p_rfid_code,
    v_student_id, 
    p_driver_id, 
    p_location_type,
    p_latitude, 
    p_longitude,
    v_trip_phase,
    true,
    false
  ) RETURNING scan_id INTO v_scan_id;

  -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á pickup_dropoff (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
  INSERT INTO pickup_dropoff (
    student_id, 
    driver_id, 
    event_type, 
    gps_latitude, 
    gps_longitude,
    location_type, 
    rfid_code, 
    scan_method,
    event_local_date
  ) VALUES (
    v_student_id, 
    p_driver_id, 
    'pickup', 
    p_latitude, 
    p_longitude,
    p_location_type, 
    p_rfid_code, 
    'rfid',
    v_today
  ) RETURNING record_id INTO v_record_id;

  -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  INSERT INTO student_boarding_status (
    student_id,
    driver_id,
    trip_date,
    trip_phase,
    boarding_status,
    pickup_time,
    last_scan_id
  ) VALUES (
    v_student_id,
    p_driver_id,
    v_today,
    v_trip_phase,
    'boarded',
    NOW() AT TIME ZONE 'Asia/Bangkok',
    v_scan_id
  )
  ON CONFLICT (student_id, driver_id, trip_date, trip_phase)
  DO UPDATE SET
    boarding_status = 'boarded',
    pickup_time = NOW() AT TIME ZONE 'Asia/Bangkok',
    last_scan_id = v_scan_id,
    updated_at = NOW() AT TIME ZONE 'Asia/Bangkok'
  RETURNING status_id INTO v_status_id;

  -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last_seen_at ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_cards
  UPDATE rfid_cards 
  SET last_seen_at = NOW() AT TIME ZONE 'Asia/Bangkok'
  WHERE card_id = v_card_id;

  -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LINE user ID ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  SELECT line_user_id 
  INTO v_line_user_id
  FROM student_line_links
  WHERE student_id = v_student_id 
    AND active = true
  LIMIT 1;

  -- ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ LINE ID)
  IF v_line_user_id IS NOT NULL THEN
    BEGIN
      -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      notification_message := 'üöå ' || v_student_name || ' ‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß' || 
        CASE 
          WHEN v_trip_phase = 'go' THEN ' (‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ)' 
          WHEN v_trip_phase = 'return' THEN ' (‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö)' 
          ELSE '' 
        END ||
        ' ‡πÄ‡∏ß‡∏•‡∏≤ ' || TO_CHAR(NOW() AT TIME ZONE 'Asia/Bangkok', 'HH24:MI') || 
        ' ‡∏ô. ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ' || COALESCE(v_driver_name, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');

      -- ‡∏™‡πà‡∏á LINE notification
      SELECT send_line_notification(
        v_line_user_id,
        notification_message
      ) INTO line_result;

      -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      IF (line_result->>'success')::boolean THEN
        line_notified := true;
        
        -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        UPDATE rfid_scan_logs 
        SET notification_sent = true 
        WHERE scan_id = v_scan_id;
        
        -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        INSERT INTO notification_logs (
          student_id, 
          driver_id, 
          notification_type, 
          message, 
          line_user_id,
          student_latitude, 
          student_longitude, 
          bus_latitude, 
          bus_longitude,
          status
        ) VALUES (
          v_student_id, 
          p_driver_id, 
          'rfid_scan',
          notification_message,
          v_line_user_id,
          p_latitude, 
          p_longitude, 
          p_latitude, 
          p_longitude,
          'sent'
        );
      ELSE
        line_notified := false;
        
        -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        INSERT INTO notification_logs (
          student_id, 
          driver_id, 
          notification_type, 
          message, 
          line_user_id,
          student_latitude, 
          student_longitude, 
          bus_latitude, 
          bus_longitude,
          status,
          error_message
        ) VALUES (
          v_student_id, 
          p_driver_id, 
          'rfid_scan',
          notification_message,
          v_line_user_id,
          p_latitude, 
          p_longitude, 
          p_latitude, 
          p_longitude,
          'failed',
          line_result->>'error'
        );
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        line_notified := false;
        
        -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log error
        INSERT INTO notification_logs (
          student_id, 
          driver_id, 
          notification_type, 
          message, 
          line_user_id,
          student_latitude, 
          student_longitude, 
          bus_latitude, 
          bus_longitude,
          status,
          error_message
        ) VALUES (
          v_student_id, 
          p_driver_id, 
          'rfid_scan',
          notification_message,
          v_line_user_id,
          p_latitude, 
          p_longitude, 
          p_latitude, 
          p_longitude,
          'error',
          'Exception: ' || SQLERRM
        );
    END;
  END IF;

  -- ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô)
  RETURN json_build_object(
    'success', true,
    'message', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    'student_id', v_student_id,
    'student_name', v_student_name,
    'driver_name', COALESCE(v_driver_name, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
    'record_id', v_record_id,
    'scan_id', v_scan_id,
    'status_id', v_status_id,
    'line_notified', COALESCE(line_notified, false),
    'line_user_id', v_line_user_id,
    'scan_time', NOW() AT TIME ZONE 'Asia/Bangkok',
    'location_type', p_location_type,
    'trip_phase', v_trip_phase,
    'boarding_status', 'boarded',
    'rfid_code', p_rfid_code
  );

EXCEPTION
  WHEN OTHERS THEN
    -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error log
    INSERT INTO notification_logs (
      student_id, 
      driver_id, 
      notification_type, 
      message, 
      status,
      error_message
    ) VALUES (
      COALESCE(v_student_id, 'unknown'), 
      p_driver_id, 
      'rfid_scan_error',
      'RFID Scan Error for code: ' || p_rfid_code,
      'error',
      'SQLSTATE: ' || SQLSTATE || ', Error: ' || SQLERRM
    );
    
    RETURN json_build_object(
      'success', false,
      'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ' || SQLERRM,
      'sqlstate', SQLSTATE,
      'rfid_code', p_rfid_code,
      'debug_info', 'Function updated with improved error handling'
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function
GRANT EXECUTE ON FUNCTION record_rfid_scan TO anon, authenticated;

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á RPC endpoint
-- ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô: POST /rest/v1/rpc/record_rfid_scan