require('dotenv').config({ path: '../safety-bus-bot/vercel-deploy/.env.local' });

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testFinalFunction() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á...\n');

  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ RFID code ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏
    const testData = {
      p_rfid_code: 'F3C9DC34',
      p_driver_id: 1,
      p_latitude: 13.7563,
      p_longitude: 100.5018,
      p_location_type: 'go'
    };

    console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testData);
    console.log('\nüîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan...');

    const { data, error } = await supabase.rpc('record_rfid_scan', testData);

    if (error) {
      console.log('‚ùå Error:', error.message);
      
      if (error.message.includes('recipient_type')) {
        console.log('\nüîç ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå recipient_type ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á notification_logs');
        console.log('üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
      } else if (error.message.includes('metadata')) {
        console.log('\nüîç ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå metadata ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á notification_logs');
        console.log('üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: ‡πÉ‡∏ä‡πâ error_details ‡πÅ‡∏ó‡∏ô metadata');
      } else if (error.message.includes('event_local_date')) {
        console.log('\n‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ event_local_date!');
        console.log('üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ event_local_date ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á INSERT');
      } else if (error.message.includes('event_type_check')) {
        console.log('\n‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ event_type constraint!');
        console.log('üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: ‡πÉ‡∏ä‡πâ event_type ‡πÄ‡∏õ‡πá‡∏ô pickup ‡∏ï‡∏≤‡∏° constraint');
      } else if (error.message.includes('function') && error.message.includes('does not exist')) {
        console.log('\n‚ö†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï!');
        console.log('\nüìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
        console.log('1. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Supabase Dashboard > SQL Editor');
        console.log('2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå final-fixed-function.sql');
        console.log('3. ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡πÉ‡∏ô SQL Editor:');
        console.log('\n--- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß ---');
        console.log('CREATE OR REPLACE FUNCTION record_rfid_scan(');
        console.log('    p_rfid_code VARCHAR,');
        console.log('    p_driver_id INTEGER,');
        console.log('    p_latitude DECIMAL DEFAULT NULL,');
        console.log('    p_longitude DECIMAL DEFAULT NULL,');
        console.log('    p_location_type VARCHAR DEFAULT \'go\'');
        console.log(') RETURNS JSON ...');
        console.log('--- ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå final-fixed-function.sql ---\n');
      } else {
        console.log('‚ö†Ô∏è Error ‡∏≠‡∏∑‡πà‡∏ô:', error.message);
      }
      
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô Supabase Dashboard ‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡∏•‡πå final-fixed-function.sql');
    } else {
      console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(data, null, 2));
      
      if (data && data.success) {
        console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        console.log(`üë§ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${data.student_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'} (ID: ${data.student_id})`);
        console.log(`üöå ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${testData.p_driver_id}`);
        console.log(`üìç ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: ${data.location_type}`);
        console.log(`üîñ RFID Code: ${data.rfid_code}`);
        console.log(`üìù Record ID: ${data.record_id}`);
        console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${data.scan_time}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô pickup_dropoff
        console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô pickup_dropoff...');
        const { data: pickupData, error: pickupError } = await supabase
          .from('pickup_dropoff')
          .select('*')
          .eq('record_id', data.record_id);

        if (pickupData && pickupData.length > 0) {
          const record = pickupData[0];
          console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:');
          console.log(`   Record ID: ${record.record_id}`);
          console.log(`   Student ID: ${record.student_id}`);
          console.log(`   Driver ID: ${record.driver_id}`);
          console.log(`   Event Type: ${record.event_type}`);
          console.log(`   Location Type: ${record.location_type}`);
          console.log(`   Event Time: ${record.event_time}`);
          console.log(`   GPS: ${record.gps_latitude}, ${record.gps_longitude}`);
          console.log(`   Pickup Source: ${record.pickup_source}`);
          console.log(`   Event Local Date: ${record.event_local_date}`);
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification_logs
        console.log('\nüì¨ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification logs...');
        const { data: notifData, error: notifError } = await supabase
          .from('notification_logs')
          .select('*')
          .eq('notification_type', 'rfid_scan_success')
          .eq('recipient_id', testData.p_driver_id)
          .order('created_at', { ascending: false })
          .limit(1);

        if (notifData && notifData.length > 0) {
          const notif = notifData[0];
          console.log('‚úÖ Notification log:');
          console.log(`   Message: ${notif.message}`);
          console.log(`   Status: ${notif.status}`);
          console.log(`   Created: ${notif.created_at}`);
          console.log(`   Metadata: ${JSON.stringify(notif.metadata, null, 2)}`);
        }
        
      } else {
        console.log('\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data.error);
      }
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ RFID ‡πÑ‡∏°‡πà‡∏û‡∏ö
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ RFID ‡πÑ‡∏°‡πà‡∏û‡∏ö...');
    const { data: notFoundData, error: notFoundError } = await supabase.rpc('record_rfid_scan', {
      p_rfid_code: 'INVALID123',
      p_driver_id: 1,
      p_latitude: 13.7563,
      p_longitude: 100.5018,
      p_location_type: 'go'
    });

    if (notFoundData) {
      console.log('üìù ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå RFID ‡πÑ‡∏°‡πà‡∏û‡∏ö:', JSON.stringify(notFoundData, null, 2));
    }

  } catch (error) {
    console.error('‚ùå Unexpected error:', error.message);
  }
}

testFinalFunction();