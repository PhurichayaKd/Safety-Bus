-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á LINE notification
CREATE OR REPLACE FUNCTION send_line_notification(
    p_line_user_id TEXT,
    p_message TEXT
) RETURNS JSON AS $$
DECLARE
    line_token TEXT := 'YOUR_LINE_CHANNEL_ACCESS_TOKEN'; -- ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ token ‡∏à‡∏£‡∏¥‡∏á
    response_data JSON;
    http_response RECORD;
BEGIN
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ line_user_id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    IF p_line_user_id IS NULL OR p_line_user_id = '' THEN
        RETURN json_build_object(
            'success', false,
            'error', 'LINE User ID is required'
        );
    END IF;

    -- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE Messaging API
    SELECT * INTO http_response FROM http((
        'POST',
        'https://api.line.me/v2/bot/message/push',
        ARRAY[
            http_header('Content-Type', 'application/json'),
            http_header('Authorization', 'Bearer ' || line_token)
        ],
        'application/json',
        json_build_object(
            'to', p_line_user_id,
            'messages', json_build_array(
                json_build_object(
                    'type', 'text',
                    'text', p_message
                )
            )
        )::text
    ));

    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    IF http_response.status = 200 THEN
        RETURN json_build_object(
            'success', true,
            'message', 'LINE notification sent successfully'
        );
    ELSE
        -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error log
        INSERT INTO notification_logs (
            notification_type,
            recipient_id,
            message,
            status,
            error_details,
            created_at
        ) VALUES (
            'line',
            p_line_user_id,
            p_message,
            'failed',
            json_build_object(
                'http_status', http_response.status,
                'response', http_response.content
            ),
            NOW()
        );

        RETURN json_build_object(
            'success', false,
            'error', 'Failed to send LINE notification',
            'http_status', http_response.status
        );
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error log
        INSERT INTO notification_logs (
            notification_type,
            recipient_id,
            message,
            status,
            error_details,
            created_at
        ) VALUES (
            'line',
            p_line_user_id,
            p_message,
            'error',
            json_build_object(
                'error_code', SQLSTATE,
                'error_message', SQLERRM
            ),
            NOW()
        );

        RETURN json_build_object(
            'success', false,
            'error', 'Internal error: ' || SQLERRM
        );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á‡∏£‡∏ñ
CREATE OR REPLACE FUNCTION create_pickup_notification_message(
    p_student_name TEXT,
    p_location_type TEXT,
    p_scan_time TIMESTAMP WITH TIME ZONE,
    p_driver_name TEXT DEFAULT NULL
) RETURNS TEXT AS $$
DECLARE
    action_text TEXT;
    time_text TEXT;
    driver_text TEXT := '';
BEGIN
    -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
    IF p_location_type = 'go' THEN
        action_text := '‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ';
    ELSIF p_location_type = 'return' THEN
        action_text := '‡∏•‡∏á‡∏£‡∏ñ';
    ELSE
        action_text := '‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏±‡∏ï‡∏£';
    END IF;

    -- ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    time_text := TO_CHAR(p_scan_time AT TIME ZONE 'Asia/Bangkok', 'DD/MM/YYYY HH24:MI');

    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    IF p_driver_name IS NOT NULL AND p_driver_name != '' THEN
        driver_text := E'\n‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ' || p_driver_name;
    END IF;

    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    RETURN 'üöå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á' || E'\n' ||
           'üë¶ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ' || p_student_name || E'\n' ||
           'üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ' || action_text || E'\n' ||
           'üïê ‡πÄ‡∏ß‡∏•‡∏≤: ' || time_text ||
           driver_text || E'\n' ||
           E'\n' ||
           '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß';
END;
$$ LANGUAGE plpgsql;

-- ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)
DROP TABLE IF EXISTS notification_logs CASCADE;

-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å notification logs
CREATE TABLE notification_logs (
    id BIGSERIAL PRIMARY KEY,
    notification_type VARCHAR(20) NOT NULL, -- 'line', 'sms', 'email'
    recipient_id TEXT NOT NULL,
    message TEXT NOT NULL,
    status VARCHAR(20) NOT NULL, -- 'sent', 'failed', 'error'
    error_details JSON,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
CREATE INDEX idx_notification_logs_type_status 
ON notification_logs(notification_type, status);

CREATE INDEX idx_notification_logs_created_at 
ON notification_logs(created_at);

-- ‡πÄ‡∏û‡∏¥‡πà‡∏° trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï updated_at ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_notification_logs_updated_at
    BEFORE UPDATE ON notification_logs
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î logs ‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ 30 ‡∏ß‡∏±‡∏ô)
CREATE OR REPLACE FUNCTION cleanup_old_notification_logs()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM notification_logs 
    WHERE created_at < NOW() - INTERVAL '30 days';
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
-- SELECT send_line_notification('U1234567890abcdef', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
-- SELECT create_pickup_notification_message('‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', 'go', NOW(), '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå');