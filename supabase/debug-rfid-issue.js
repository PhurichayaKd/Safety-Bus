import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Load environment variables from the vercel-deploy directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const envPath = join(__dirname, '..', 'safety-bus-bot', 'vercel-deploy', '.env.local');

dotenv.config({ path: envPath });

// Initialize Supabase client
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase environment variables');
  console.log('SUPABASE_URL:', supabaseUrl ? '‚úÖ Found' : '‚ùå Missing');
  console.log('SUPABASE_KEY:', supabaseKey ? '‚úÖ Found' : '‚ùå Missing');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugRfidIssue() {
  try {
    console.log('üîç Starting RFID debugging...\n');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_cards
    console.log('üìã 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_cards:');
    const { data: allCards, error: cardsError } = await supabase
      .from('rfid_cards')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (cardsError) {
      console.error('‚ùå Error fetching rfid_cards:', cardsError);
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£ RFID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allCards.length} ‡∏ö‡∏±‡∏ï‡∏£`);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà active
      const activeCards = allCards.filter(card => card.is_active);
      console.log(`‚úÖ ‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà active: ${activeCards.length} ‡∏ö‡∏±‡∏ï‡∏£`);
      
      if (activeCards.length > 0) {
        console.log('\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà active:');
        activeCards.forEach((card, index) => {
          console.log(`   ${index + 1}. Card ID: ${card.card_id}, RFID Code: ${card.rfid_code}, Status: ${card.status || 'N/A'}`);
        });
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active
      const inactiveCards = allCards.filter(card => !card.is_active);
      if (inactiveCards.length > 0) {
        console.log(`\n‚ö†Ô∏è  ‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active: ${inactiveCards.length} ‡∏ö‡∏±‡∏ï‡∏£`);
        inactiveCards.forEach((card, index) => {
          console.log(`   ${index + 1}. Card ID: ${card.card_id}, RFID Code: ${card.rfid_code}, Status: ${card.status || 'N/A'}`);
        });
      }
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_card_assignments
    console.log('üìã 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_card_assignments:');
    const { data: allAssignments, error: assignmentsError } = await supabase
      .from('rfid_card_assignments')
      .select(`
        *,
        rfid_cards(card_id, rfid_code, is_active),
        students(student_id, student_name, is_active)
      `)
      .order('valid_from', { ascending: false });
    
    if (assignmentsError) {
      console.error('‚ùå Error fetching rfid_card_assignments:', assignmentsError);
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allAssignments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà active
      const now = new Date().toISOString();
      const activeAssignments = allAssignments.filter(assignment => 
        assignment.is_active && 
        assignment.valid_from <= now && 
        (!assignment.valid_to || assignment.valid_to >= now)
      );
      
      console.log(`‚úÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà active: ${activeAssignments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      if (activeAssignments.length > 0) {
        console.log('\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà active:');
        activeAssignments.forEach((assignment, index) => {
          const card = assignment.rfid_cards;
          const student = assignment.students;
          console.log(`   ${index + 1}. RFID: ${card?.rfid_code}, Student: ${student?.student_name}, Card Active: ${card?.is_active}, Student Active: ${student?.is_active}`);
        });
      }
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    console.log('üìã 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á:');
    
    if (allCards && allAssignments) {
      // ‡∏´‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
      const assignedCardIds = allAssignments.map(a => a.card_id);
      const unassignedCards = allCards.filter(card => !assignedCardIds.includes(card.card_id) && card.is_active);
      
      if (unassignedCards.length > 0) {
        console.log(`‚ö†Ô∏è  ‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢: ${unassignedCards.length} ‡∏ö‡∏±‡∏ï‡∏£`);
        unassignedCards.forEach((card, index) => {
          console.log(`   ${index + 1}. Card ID: ${card.card_id}, RFID Code: ${card.rfid_code}`);
        });
      } else {
        console.log('‚úÖ ‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      }
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà API ‡πÉ‡∏ä‡πâ
    console.log('üìã 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö API:');
    
    if (allCards && allCards.length > 0) {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà active
      const testCard = allCards.find(card => card.is_active);
      
      if (testCard) {
        console.log(`üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£: ${testCard.rfid_code}`);
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏±‡∏ï‡∏£ (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á API)
        const { data: cardData, error: cardError } = await supabase
          .from('rfid_cards')
          .select('card_id, rfid_code, is_active')
          .eq('rfid_code', testCard.rfid_code)
          .eq('is_active', true)
          .single();
        
        if (cardError || !cardData) {
          console.log('‚ùå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà active');
          console.log('Error:', cardError);
        } else {
          console.log('‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß');
          
          // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 ‡∏Ç‡∏≠‡∏á API)
          const { data: assignmentData, error: assignmentError } = await supabase
            .from('rfid_card_assignments')
            .select(`
              student_id,
              students!inner(
                student_id,
                student_name,
                is_active
              )
            `)
            .eq('card_id', cardData.card_id)
            .eq('is_active', true)
            .lte('valid_from', new Date().toISOString())
            .or('valid_to.is.null,valid_to.gte.' + new Date().toISOString())
            .single();
          
          if (assignmentError || !assignmentData) {
            console.log('‚ùå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà active ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ');
            console.log('Error:', assignmentError);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ
            const { data: allCardAssignments } = await supabase
              .from('rfid_card_assignments')
              .select('*')
              .eq('card_id', cardData.card_id);
            
            console.log(`üìä ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ: ${allCardAssignments?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            if (allCardAssignments && allCardAssignments.length > 0) {
              allCardAssignments.forEach((assignment, index) => {
                console.log(`   ${index + 1}. Student ID: ${assignment.student_id}, Active: ${assignment.is_active}, Valid From: ${assignment.valid_from}, Valid To: ${assignment.valid_to || '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}`);
              });
            }
          } else {
            console.log('‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            
            const student = assignmentData.students;
            if (!student.is_active) {
              console.log('‚ùå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà active');
            } else {
              console.log('‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô active');
              console.log(`üë§ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student.student_name} (ID: ${student.student_id})`);
              console.log('üéâ ‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥!');
            }
          }
        }
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà active ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
      }
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // 5. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    console.log('üí° 5. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    console.log('');
    console.log('‡∏´‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:');
    console.log('1. ‚úÖ ‡∏ö‡∏±‡∏ï‡∏£ RFID ‡∏°‡∏µ is_active = true ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_cards');
    console.log('2. ‚úÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á rfid_card_assignments ‡∏ó‡∏µ‡πà:');
    console.log('   - is_active = true');
    console.log('   - valid_from <= ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
    console.log('   - valid_to = null ‡∏´‡∏£‡∏∑‡∏≠ >= ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
    console.log('3. ‚úÖ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ is_active = true ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á students');
    console.log('4. ‚úÖ ‡∏£‡∏´‡∏±‡∏™ RFID ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    console.log('');
    console.log('üîß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ Driver App ‡∏´‡∏ô‡πâ‡∏≤ "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ï‡∏£" > "‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà"');
    
  } catch (error) {
    console.error('‚ùå Debugging failed:', error);
  }
}

// Run the debugging
debugRfidIssue();