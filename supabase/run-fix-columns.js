import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// ‡∏≠‡πà‡∏≤‡∏ô environment variables
dotenv.config({ path: path.join(process.cwd(), '../safety-bus-bot/vercel-deploy/.env.local') });

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const supabaseUrl = process.env.SUPABASE_URL || 'https://ugkxolufzlnvsvtpxhp.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö environment variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
    console.log('SUPABASE_URL:', supabaseUrl);
    console.log('SUPABASE_ANON_KEY:', supabaseKey ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function runFixColumns() {
    try {
        console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢...\n');

        // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL
        const sqlContent = fs.readFileSync(path.join(__dirname, 'fix-all-missing-columns.sql'), 'utf8');
        
        // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL
        const { data, error } = await supabase.rpc('exec_sql', { sql_query: sqlContent });
        
        if (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            
            // ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            console.log('\nüîÑ ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...\n');
            await runIndividualCommands();
        } else {
            console.log('‚úÖ ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log('üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', data);
        }

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå:', error);
        
        // ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        console.log('\nüîÑ ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...\n');
        await runIndividualCommands();
    }
}

async function runIndividualCommands() {
    try {
        // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå notification_sent
        console.log('1Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå notification_sent...');
        const { error: error1 } = await supabase
            .from('information_schema.columns')
            .select('column_name')
            .eq('table_schema', 'public')
            .eq('table_name', 'rfid_scan_logs')
            .eq('column_name', 'notification_sent');

        if (error1) {
            // ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            const { error: addError1 } = await supabase.rpc('exec_sql', {
                sql_query: `ALTER TABLE public.rfid_scan_logs ADD COLUMN IF NOT EXISTS notification_sent boolean DEFAULT false;`
            });
            
            if (addError1) {
                console.log('‚ö†Ô∏è  ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå notification_sent ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', addError1.message);
            } else {
                console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå notification_sent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            }
        }

        // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå scan_method
        console.log('2Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå scan_method...');
        const { error: addError2 } = await supabase.rpc('exec_sql', {
            sql_query: `ALTER TABLE public.pickup_dropoff ADD COLUMN IF NOT EXISTS scan_method text DEFAULT 'rfid' CHECK (scan_method IN ('rfid', 'manual', 'qr_code', 'nfc'));`
        });
        
        if (addError2) {
            console.log('‚ö†Ô∏è  ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå scan_method ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', addError2.message);
        } else {
            console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå scan_method ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }

        // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        console.log('3Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');
        
        const { error: updateError1 } = await supabase
            .from('rfid_scan_logs')
            .update({ notification_sent: false })
            .is('notification_sent', null);
            
        if (updateError1) {
            console.log('‚ö†Ô∏è  ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rfid_scan_logs:', updateError1.message);
        } else {
            console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rfid_scan_logs ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }

        const { error: updateError2 } = await supabase
            .from('pickup_dropoff')
            .update({ scan_method: 'rfid' })
            .is('scan_method', null);
            
        if (updateError2) {
            console.log('‚ö†Ô∏è  ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï pickup_dropoff:', updateError2.message);
        } else {
            console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï pickup_dropoff ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }

        console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        await checkColumns();

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:', error);
    }
}

async function checkColumns() {
    console.log('\nüìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°...');
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification_sent
        const { data: rfidCols, error: rfidError } = await supabase
            .from('information_schema.columns')
            .select('column_name, data_type, column_default')
            .eq('table_schema', 'public')
            .eq('table_name', 'rfid_scan_logs')
            .eq('column_name', 'notification_sent');

        if (rfidCols && rfidCols.length > 0) {
            console.log('‚úÖ rfid_scan_logs.notification_sent:', rfidCols[0]);
        } else {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå notification_sent');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö scan_method
        const { data: pickupCols, error: pickupError } = await supabase
            .from('information_schema.columns')
            .select('column_name, data_type, column_default')
            .eq('table_schema', 'public')
            .eq('table_name', 'pickup_dropoff')
            .eq('column_name', 'scan_method');

        if (pickupCols && pickupCols.length > 0) {
            console.log('‚úÖ pickup_dropoff.scan_method:', pickupCols[0]);
        } else {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå scan_method');
        }

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:', error);
    }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
runFixColumns();