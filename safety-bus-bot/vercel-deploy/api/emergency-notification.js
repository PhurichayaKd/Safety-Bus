// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
import { Client } from '@line/bot-sdk';
import { createClient } from '@supabase/supabase-js';

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE client
let lineClient = null;
try {
  if (config.channelAccessToken && config.channelSecret) {
    lineClient = new Client(config);
    console.log('‚úÖ LINE client initialized successfully');
  } else {
    console.warn('‚ö†Ô∏è LINE credentials not found');
  }
} catch (error) {
  console.error('‚ùå Failed to initialize LINE client:', error.message);
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

let supabase = null;
try {
  if (supabaseUrl && supabaseKey) {
    supabase = createClient(supabaseUrl, supabaseKey);
    console.log('‚úÖ Supabase client initialized successfully');
  } else {
    console.warn('‚ö†Ô∏è Supabase credentials not found');
  }
} catch (error) {
  console.error('‚ùå Failed to initialize Supabase client:', error.message);
}

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
const EMERGENCY_MESSAGES = {
  DRIVER_PANIC: {
    emoji: 'üö®',
    title: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‚ÄºÔ∏è',
    message: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á',
    priority: 'CRITICAL',
    sendToLine: true,
    sensorType: 'manual_driver_emergency'
  },
  MOVEMENT_DETECTED: {
    emoji: 'üö®',
    title: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏î‡∏£‡∏ñ üó£‚ÄºÔ∏è',
    message: 'üîª‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î : ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß',
    priority: 'HIGH',
    sendToLine: true,
    sensorType: 'motion_sensor'
  },
  HIGH_TEMPERATURE: {
    emoji: 'üö®',
    title: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á üå°‚ÄºÔ∏è',
    message: 'üîª‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î : ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á {temperature}¬∞C',
    priority: 'HIGH',
    sendToLine: true,
    sensorType: 'temperature_sensor'
  },
  SMOKE_AND_HEAT: {
    emoji: 'üö®',
    title: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏±‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å üßØ‚ÄºÔ∏è',
    message: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î : ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á {temperature}¬∞C ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏±‡∏ô {smokeLevel}%',
    priority: 'CRITICAL',
    sendToLine: true,
    sensorType: 'smoke_heat_sensor'
  },
  STUDENT_SWITCH: {
    emoji: 'üë∂',
    title: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå',
    message: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏ö‡∏ô‡∏£‡∏ñ (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE)',
    priority: 'LOW',
    sendToLine: false,
    sensorType: 'student_switch'
  }
};

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå)
const DRIVER_RESPONSE_MESSAGES = {
  CHECKED: {
    emoji: '‚úÖ',
    title: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
    message: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥',
    sendToLine: true,
    templates: {
      motion_sensor: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß)',
      temperature_sensor: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥)',
      smoke_heat_sensor: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ñ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô)',
      manual_driver_emergency: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö)',
      student_switch: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)'
    }
  },
  EMERGENCY: {
    emoji: 'üö®',
    title: '‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‚ÄºÔ∏è',
    message: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
    sendToLine: true,
    templates: {
      motion_sensor: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß',
      temperature_sensor: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á',
      smoke_heat_sensor: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ñ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô',
      manual_driver_emergency: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á',
      student_switch: 'üîª ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
    }
  },
  CONFIRMED_NORMAL: {
    emoji: '‚úÖÔ∏è',
    title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‚úÖÔ∏è',
    message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥\n               ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    sendToLine: true,
    templates: {
      motion_sensor: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥\n               ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\nüìç ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß',
      temperature_sensor: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥\n               ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\nüìç ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á',
      smoke_heat_sensor: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥\n               ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\nüìç ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ñ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô',
      manual_driver_emergency: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥\n               ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\nüìç ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö',
      student_switch: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ : ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏õ‡∏Å‡∏ï‡∏¥\n               ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\nüìç ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
    }
  }
};

// CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

export default async function handler(req, res) {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS headers
  Object.entries(corsHeaders).forEach(([key, value]) => {
    res.setHeader(key, value);
  });

  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { 
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö emergency notification
      eventType, 
      eventId, 
      description, 
      location,
      sensorType,
      temperature,
      smokeLevel,
      humidity,
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö driver response
      responseType,
      emergencyLogId,
      driverId,
      busId,
      isStudentEmergency = false,
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° original sensor type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö driver response
      originalSensorType,
      originalEventType,
      // ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      notes,
      timestamp
    } = req.body;

    console.log('üì• Emergency notification request:', {
      eventType,
      responseType,
      eventId,
      emergencyLogId,
      driverId,
      busId,
      isStudentEmergency,
      sensorType,
      originalSensorType,
      originalEventType
    });

    // Validate required fields
    if (!eventType && !responseType) {
      return res.status(400).json({ 
        error: 'Either eventType or responseType is required' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE ‡πÅ‡∏•‡∏∞ Supabase
    if (!lineClient) {
      console.error('LINE client not initialized');
      return res.status(500).json({ 
        error: 'LINE messaging service not available' 
      });
    }

    if (!supabase) {
      console.error('Supabase client not initialized');
      return res.status(500).json({ 
        error: 'Database service not available' 
      });
    }

    let messageInfo;
    let shouldSendToLine = true;
    let detectedSensorType = null; // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå (5 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const checkSensorCooldown = async (sensorType, busId) => {
      if (!sensorType) {
        console.log('üö´ No sensorType provided for cooldown check');
        return { allowed: true };
      }
      
      try {
        const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
        console.log(`üîç Cooldown check query parameters:`, {
          sensorType,
          fiveMinutesAgo,
          currentTime: new Date().toISOString()
        });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ sensor_type (‡πÑ‡∏°‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° driver ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
        const { data: recentEvents, error } = await supabase
          .from('emergency_logs')
          .select('event_time, sensor_type, event_type, driver_id')
          .eq('sensor_type', sensorType)
          .gte('event_time', fiveMinutesAgo)
          .order('event_time', { ascending: false })
          .limit(1);

        console.log(`üîç Database query result:`, {
          error,
          recentEventsCount: recentEvents ? recentEvents.length : 0,
          recentEvents
        });

        if (error) {
          console.error('Error checking sensor cooldown:', error);
          return { allowed: true }; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        }

        if (recentEvents && recentEvents.length > 0) {
          const lastEvent = recentEvents[0];
          const lastEventTime = new Date(lastEvent.event_time);
          const timeDiff = Date.now() - lastEventTime.getTime();
          const remainingCooldown = Math.ceil((5 * 60 * 1000 - timeDiff) / 1000); // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
          
          console.log(`üïí Sensor cooldown check for ${sensorType}:`, {
            lastEventTime: lastEvent.event_time,
            timeDiffSeconds: Math.floor(timeDiff / 1000),
            remainingCooldownSeconds: remainingCooldown,
            allowed: remainingCooldown <= 0
          });
          
          return {
            allowed: remainingCooldown <= 0,
            remainingSeconds: remainingCooldown > 0 ? remainingCooldown : 0,
            lastEventTime: lastEvent.event_time
          };
        }

        console.log(`‚úÖ No recent events found for sensor ${sensorType}, allowing notification`);
        return { allowed: true }; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      } catch (error) {
        console.error('Error in sensor cooldown check:', error);
        return { allowed: true }; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      }
    };
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    if (eventType) {
      // ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
      if (sensorType) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î eventType ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        if (sensorType === 'motion_detected_after_trip' || sensorType === 'motion_detected_at_school') {
          messageInfo = EMERGENCY_MESSAGES['MOVEMENT_DETECTED'];
          detectedSensorType = 'motion_sensor';
        } else if (sensorType === 'smoke_heat' && temperature && smokeLevel) {
          messageInfo = EMERGENCY_MESSAGES['SMOKE_AND_HEAT'];
          detectedSensorType = 'smoke_heat_sensor';
        } else if (sensorType === 'temp_only' && temperature) {
          messageInfo = EMERGENCY_MESSAGES['HIGH_TEMPERATURE'];
          detectedSensorType = 'temperature_sensor';
        } else if (sensorType === 'manual_driver_emergency' || eventType === 'DRIVER_PANIC') {
          messageInfo = EMERGENCY_MESSAGES['DRIVER_PANIC'];
          detectedSensorType = 'manual_driver_emergency';
        } else if (sensorType === 'student_switch') {
          messageInfo = EMERGENCY_MESSAGES['STUDENT_SWITCH'];
          detectedSensorType = 'student_switch';
        } else {
          messageInfo = EMERGENCY_MESSAGES[eventType];
          detectedSensorType = sensorType || 'unknown';
        }
      } else {
        messageInfo = EMERGENCY_MESSAGES[eventType];
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î default sensor type ‡∏ï‡∏≤‡∏° eventType
        if (eventType === 'DRIVER_PANIC') {
          detectedSensorType = 'manual_driver_emergency';
        } else if (eventType === 'MOVEMENT_DETECTED') {
          detectedSensorType = 'motion_sensor';
        } else if (eventType === 'HIGH_TEMPERATURE') {
          detectedSensorType = 'temperature_sensor';
        } else if (eventType === 'SMOKE_AND_HEAT') {
          detectedSensorType = 'smoke_heat_sensor';
        } else if (eventType === 'STUDENT_SWITCH') {
          detectedSensorType = 'student_switch';
        }
      }
      
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö STUDENT_SWITCH
      if (eventType === 'STUDENT_SWITCH') {
        shouldSendToLine = false;
      }
    } else if (responseType) {
      // ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
      if (responseType === 'EMERGENCY') {
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ EMERGENCY_MESSAGES ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
        if (originalEventType) {
          messageInfo = EMERGENCY_MESSAGES[originalEventType];
          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î sensor type ‡∏ï‡∏≤‡∏° eventType
          const eventToSensorMap = {
            'DRIVER_PANIC': 'manual_driver_emergency',
            'MOVEMENT_DETECTED': 'motion_sensor',
            'HIGH_TEMPERATURE': 'temperature_sensor',
            'SMOKE_AND_HEAT': 'smoke_heat_sensor',
            'STUDENT_SWITCH': 'student_switch'
          };
          detectedSensorType = eventToSensorMap[originalEventType] || 'manual_driver_emergency';
        } else if (originalSensorType) {
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ originalSensorType ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô eventType
          const sensorToEventMap = {
            'manual_driver_emergency': 'DRIVER_PANIC',
            'motion_sensor': 'MOVEMENT_DETECTED',
            'temperature_sensor': 'HIGH_TEMPERATURE',
            'smoke_heat_sensor': 'SMOKE_AND_HEAT',
            'student_switch': 'STUDENT_SWITCH'
          };
          const mappedEventType = sensorToEventMap[originalSensorType] || 'DRIVER_PANIC';
          messageInfo = EMERGENCY_MESSAGES[mappedEventType];
          detectedSensorType = originalSensorType;
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ DRIVER_PANIC ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          messageInfo = EMERGENCY_MESSAGES['DRIVER_PANIC'];
          detectedSensorType = 'manual_driver_emergency';
        }
      } else {
        // ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ (CHECKED, CONFIRMED_NORMAL) - ‡πÉ‡∏ä‡πâ DRIVER_RESPONSE_MESSAGES
        messageInfo = DRIVER_RESPONSE_MESSAGES[responseType];
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ originalSensorType ‡∏´‡∏£‡∏∑‡∏≠ originalEventType ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
        if (originalSensorType && messageInfo.templates && messageInfo.templates[originalSensorType]) {
          messageInfo = {
            ...messageInfo,
            message: messageInfo.templates[originalSensorType]
          };
          detectedSensorType = originalSensorType;
        } else if (originalEventType) {
          // ‡πÅ‡∏õ‡∏•‡∏á originalEventType ‡πÄ‡∏õ‡πá‡∏ô sensor type
          const eventToSensorMap = {
            'DRIVER_PANIC': 'manual_driver_emergency',
            'MOVEMENT_DETECTED': 'motion_sensor',
            'HIGH_TEMPERATURE': 'temperature_sensor',
            'SMOKE_AND_HEAT': 'smoke_heat_sensor',
            'STUDENT_SWITCH': 'student_switch'
          };
          const mappedSensorType = eventToSensorMap[originalEventType];
          if (mappedSensorType && messageInfo.templates && messageInfo.templates[mappedSensorType]) {
            messageInfo = {
              ...messageInfo,
              message: messageInfo.templates[mappedSensorType]
            };
            detectedSensorType = mappedSensorType;
          }
        } else if (emergencyLogId) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ originalSensorType ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          try {
            const { data: emergencyLog, error: logError } = await supabase
            .from('emergency_logs')
            .select('event_type, sensor_type, sensor_data')
            .eq('event_id', emergencyLogId)
            .single();

          if (!logError && emergencyLog) {
            const dbSensorType = emergencyLog.sensor_type;
            const dbEventType = emergencyLog.event_type;
            
            // ‡πÅ‡∏õ‡∏•‡∏á database sensor type ‡πÄ‡∏õ‡πá‡∏ô template key
            let templateKey = null;
            if (dbSensorType) {
              if (dbSensorType.includes('motion')) {
                templateKey = 'motion_sensor';
              } else if (dbSensorType.includes('temp') && dbSensorType.includes('smoke')) {
                templateKey = 'smoke_heat_sensor';
              } else if (dbSensorType.includes('temp')) {
                templateKey = 'temperature_sensor';
              } else if (dbSensorType.includes('student')) {
                templateKey = 'student_switch';
              } else if (dbSensorType.includes('manual') || dbSensorType.includes('driver')) {
                templateKey = 'manual_driver_emergency';
              }
            } else if (dbEventType) {
              const eventToSensorMap = {
                'DRIVER_PANIC': 'manual_driver_emergency',
                'MOVEMENT_DETECTED': 'motion_sensor',
                'HIGH_TEMPERATURE': 'temperature_sensor',
                'SMOKE_AND_HEAT': 'smoke_heat_sensor',
                'STUDENT_SWITCH': 'student_switch'
              };
              templateKey = eventToSensorMap[dbEventType];
            }

            if (templateKey && messageInfo.templates && messageInfo.templates[templateKey]) {
              messageInfo = {
                ...messageInfo,
                message: messageInfo.templates[templateKey]
              };
              detectedSensorType = templateKey;
            }
          }
        } catch (error) {
          console.error('Error fetching emergency log for sensor type:', error);
        }
      }
      }
    }

    if (!messageInfo) {
      return res.status(400).json({ 
        error: 'Invalid event type or response type' 
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï shouldSendToLine ‡∏ï‡∏≤‡∏° messageInfo
    if (messageInfo.sendToLine !== undefined) {
      shouldSendToLine = messageInfo.sendToLine;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const currentTime = new Date(timestamp || Date.now()).toLocaleString('th-TH', {
      timeZone: 'Asia/Bangkok',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    let messageText = `${messageInfo.emoji} ${messageInfo.title}\n\n${messageInfo.message}`;
    
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (temperature) {
      messageText = messageText.replace('{temperature}', temperature);
    }
    if (smokeLevel) {
      messageText = messageText.replace('{smokeLevel}', smokeLevel);
    }
    
    if (description) {
      messageText += `\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${description}`;
    }
    
    if (location) {
      messageText += `\nüìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${location}`;
    }
    
    if (notes) {
      messageText += `\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${notes}`;
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏£‡∏ñ
    let studentInfo = '';
    if (busId && shouldSendToLine) {
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏£‡∏ñ (trip_phase = 'go' ‡∏´‡∏£‡∏∑‡∏≠ 'at_school')
        const { data: studentsOnBus, error: studentError } = await supabase
          .from('student_boarding_status')
          .select(`
            student_id,
            students!inner(student_name, class_name, parent_phone)
          `)
          .eq('bus_id', busId)
          .in('trip_phase', ['go', 'at_school'])
          .eq('boarding_status', 'on_bus');

        if (!studentError && studentsOnBus && studentsOnBus.length > 0) {
          const studentNames = studentsOnBus.map(s => 
            `‚Ä¢ ${s.students.student_name} (${s.students.class_name})`
          ).join('\n');
          
          studentInfo = `\n\nüë• ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡∏ô‡∏£‡∏ñ (${studentsOnBus.length} ‡∏Ñ‡∏ô):\n${studentNames}`;
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
          const parentContacts = studentsOnBus
            .filter(s => s.students.parent_phone)
            .map(s => `${s.students.student_name}: ${s.students.parent_phone}`)
            .join('\n');
          
          if (parentContacts) {
            studentInfo += `\n\nüìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á:\n${parentContacts}`;
          }
        } else if (studentsOnBus && studentsOnBus.length === 0) {
          studentInfo = '\n\nüë• ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡∏ô‡∏£‡∏ñ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ';
        }
      } catch (error) {
        console.error('Error fetching student data:', error);
        studentInfo = '\n\nüë• ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ';
      }
    }

    messageText += studentInfo;
    messageText += `\n\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${currentTime}`;
    
    if (eventId) {
      messageText += `\nüÜî ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${eventId}`;
    } else if (emergencyLogId) {
      messageText += `\nüÜî ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${emergencyLogId}`;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
    if (detectedSensorType && (eventType || responseType)) {
      console.log(`üîç Detected sensor type: ${detectedSensorType} for ${eventType || responseType}`);
    }

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const cleanMessageText = messageText
      .replace(/[^\u0000-\u007F\u0E00-\u0E7F]/g, '')
      .replace(/\s+/g, ' ')
      .trim();

    const lineMessage = {
      type: 'text',
      text: cleanMessageText
    };

    let notificationResults = [];

    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ shouldSendToLine ‡πÄ‡∏õ‡πá‡∏ô true
    if (shouldSendToLine) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° debug log
      console.log(`üîç Cooldown check parameters:`, {
        detectedSensorType,
        sensorType,
        eventType,
        shouldCheckCooldown: detectedSensorType && detectedSensorType !== 'manual_driver_emergency'
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (detectedSensorType && detectedSensorType !== 'manual_driver_emergency') {
        // ‡πÅ‡∏õ‡∏•‡∏á sensor type ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö constraint ‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cooldown check
        const sensorTypeMapping = {
          'motion_sensor': 'MOTION',
          'temperature_sensor': 'TEMPERATURE', 
          'smoke_heat_sensor': 'SMOKE',
          'manual_driver_emergency': 'PIR', // ‡πÉ‡∏ä‡πâ PIR ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô
          'student_switch': 'PIR'
        };
        const mappedSensorType = sensorTypeMapping[detectedSensorType] || 'MOTION';
        
        console.log(`üïí Checking cooldown for sensor: ${detectedSensorType} (mapped to: ${mappedSensorType})`);
        const cooldownCheck = await checkSensorCooldown(mappedSensorType, busId || 'default_bus');
        console.log(`üïí Cooldown check result:`, cooldownCheck);
        
        if (!cooldownCheck.allowed) {
          console.log(`‚è∞ Sensor ${detectedSensorType} is in cooldown. Remaining: ${cooldownCheck.remainingSeconds} seconds`);
          return res.status(200).json({
            success: true,
            message: `Sensor notification blocked due to cooldown. Remaining: ${cooldownCheck.remainingSeconds} seconds`,
            cooldown: {
              active: true,
              remainingTime: cooldownCheck.remainingSeconds,
              sensorType: detectedSensorType,
              lastEventTime: cooldownCheck.lastEventTime
            }
          });
        } else {
          console.log(`‚úÖ Cooldown check passed for sensor: ${detectedSensorType}`);
        }
      }

      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å student_line_links
        const { data: studentLinks, error: studentError } = await supabase
          .from('student_line_links')
          .select('line_user_id, student_id, line_display_id')
          .not('line_user_id', 'is', null)
          .neq('line_user_id', '')
          .eq('active', true);

        if (studentError) {
          console.error('Error fetching student links:', studentError);
        } else if (studentLinks && studentLinks.length > 0) {
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
          for (const student of studentLinks) {
            try {
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ line_user_id ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null
              const lineUserId = String(student.line_user_id).trim();
              if (!lineUserId || lineUserId === 'null' || lineUserId === 'undefined') {
                console.warn(`‚ö†Ô∏è Invalid line_user_id for student ${student.student_id}: ${student.line_user_id}`);
                notificationResults.push({
                  lineUserId: student.line_user_id,
                  studentId: student.student_id,
                  lineDisplayId: student.line_display_id,
                  type: 'student',
                  status: 'failed',
                  error: 'Invalid line_user_id'
                });
                continue;
              }

              await lineClient.pushMessage(lineUserId, lineMessage);
              notificationResults.push({
                lineUserId: lineUserId,
                studentId: student.student_id,
                lineDisplayId: student.line_display_id,
                type: 'student',
                status: 'success'
              });
              console.log(`‚úÖ Emergency notification sent to student ${student.student_id} (${lineUserId})`);
            } catch (error) {
              console.error(`‚ùå Failed to send to student ${student.student_id}:`, error.message);
              notificationResults.push({
                lineUserId: student.line_user_id,
                studentId: student.student_id,
                lineDisplayId: student.line_display_id,
                type: 'student',
                status: 'failed',
                error: error.message
              });
            }
          }
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å parent_line_links
        const { data: parentLinks, error: parentError } = await supabase
          .from('parent_line_links')
          .select('line_user_id, parent_id, line_display_id')
          .not('line_user_id', 'is', null)
          .neq('line_user_id', '')
          .eq('active', true);

        if (parentError) {
          console.error('Error fetching parent links:', parentError);
        } else if (parentLinks && parentLinks.length > 0) {
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
          for (const parent of parentLinks) {
            try {
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ line_user_id ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null
              const lineUserId = String(parent.line_user_id).trim();
              if (!lineUserId || lineUserId === 'null' || lineUserId === 'undefined') {
                console.warn(`‚ö†Ô∏è Invalid line_user_id for parent ${parent.parent_id}: ${parent.line_user_id}`);
                notificationResults.push({
                  lineUserId: parent.line_user_id,
                  parentId: parent.parent_id,
                  lineDisplayId: parent.line_display_id,
                  type: 'parent',
                  status: 'failed',
                  error: 'Invalid line_user_id'
                });
                continue;
              }

              await lineClient.pushMessage(lineUserId, lineMessage);
              notificationResults.push({
                lineUserId: lineUserId,
                parentId: parent.parent_id,
                lineDisplayId: parent.line_display_id,
                type: 'parent',
                status: 'success'
              });
              console.log(`‚úÖ Emergency notification sent to parent ${parent.parent_id} (${lineUserId})`);
            } catch (error) {
              console.error(`‚ùå Failed to send to parent ${parent.parent_id}:`, error.message);
              notificationResults.push({
                lineUserId: parent.line_user_id,
                parentId: parent.parent_id,
                lineDisplayId: parent.line_display_id,
                type: 'parent',
                status: 'failed',
                error: error.message
              });
            }
          }
        }
      } catch (error) {
        console.error('Database query error:', error);
      }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏•‡∏á‡πÉ‡∏ô emergency_logs (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö eventType ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ cooldown ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
    if (eventType && shouldSendToLine && notificationResults.length > 0) {
      try {
        // ‡πÅ‡∏õ‡∏•‡∏á sensor type ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö constraint ‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const sensorTypeMapping = {
          'motion_sensor': 'MOTION',
          'temperature_sensor': 'TEMPERATURE', 
          'smoke_heat_sensor': 'SMOKE',
          'manual_driver_emergency': 'PIR', // ‡πÉ‡∏ä‡πâ PIR ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô
          'student_switch': 'PIR'
        };
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ INSERT ‡∏•‡∏á‡πÉ‡∏ô emergency_logs ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const emergencyLogData = {
          driver_id: parseInt(busId), // busId ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏≠ driver_id
          event_time: new Date(timestamp || Date.now()).toISOString(),
          event_type: 'SENSOR_ALERT', // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          triggered_by: 'sensor',
          sensor_type: sensorTypeMapping[detectedSensorType] || 'MOTION', // ‡πÉ‡∏ä‡πâ mapping ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          status: 'pending'
        };

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
        const sensorData = {};
        if (temperature) sensorData.temperature = temperature;
        if (smokeLevel) sensorData.smokeLevel = smokeLevel;
        if (humidity) sensorData.humidity = humidity;
        if (sensorData && Object.keys(sensorData).length > 0) {
          emergencyLogData.sensor_data = sensorData;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
        const details = {};
        if (description) details.description = description;
        if (location) details.location = location;
        details.originalEventType = eventType;
        emergencyLogData.details = details;

        console.log('üîÑ Inserting emergency log for cooldown:', emergencyLogData);

        const { data: insertedLog, error: insertError } = await supabase
          .from('emergency_logs')
          .insert(emergencyLogData)
          .select();

        if (insertError) {
          console.error('‚ùå Error inserting emergency log:', insertError);
        } else {
          console.log('‚úÖ Emergency log inserted successfully for cooldown:', insertedLog);
        }
      } catch (error) {
        console.error('‚ùå Database insert operation error:', error);
      }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ driver response)
    if (responseType && emergencyLogId) {
      try {
        const { data: responseData, error: responseError } = await supabase
          .from('emergency_responses')
          .insert({
            event_id: emergencyLogId,
            driver_id: driverId,
            response_type: responseType,
            sensor_type: detectedSensorType || originalSensorType,
            original_event_type: originalEventType,
            notes: notes,
            created_at: new Date(timestamp || Date.now()).toISOString()
          })
          .select();

        if (responseError) {
          console.error('Error saving emergency response:', responseError);
        } else {
          console.log('‚úÖ Emergency response saved to database:', responseData);
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô emergency_logs
        const updateData = {
          driver_response_type: responseType,
          driver_response_time: new Date(timestamp || Date.now()).toISOString(),
          driver_response_notes: notes,
          status: responseType === 'EMERGENCY' ? 'emergency_confirmed' : 
                 responseType === 'CONFIRMED_NORMAL' ? 'resolved' : 'checked'
        };

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor type ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (detectedSensorType || originalSensorType) {
          updateData.driver_response_sensor_type = detectedSensorType || originalSensorType;
        }

        const { error: updateError } = await supabase
          .from('emergency_logs')
          .update(updateData)
          .eq('event_id', emergencyLogId);

        if (updateError) {
          console.error('Error updating emergency log:', updateError);
        } else {
          console.log('‚úÖ Emergency log updated successfully');
        }
      } catch (error) {
        console.error('Database operation error:', error);
      }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö eventType)
    if (eventType && eventId) {
      try {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô emergency_logs ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const updateEventData = {
          sensor_type: detectedSensorType || sensorType,
          event_type: eventType,
          updated_at: new Date(timestamp || Date.now()).toISOString()
        };

        if (temperature) updateEventData.temperature = temperature;
        if (smokeLevel) updateEventData.smoke_level = smokeLevel;
        if (humidity) updateEventData.humidity = humidity;
        if (description) updateEventData.description = description;
        if (location) updateEventData.location = location;

        const { error: updateEventError } = await supabase
          .from('emergency_logs')
          .update(updateEventData)
          .eq('event_id', eventId);

        if (updateEventError) {
          console.error('Error updating emergency event log:', updateEventError);
        } else {
          console.log('‚úÖ Emergency event log updated successfully');
        }
      } catch (error) {
        console.error('Database event operation error:', error);
      }
    }

    // Log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    console.log(`üì§ Emergency notification/response processed:`, {
      eventType,
      responseType,
      eventId,
      emergencyLogId,
      driverId,
      busId,
      isStudentEmergency,
      shouldSendToLine,
      detectedSensorType,
      originalSensorType,
      originalEventType,
      recipientCount: notificationResults.length,
      timestamp: currentTime
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ detectedSensorType ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô null
    if (!detectedSensorType) {
      if (originalSensorType) {
        detectedSensorType = originalSensorType;
      } else if (sensorType) {
        detectedSensorType = sensorType;
      } else if (eventType === 'DRIVER_PANIC') {
        detectedSensorType = 'manual_driver_emergency';
      } else {
        detectedSensorType = 'unknown';
      }
    }

    return res.status(200).json({
      success: true,
      message: shouldSendToLine ? 
        (eventType ? 'Emergency notification sent successfully' : 'Driver response sent successfully') : 
        (eventType ? 'Event logged (no LINE notification sent)' : 'Driver response logged (no LINE notification sent)'),
      eventType,
      responseType,
      eventId,
      emergencyLogId,
      driverId,
      busId,
      isStudentEmergency,
      shouldSendToLine,
      detectedSensorType,
      originalSensorType,
      originalEventType,
      notificationResults,
      timestamp: currentTime
    });
  } catch (error) {
    console.error('‚ùå Emergency notification/response error:', error);
    return res.status(500).json({
      success: false,
      error: 'Failed to process emergency notification/response',
      details: error.message
    });
  }
}