import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '../safety-bus-bot/vercel-deploy/.env.local' });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö environment variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkStudentStatus() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô');
  console.log('=' .repeat(60));

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á student_boarding_status
    const { data: boardingStatus, error: boardingError } = await supabase
      .from('student_boarding_status')
      .select('*')
      .order('student_id');

    if (boardingError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• student_boarding_status ‡πÑ‡∏î‡πâ:', boardingError);
    } else {
      console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• boarding status ${boardingStatus?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      if (boardingStatus && boardingStatus.length > 0) {
        console.log('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• boarding status:');
        console.log('-'.repeat(80));
        console.log('Student ID\t| Status\t| Timestamp');
        console.log('-'.repeat(80));
        
        let sentCount = 0;
        let pickedUpCount = 0;
        let waitingCount = 0;
        
        boardingStatus.forEach(status => {
          console.log(`${status.student_id}\t\t| ${status.boarding_status}\t| ${status.created_at}`);
          
          if (status.boarding_status === 'dropped') sentCount++;
          else if (status.boarding_status === 'boarded') pickedUpCount++;
          else if (status.boarding_status === 'waiting') waitingCount++;
        });
        
        console.log('-'.repeat(80));
        console.log('\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ boarding:');
        console.log(`üü° waiting (‡∏£‡∏≠‡∏£‡∏±‡∏ö): ${waitingCount} ‡∏Ñ‡∏ô`);
        console.log(`üü¢ boarded (‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß): ${pickedUpCount} ‡∏Ñ‡∏ô`);
        console.log(`üîµ dropped (‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß): ${sentCount} ‡∏Ñ‡∏ô`);
        
        if (sentCount > 0) {
          console.log(`\n‚ö†Ô∏è  ‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${sentCount} ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß" ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≠‡∏£‡∏±‡∏ö"`);
        }
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á students
    const { data: students, error: studentsError } = await supabase
      .from('students')
      .select('student_id, student_name, status')
      .order('student_id');

    if (studentsError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• students ‡πÑ‡∏î‡πâ:', studentsError);
    } else {
      console.log(`\nüìä ‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${students?.length || 0} ‡∏Ñ‡∏ô`);
      
      if (students && students.length > 0) {
        console.log('\nüìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á students:');
        console.log('-'.repeat(60));
        console.log('Student ID\t| ‡∏ä‡∏∑‡πà‡∏≠\t\t\t| Status');
        console.log('-'.repeat(60));
        
        let activeCount = 0;
        let inactiveCount = 0;
        
        students.forEach(student => {
          console.log(`${student.student_id}\t\t| ${student.student_name.padEnd(20)}\t| ${student.status}`);
          
          if (student.status === 'active') activeCount++;
          else inactiveCount++;
        });
        
        console.log('-'.repeat(60));
        console.log(`\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ students: Active: ${activeCount}, Inactive: ${inactiveCount}`);
      }
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
checkStudentStatus().then(() => {
  console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  process.exit(1);
});