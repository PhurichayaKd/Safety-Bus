import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import path from 'path';

// ‡πÇ‡∏´‡∏•‡∏î environment variables
dotenv.config({ path: path.join(process.cwd(), '../safety-bus-bot/vercel-deploy/.env.local') });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testEnhancedRFIDSystem() {
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö RFID ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß...\n');

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testData = {
        rfid_code: 'TEST001',
        driver_id: 1,
        latitude: 13.7563,
        longitude: 100.5018,
        location_type: 'go'
    };

    try {
        console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
        console.log(`   RFID Code: ${testData.rfid_code}`);
        console.log(`   Driver ID: ${testData.driver_id}`);
        console.log(`   Location: ${testData.latitude}, ${testData.longitude}`);
        console.log(`   Type: ${testData.location_type}\n`);

        // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan
        console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô record_rfid_scan...');
        const { data: scanResult, error: scanError } = await supabase.rpc('record_rfid_scan', {
            p_rfid_code: testData.rfid_code,
            p_driver_id: testData.driver_id,
            p_latitude: testData.latitude,
            p_longitude: testData.longitude,
            p_location_type: testData.location_type
        });

        if (scanError) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID:', scanError);
            return false;
        }

        console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID:');
        console.log(JSON.stringify(scanResult, null, 2));
        console.log();

        // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification logs
        console.log('üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification logs...');
        const { data: logs, error: logsError } = await supabase
            .from('notification_logs')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(5);

        if (logsError) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á logs:', logsError);
        } else {
            console.log('üìä Notification logs ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
            logs.forEach((log, index) => {
                console.log(`   ${index + 1}. ${log.notification_type} - ${log.status} - ${log.message.substring(0, 50)}...`);
            });
        }
        console.log();

        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö student_boarding_status
        if (scanResult.success && scanResult.student_id) {
            console.log('üë¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô...');
            const { data: studentStatus, error: statusError } = await supabase
                .from('student_boarding_status')
                .select('*')
                .eq('student_id', scanResult.student_id.toString())
                .order('created_at', { ascending: false })
                .limit(3);

            if (statusError) {
                console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:', statusError);
            } else {
                console.log('üìà ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
                studentStatus.forEach((status, index) => {
                    console.log(`   ${index + 1}. ${status.trip_phase} - ${status.boarding_status} - ${status.trip_date}`);
                });
            }
        }
        console.log();

        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pickup_dropoff records
        console.log('üöå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á‡∏£‡∏ñ...');
        const { data: pickupRecords, error: pickupError } = await supabase
            .from('pickup_dropoff')
            .select('*')
            .order('event_time', { ascending: false })
            .limit(3);

        if (pickupError) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á‡∏£‡∏ñ:', pickupError);
        } else {
            console.log('üìã ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á‡∏£‡∏ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
            pickupRecords.forEach((record, index) => {
                console.log(`   ${index + 1}. Student ${record.student_id} - ${record.event_type} - ${record.location_type} - ${record.event_time}`);
            });
        }

        return true;

    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
        return false;
    }
}

async function testLineNotification() {
    console.log('\nüì± ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á LINE notification...');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE User ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (33 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    const testLineUserId = 'U4ad414fe3c0be5d251cd0029c87d050d';
    const testMessage = 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Safety Bus\n‚è∞ ' + new Date().toLocaleString('th-TH');

    try {
        const { data: lineResult, error: lineError } = await supabase.rpc('test_line_notification', {
            p_line_user_id: testLineUserId,
            p_test_message: testMessage
        });

        if (lineError) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE:', lineError);
            return false;
        }

        console.log('üì± ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE:');
        console.log(JSON.stringify(lineResult, null, 2));

        return lineResult.success;

    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE:', error);
        return false;
    }
}

async function runAllTests() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Safety Bus ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß');
    console.log('=' .repeat(60));

    const rfidTestResult = await testEnhancedRFIDSystem();
    const lineTestResult = await testLineNotification();

    console.log('\n' + '=' .repeat(60));
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log(`   üîç RFID System: ${rfidTestResult ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' : '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}`);
    console.log(`   üì± LINE Notification: ${lineTestResult ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' : '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}`);
    
    if (rfidTestResult && lineTestResult) {
        console.log('\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!');
    } else {
        console.log('\n‚ö†Ô∏è  ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
        if (!lineTestResult) {
            console.log('üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE token');
        }
    }

    return rfidTestResult;
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
runAllTests().then(success => {
    process.exit(success ? 0 : 1);
}).catch(error => {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
    process.exit(1);
});