import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Missing Supabase environment variables');
    console.log('SUPABASE_URL:', supabaseUrl ? 'Set' : 'Missing');
    console.log('SUPABASE_ANON_KEY:', supabaseKey ? 'Set' : 'Missing');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testUpdatedTripPhaseFunction() {
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô update_driver_trip_phase ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß...\n');

    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        const { data: drivers, error: driversError } = await supabase
            .from('driver_bus')
            .select('driver_id, driver_name, trip_phase')
            .limit(1);

        if (driversError) {
            console.error('‚ùå Error fetching drivers:', driversError);
            return;
        }

        if (!drivers || drivers.length === 0) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
            return;
        }

        const testDriver = drivers[0];
        console.log(`üìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${testDriver.driver_name} (ID: ${testDriver.driver_id})`);
        console.log(`üìã trip_phase ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${testDriver.trip_phase}\n`);

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô 'go'
        console.log('üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô "go"');
        const { data: result1, error: error1 } = await supabase
            .rpc('update_driver_trip_phase', {
                p_driver_id: testDriver.driver_id,
                p_trip_phase: 'go',
                p_latitude: 13.7563,
                p_longitude: 100.5018
            });

        if (error1) {
            console.error('‚ùå Error:', error1);
        } else {
            console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(result1, null, 2));
        }

        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
        await new Promise(resolve => setTimeout(resolve, 1000));

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô 'return'
        console.log('\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï trip_phase ‡πÄ‡∏õ‡πá‡∏ô "return"');
        const { data: result2, error: error2 } = await supabase
            .rpc('update_driver_trip_phase', {
                p_driver_id: testDriver.driver_id,
                p_trip_phase: 'return',
                p_latitude: 13.7563,
                p_longitude: 100.5018
            });

        if (error2) {
            console.error('‚ùå Error:', error2);
        } else {
            console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(result2, null, 2));
        }

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞ error)
        console.log('\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ trip_phase ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á "pickup" (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞ error)');
        const { data: result3, error: error3 } = await supabase
            .rpc('update_driver_trip_phase', {
                p_driver_id: testDriver.driver_id,
                p_trip_phase: 'pickup'
            });

        if (error3) {
            console.error('‚ùå Error (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á):', error3);
        } else {
            console.log('üìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(result3, null, 2));
            if (result3 && !result3.success) {
                console.log('‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        console.log('\nüìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
        const { data: finalData, error: finalError } = await supabase
            .from('driver_bus')
            .select('driver_id, driver_name, trip_phase, current_status, current_updated_at')
            .eq('driver_id', testDriver.driver_id);

        if (finalError) {
            console.error('‚ùå Error fetching final data:', finalError);
        } else {
            console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', JSON.stringify(finalData[0], null, 2));
        }

        console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');

    } catch (error) {
        console.error('‚ùå Unexpected error:', error);
    }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testUpdatedTripPhaseFunction();